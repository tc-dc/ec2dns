// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_QUOTA_H_
#define  GOOGLE_COMPUTE_API_QUOTA_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * A quotas entry.
 *
 * @ingroup DataObject
 */
class Quota : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Quota* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Quota(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Quota(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Quota();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::Quota</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::Quota");
  }

  /**
   * Determine if the '<code>limit</code>' attribute was set.
   *
   * @return true if the '<code>limit</code>' attribute was set.
   */
  bool has_limit() const {
    return Storage().isMember("limit");
  }

  /**
   * Clears the '<code>limit</code>' attribute.
   */
  void clear_limit() {
    MutableStorage()->removeMember("limit");
  }


  /**
   * Get the value of the '<code>limit</code>' attribute.
   */
  double get_limit() const {
    const Json::Value& storage = Storage("limit");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>limit</code>' attribute.
   *
   * [Output Only] Quota limit for this metric.
   *
   * @param[in] value The new value.
   */
  void set_limit(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("limit"));
  }

  /**
   * Determine if the '<code>metric</code>' attribute was set.
   *
   * @return true if the '<code>metric</code>' attribute was set.
   */
  bool has_metric() const {
    return Storage().isMember("metric");
  }

  /**
   * Clears the '<code>metric</code>' attribute.
   */
  void clear_metric() {
    MutableStorage()->removeMember("metric");
  }


  /**
   * Get the value of the '<code>metric</code>' attribute.
   */
  const StringPiece get_metric() const {
    const Json::Value& v = Storage("metric");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>metric</code>' attribute.
   *
   * [Output Only] Name of the quota metric.
   *
   * @param[in] value The new value.
   */
  void set_metric(const StringPiece& value) {
    *MutableStorage("metric") = value.data();
  }

  /**
   * Determine if the '<code>usage</code>' attribute was set.
   *
   * @return true if the '<code>usage</code>' attribute was set.
   */
  bool has_usage() const {
    return Storage().isMember("usage");
  }

  /**
   * Clears the '<code>usage</code>' attribute.
   */
  void clear_usage() {
    MutableStorage()->removeMember("usage");
  }


  /**
   * Get the value of the '<code>usage</code>' attribute.
   */
  double get_usage() const {
    const Json::Value& storage = Storage("usage");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>usage</code>' attribute.
   *
   * [Output Only] Current usage of this metric.
   *
   * @param[in] value The new value.
   */
  void set_usage(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("usage"));
  }

 private:
  void operator=(const Quota&);
};  // Quota
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_QUOTA_H_
