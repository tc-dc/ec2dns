// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_ATTACHED_DISK_INITIALIZE_PARAMS_H_
#define  GOOGLE_COMPUTE_API_ATTACHED_DISK_INITIALIZE_PARAMS_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/customer_encryption_key.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * [Input Only] Specifies the parameters for a new disk that will be created
 * alongside the new instance. Use initialization parameters to create boot
 * disks or local SSDs attached to the new instance.
 *
 * This property is mutually exclusive with the source property; you can only
 * define one or the other, but not both.
 *
 * @ingroup DataObject
 */
class AttachedDiskInitializeParams : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static AttachedDiskInitializeParams* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit AttachedDiskInitializeParams(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit AttachedDiskInitializeParams(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~AttachedDiskInitializeParams();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::AttachedDiskInitializeParams</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::AttachedDiskInitializeParams");
  }

  /**
   * Determine if the '<code>diskName</code>' attribute was set.
   *
   * @return true if the '<code>diskName</code>' attribute was set.
   */
  bool has_disk_name() const {
    return Storage().isMember("diskName");
  }

  /**
   * Clears the '<code>diskName</code>' attribute.
   */
  void clear_disk_name() {
    MutableStorage()->removeMember("diskName");
  }


  /**
   * Get the value of the '<code>diskName</code>' attribute.
   */
  const StringPiece get_disk_name() const {
    const Json::Value& v = Storage("diskName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>diskName</code>' attribute.
   *
   * Specifies the disk name. If not specified, the default is to use the name
   * of the instance.
   *
   * @param[in] value The new value.
   */
  void set_disk_name(const StringPiece& value) {
    *MutableStorage("diskName") = value.data();
  }

  /**
   * Determine if the '<code>diskSizeGb</code>' attribute was set.
   *
   * @return true if the '<code>diskSizeGb</code>' attribute was set.
   */
  bool has_disk_size_gb() const {
    return Storage().isMember("diskSizeGb");
  }

  /**
   * Clears the '<code>diskSizeGb</code>' attribute.
   */
  void clear_disk_size_gb() {
    MutableStorage()->removeMember("diskSizeGb");
  }


  /**
   * Get the value of the '<code>diskSizeGb</code>' attribute.
   */
  int64 get_disk_size_gb() const {
    const Json::Value& storage = Storage("diskSizeGb");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>diskSizeGb</code>' attribute.
   *
   * Specifies the size of the disk in base-2 GB.
   *
   * @param[in] value The new value.
   */
  void set_disk_size_gb(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("diskSizeGb"));
  }

  /**
   * Determine if the '<code>diskType</code>' attribute was set.
   *
   * @return true if the '<code>diskType</code>' attribute was set.
   */
  bool has_disk_type() const {
    return Storage().isMember("diskType");
  }

  /**
   * Clears the '<code>diskType</code>' attribute.
   */
  void clear_disk_type() {
    MutableStorage()->removeMember("diskType");
  }


  /**
   * Get the value of the '<code>diskType</code>' attribute.
   */
  const StringPiece get_disk_type() const {
    const Json::Value& v = Storage("diskType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>diskType</code>' attribute.
   *
   * Specifies the disk type to use to create the instance. If not specified,
   * the default is pd-standard, specified using the full URL. For example:
   *
   * https://www.googleapis.com/compute/v1/projects/project/zones/zone/diskTypes
   * /pd-standard
   *
   * <dl>
   * <dt>pd
   * <dd>ssd and local-ssd. If you define this field, you can provide either the
   * full or partial URL. For example, the following are valid values:.
   * <dt>https://www.googleapis.com/compute/v1/projects/project/zones/zone/diskT
   * ypes/diskType
   * <dd>projects/project/zones/zone/diskTypes/diskType.
   * </dl>
   *
   *
   * @param[in] value The new value.
   */
  void set_disk_type(const StringPiece& value) {
    *MutableStorage("diskType") = value.data();
  }

  /**
   * Determine if the '<code>sourceImage</code>' attribute was set.
   *
   * @return true if the '<code>sourceImage</code>' attribute was set.
   */
  bool has_source_image() const {
    return Storage().isMember("sourceImage");
  }

  /**
   * Clears the '<code>sourceImage</code>' attribute.
   */
  void clear_source_image() {
    MutableStorage()->removeMember("sourceImage");
  }


  /**
   * Get the value of the '<code>sourceImage</code>' attribute.
   */
  const StringPiece get_source_image() const {
    const Json::Value& v = Storage("sourceImage");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sourceImage</code>' attribute.
   *
   * <dl>
   * <dt>family/debian
   * <dd>8 to use the latest Debian 8 image:.
   * <dt>projects/debian-cloud/global/images/family/debian
   * <dd>8.
   * </dl>
   *
   *
   * projects/debian-cloud/global/images/debian-8-jessie-vYYYYMMDD
   *
   * To create a disk with a private image that you created, specify the image
   * name in the following format:
   *
   * global/images/my-private-image
   *
   *
   * You can also specify a private image by its image family, which returns the
   * latest version of the image in that family. Replace the image name with
   * family/family-name:
   *
   * global/images/family/my-private-family
   *
   * If the source image is deleted later, this field will not be set.
   *
   * @param[in] value The new value.
   */
  void set_source_image(const StringPiece& value) {
    *MutableStorage("sourceImage") = value.data();
  }

  /**
   * Determine if the '<code>sourceImageEncryptionKey</code>' attribute was set.
   *
   * @return true if the '<code>sourceImageEncryptionKey</code>' attribute was
   * set.
   */
  bool has_source_image_encryption_key() const {
    return Storage().isMember("sourceImageEncryptionKey");
  }

  /**
   * Clears the '<code>sourceImageEncryptionKey</code>' attribute.
   */
  void clear_source_image_encryption_key() {
    MutableStorage()->removeMember("sourceImageEncryptionKey");
  }


  /**
   * Get a reference to the value of the '<code>sourceImageEncryptionKey</code>'
   * attribute.
   */
  const CustomerEncryptionKey get_source_image_encryption_key() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>sourceImageEncryptionKey</code>' property.
   *
   * The customer-supplied encryption key of the source image. Required if the
   * source image is protected by a customer-supplied encryption key.
   *
   * Instance templates do not store customer-supplied encryption keys, so you
   * cannot create disks for instances in a managed instance group if the source
   * images are encrypted with your own keys.
   *
   * @return The result can be modified to change the attribute value.
   */
  CustomerEncryptionKey mutable_sourceImageEncryptionKey();

 private:
  void operator=(const AttachedDiskInitializeParams&);
};  // AttachedDiskInitializeParams
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_ATTACHED_DISK_INITIALIZE_PARAMS_H_
