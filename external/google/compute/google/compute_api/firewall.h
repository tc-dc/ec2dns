// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_FIREWALL_H_
#define  GOOGLE_COMPUTE_API_FIREWALL_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * Represents a Firewall resource.
 *
 * @ingroup DataObject
 */
class Firewall : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class FirewallAllowed : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static FirewallAllowed* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FirewallAllowed(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit FirewallAllowed(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~FirewallAllowed();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_compute_api::FirewallAllowed</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_compute_api::FirewallAllowed");
    }

    /**
     * Determine if the '<code>IPProtocol</code>' attribute was set.
     *
     * @return true if the '<code>IPProtocol</code>' attribute was set.
     */
    bool has_ipp_rotocol() const {
      return Storage().isMember("IPProtocol");
    }

    /**
     * Clears the '<code>IPProtocol</code>' attribute.
     */
    void clear_ipp_rotocol() {
      MutableStorage()->removeMember("IPProtocol");
    }


    /**
     * Get the value of the '<code>IPProtocol</code>' attribute.
     */
    const StringPiece get_ipp_rotocol() const {
      const Json::Value& v = Storage("IPProtocol");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>IPProtocol</code>' attribute.
     *
     * The IP protocol to which this rule applies. The protocol type is required
     * when creating a firewall rule. This value can either be one of the
     * following well known protocol strings (tcp, udp, icmp, esp, ah, sctp), or
     * the IP protocol number.
     *
     * @param[in] value The new value.
     */
    void set_ipp_rotocol(const StringPiece& value) {
      *MutableStorage("IPProtocol") = value.data();
    }

    /**
     * Determine if the '<code>ports</code>' attribute was set.
     *
     * @return true if the '<code>ports</code>' attribute was set.
     */
    bool has_ports() const {
      return Storage().isMember("ports");
    }

    /**
     * Clears the '<code>ports</code>' attribute.
     */
    void clear_ports() {
      MutableStorage()->removeMember("ports");
    }


    /**
     * Get a reference to the value of the '<code>ports</code>' attribute.
     */
    const client::JsonCppArray<string > get_ports() const {
       const Json::Value& storage = Storage("ports");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>ports</code>' property.
     *
     * An optional list of ports to which this rule applies. This field is only
     * applicable for UDP or TCP protocol. Each entry must be either an integer
     * or a range. If not specified, this rule applies to connections through
     * any port.
     *
     * Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<string > mutable_ports() {
      Json::Value* storage = MutableStorage("ports");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
    }

   private:
    void operator=(const FirewallAllowed&);
  };  // FirewallAllowed
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Firewall* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Firewall(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Firewall(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Firewall();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::Firewall</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::Firewall");
  }

  /**
   * Determine if the '<code>allowed</code>' attribute was set.
   *
   * @return true if the '<code>allowed</code>' attribute was set.
   */
  bool has_allowed() const {
    return Storage().isMember("allowed");
  }

  /**
   * Clears the '<code>allowed</code>' attribute.
   */
  void clear_allowed() {
    MutableStorage()->removeMember("allowed");
  }


  /**
   * Get a reference to the value of the '<code>allowed</code>' attribute.
   */
  const client::JsonCppArray<FirewallAllowed > get_allowed() const {
     const Json::Value& storage = Storage("allowed");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<FirewallAllowed > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>allowed</code>' property.
   *
   * The list of ALLOW rules specified by this firewall. Each rule specifies a
   * protocol and port-range tuple that describes a permitted connection.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<FirewallAllowed > mutable_allowed() {
    Json::Value* storage = MutableStorage("allowed");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<FirewallAllowed > >(storage);
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Ony] Type of the resource. Always compute#firewall for firewall
   * rules.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of the resource; provided by the client when the resource is created.
   * The name must be 1-63 characters long, and comply with RFC1035.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must
   * be a lowercase letter, and all following characters must be a dash,
   * lowercase letter, or digit, except the last character, which cannot be a
   * dash.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>network</code>' attribute was set.
   *
   * @return true if the '<code>network</code>' attribute was set.
   */
  bool has_network() const {
    return Storage().isMember("network");
  }

  /**
   * Clears the '<code>network</code>' attribute.
   */
  void clear_network() {
    MutableStorage()->removeMember("network");
  }


  /**
   * Get the value of the '<code>network</code>' attribute.
   */
  const StringPiece get_network() const {
    const Json::Value& v = Storage("network");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>network</code>' attribute.
   *
   * <dl>
   * <dt>used
   * <dd>global/networks/default.
   * <dt>URLs
   * <dd>.
   * </dl>
   *
   * - https://www.googleapis.com/compute/v1/projects/myproject/global/networks
   * /my-network
   * - projects/myproject/global/networks/my-network
   * - global/networks/default.
   *
   * @param[in] value The new value.
   */
  void set_network(const StringPiece& value) {
    *MutableStorage("network") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>sourceRanges</code>' attribute was set.
   *
   * @return true if the '<code>sourceRanges</code>' attribute was set.
   */
  bool has_source_ranges() const {
    return Storage().isMember("sourceRanges");
  }

  /**
   * Clears the '<code>sourceRanges</code>' attribute.
   */
  void clear_source_ranges() {
    MutableStorage()->removeMember("sourceRanges");
  }


  /**
   * Get a reference to the value of the '<code>sourceRanges</code>' attribute.
   */
  const client::JsonCppArray<string > get_source_ranges() const {
     const Json::Value& storage = Storage("sourceRanges");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>sourceRanges</code>'
   * property.
   *
   * If source ranges are specified, the firewall will apply only to traffic
   * that has source IP address in these ranges. These ranges must be expressed
   * in CIDR format. One or both of sourceRanges and sourceTags may be set. If
   * both properties are set, the firewall will apply to traffic that has source
   * IP address within sourceRanges OR the source IP that belongs to a tag
   * listed in the sourceTags property. The connection does not need to match
   * both properties for the firewall to apply. Only IPv4 is supported.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_sourceRanges() {
    Json::Value* storage = MutableStorage("sourceRanges");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>sourceTags</code>' attribute was set.
   *
   * @return true if the '<code>sourceTags</code>' attribute was set.
   */
  bool has_source_tags() const {
    return Storage().isMember("sourceTags");
  }

  /**
   * Clears the '<code>sourceTags</code>' attribute.
   */
  void clear_source_tags() {
    MutableStorage()->removeMember("sourceTags");
  }


  /**
   * Get a reference to the value of the '<code>sourceTags</code>' attribute.
   */
  const client::JsonCppArray<string > get_source_tags() const {
     const Json::Value& storage = Storage("sourceTags");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>sourceTags</code>'
   * property.
   *
   * If source tags are specified, the firewall will apply only to traffic with
   * source IP that belongs to a tag listed in source tags. Source tags cannot
   * be used to control traffic to an instance's external IP address. Because
   * tags are associated with an instance, not an IP address. One or both of
   * sourceRanges and sourceTags may be set. If both properties are set, the
   * firewall will apply to traffic that has source IP address within
   * sourceRanges OR the source IP that belongs to a tag listed in the
   * sourceTags property. The connection does not need to match both properties
   * for the firewall to apply.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_sourceTags() {
    Json::Value* storage = MutableStorage("sourceTags");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>targetTags</code>' attribute was set.
   *
   * @return true if the '<code>targetTags</code>' attribute was set.
   */
  bool has_target_tags() const {
    return Storage().isMember("targetTags");
  }

  /**
   * Clears the '<code>targetTags</code>' attribute.
   */
  void clear_target_tags() {
    MutableStorage()->removeMember("targetTags");
  }


  /**
   * Get a reference to the value of the '<code>targetTags</code>' attribute.
   */
  const client::JsonCppArray<string > get_target_tags() const {
     const Json::Value& storage = Storage("targetTags");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>targetTags</code>'
   * property.
   *
   * A list of instance tags indicating sets of instances located in the network
   * that may make network connections as specified in allowed[]. If no
   * targetTags are specified, the firewall rule applies to all instances on the
   * specified network.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_targetTags() {
    Json::Value* storage = MutableStorage("targetTags");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

 private:
  void operator=(const Firewall&);
};  // Firewall
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_FIREWALL_H_
