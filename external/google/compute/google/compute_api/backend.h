// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_BACKEND_H_
#define  GOOGLE_COMPUTE_API_BACKEND_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * Message containing information of one individual backend.
 *
 * @ingroup DataObject
 */
class Backend : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Backend* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Backend(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Backend(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Backend();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::Backend</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::Backend");
  }

  /**
   * Determine if the '<code>balancingMode</code>' attribute was set.
   *
   * @return true if the '<code>balancingMode</code>' attribute was set.
   */
  bool has_balancing_mode() const {
    return Storage().isMember("balancingMode");
  }

  /**
   * Clears the '<code>balancingMode</code>' attribute.
   */
  void clear_balancing_mode() {
    MutableStorage()->removeMember("balancingMode");
  }


  /**
   * Get the value of the '<code>balancingMode</code>' attribute.
   */
  const StringPiece get_balancing_mode() const {
    const Json::Value& v = Storage("balancingMode");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>balancingMode</code>' attribute.
   *
   * Specifies the balancing mode for this backend. For global HTTP(S) or
   * TCP/SSL load balancing, the default is UTILIZATION. Valid values are
   * UTILIZATION, RATE (for HTTP(S)) and CONNECTION (for TCP/SSL).
   *
   * This cannot be used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_balancing_mode(const StringPiece& value) {
    *MutableStorage("balancingMode") = value.data();
  }

  /**
   * Determine if the '<code>capacityScaler</code>' attribute was set.
   *
   * @return true if the '<code>capacityScaler</code>' attribute was set.
   */
  bool has_capacity_scaler() const {
    return Storage().isMember("capacityScaler");
  }

  /**
   * Clears the '<code>capacityScaler</code>' attribute.
   */
  void clear_capacity_scaler() {
    MutableStorage()->removeMember("capacityScaler");
  }


  /**
   * Get the value of the '<code>capacityScaler</code>' attribute.
   */
  float get_capacity_scaler() const {
    const Json::Value& storage = Storage("capacityScaler");
    return client::JsonValueToCppValueHelper<float >(storage);
  }

  /**
   * Change the '<code>capacityScaler</code>' attribute.
   *
   * A multiplier applied to the group's maximum servicing capacity (based on
   * UTILIZATION, RATE or CONNECTION). Default value is 1, which means the group
   * will serve up to 100% of its configured capacity (depending on
   * balancingMode). A setting of 0 means the group is completely drained,
   * offering 0% of its available Capacity. Valid range is [0.0,1.0].
   *
   * This cannot be used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_capacity_scaler(float value) {
    client::SetJsonValueFromCppValueHelper<float >(
      value, MutableStorage("capacityScaler"));
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>group</code>' attribute was set.
   *
   * @return true if the '<code>group</code>' attribute was set.
   */
  bool has_group() const {
    return Storage().isMember("group");
  }

  /**
   * Clears the '<code>group</code>' attribute.
   */
  void clear_group() {
    MutableStorage()->removeMember("group");
  }


  /**
   * Get the value of the '<code>group</code>' attribute.
   */
  const StringPiece get_group() const {
    const Json::Value& v = Storage("group");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>group</code>' attribute.
   *
   * The fully-qualified URL of a zonal Instance Group resource. This instance
   * group defines the list of instances that serve traffic. Member virtual
   * machine instances from each instance group must live in the same zone as
   * the instance group itself. No two backends in a backend service are allowed
   * to use same Instance Group resource.
   *
   * Note that you must specify an Instance Group resource using the fully-
   * qualified URL, rather than a partial URL.
   *
   * When the BackendService has load balancing scheme INTERNAL, the instance
   * group must be in a zone within the same region as the BackendService.
   *
   * @param[in] value The new value.
   */
  void set_group(const StringPiece& value) {
    *MutableStorage("group") = value.data();
  }

  /**
   * Determine if the '<code>maxConnections</code>' attribute was set.
   *
   * @return true if the '<code>maxConnections</code>' attribute was set.
   */
  bool has_max_connections() const {
    return Storage().isMember("maxConnections");
  }

  /**
   * Clears the '<code>maxConnections</code>' attribute.
   */
  void clear_max_connections() {
    MutableStorage()->removeMember("maxConnections");
  }


  /**
   * Get the value of the '<code>maxConnections</code>' attribute.
   */
  int32 get_max_connections() const {
    const Json::Value& storage = Storage("maxConnections");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>maxConnections</code>' attribute.
   *
   * The max number of simultaneous connections for the group. Can be used with
   * either CONNECTION or UTILIZATION balancing modes. For CONNECTION mode,
   * either maxConnections or maxConnectionsPerInstance must be set.
   *
   * This cannot be used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_max_connections(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("maxConnections"));
  }

  /**
   * Determine if the '<code>maxConnectionsPerInstance</code>' attribute was
   * set.
   *
   * @return true if the '<code>maxConnectionsPerInstance</code>' attribute was
   * set.
   */
  bool has_max_connections_per_instance() const {
    return Storage().isMember("maxConnectionsPerInstance");
  }

  /**
   * Clears the '<code>maxConnectionsPerInstance</code>' attribute.
   */
  void clear_max_connections_per_instance() {
    MutableStorage()->removeMember("maxConnectionsPerInstance");
  }


  /**
   * Get the value of the '<code>maxConnectionsPerInstance</code>' attribute.
   */
  int32 get_max_connections_per_instance() const {
    const Json::Value& storage = Storage("maxConnectionsPerInstance");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>maxConnectionsPerInstance</code>' attribute.
   *
   * The max number of simultaneous connections that a single backend instance
   * can handle. This is used to calculate the capacity of the group. Can be
   * used in either CONNECTION or UTILIZATION balancing modes. For CONNECTION
   * mode, either maxConnections or maxConnectionsPerInstance must be set.
   *
   * This cannot be used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_max_connections_per_instance(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("maxConnectionsPerInstance"));
  }

  /**
   * Determine if the '<code>maxRate</code>' attribute was set.
   *
   * @return true if the '<code>maxRate</code>' attribute was set.
   */
  bool has_max_rate() const {
    return Storage().isMember("maxRate");
  }

  /**
   * Clears the '<code>maxRate</code>' attribute.
   */
  void clear_max_rate() {
    MutableStorage()->removeMember("maxRate");
  }


  /**
   * Get the value of the '<code>maxRate</code>' attribute.
   */
  int32 get_max_rate() const {
    const Json::Value& storage = Storage("maxRate");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>maxRate</code>' attribute.
   *
   * The max requests per second (RPS) of the group. Can be used with either
   * RATE or UTILIZATION balancing modes, but required if RATE mode. For RATE
   * mode, either maxRate or maxRatePerInstance must be set.
   *
   * This cannot be used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_max_rate(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("maxRate"));
  }

  /**
   * Determine if the '<code>maxRatePerInstance</code>' attribute was set.
   *
   * @return true if the '<code>maxRatePerInstance</code>' attribute was set.
   */
  bool has_max_rate_per_instance() const {
    return Storage().isMember("maxRatePerInstance");
  }

  /**
   * Clears the '<code>maxRatePerInstance</code>' attribute.
   */
  void clear_max_rate_per_instance() {
    MutableStorage()->removeMember("maxRatePerInstance");
  }


  /**
   * Get the value of the '<code>maxRatePerInstance</code>' attribute.
   */
  float get_max_rate_per_instance() const {
    const Json::Value& storage = Storage("maxRatePerInstance");
    return client::JsonValueToCppValueHelper<float >(storage);
  }

  /**
   * Change the '<code>maxRatePerInstance</code>' attribute.
   *
   * The max requests per second (RPS) that a single backend instance can
   * handle.This is used to calculate the capacity of the group. Can be used in
   * either balancing mode. For RATE mode, either maxRate or maxRatePerInstance
   * must be set.
   *
   * This cannot be used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_max_rate_per_instance(float value) {
    client::SetJsonValueFromCppValueHelper<float >(
      value, MutableStorage("maxRatePerInstance"));
  }

  /**
   * Determine if the '<code>maxUtilization</code>' attribute was set.
   *
   * @return true if the '<code>maxUtilization</code>' attribute was set.
   */
  bool has_max_utilization() const {
    return Storage().isMember("maxUtilization");
  }

  /**
   * Clears the '<code>maxUtilization</code>' attribute.
   */
  void clear_max_utilization() {
    MutableStorage()->removeMember("maxUtilization");
  }


  /**
   * Get the value of the '<code>maxUtilization</code>' attribute.
   */
  float get_max_utilization() const {
    const Json::Value& storage = Storage("maxUtilization");
    return client::JsonValueToCppValueHelper<float >(storage);
  }

  /**
   * Change the '<code>maxUtilization</code>' attribute.
   *
   * Used when balancingMode is UTILIZATION. This ratio defines the CPU
   * utilization target for the group. The default is 0.8. Valid range is [0.0,
   * 1.0].
   *
   * This cannot be used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_max_utilization(float value) {
    client::SetJsonValueFromCppValueHelper<float >(
      value, MutableStorage("maxUtilization"));
  }

 private:
  void operator=(const Backend&);
};  // Backend
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_BACKEND_H_
