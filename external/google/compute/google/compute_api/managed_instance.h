// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_MANAGED_INSTANCE_H_
#define  GOOGLE_COMPUTE_API_MANAGED_INSTANCE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/managed_instance_last_attempt.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class ManagedInstance : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ManagedInstance* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ManagedInstance(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ManagedInstance(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ManagedInstance();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::ManagedInstance</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::ManagedInstance");
  }

  /**
   * Determine if the '<code>currentAction</code>' attribute was set.
   *
   * @return true if the '<code>currentAction</code>' attribute was set.
   */
  bool has_current_action() const {
    return Storage().isMember("currentAction");
  }

  /**
   * Clears the '<code>currentAction</code>' attribute.
   */
  void clear_current_action() {
    MutableStorage()->removeMember("currentAction");
  }


  /**
   * Get the value of the '<code>currentAction</code>' attribute.
   */
  const StringPiece get_current_action() const {
    const Json::Value& v = Storage("currentAction");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>currentAction</code>' attribute.
   *
   * [Output Only] The current action that the managed instance group has
   * scheduled for the instance. Possible values:
   * - NONE The instance is running, and the managed instance group does not
   * have any scheduled actions for this instance.
   * - CREATING The managed instance group is creating this instance. If the
   * group fails to create this instance, it will try again until it is
   * successful.
   * - CREATING_WITHOUT_RETRIES The managed instance group is attempting to
   * create this instance only once. If the group fails to create this instance,
   * it does not try again and the group's targetSize value is decreased
   * instead.
   * - RECREATING The managed instance group is recreating this instance.
   * - DELETING The managed instance group is permanently deleting this
   * instance.
   * - ABANDONING The managed instance group is abandoning this instance. The
   * instance will be removed from the instance group and from any target pools
   * that are associated with this group.
   * - RESTARTING The managed instance group is restarting the instance.
   * - REFRESHING The managed instance group is applying configuration changes
   * to the instance without stopping it. For example, the group can update the
   * target pool list for an instance without stopping that instance.
   *
   * @param[in] value The new value.
   */
  void set_current_action(const StringPiece& value) {
    *MutableStorage("currentAction") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output only] The unique identifier for this resource. This field is empty
   * when instance does not exist.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>instance</code>' attribute was set.
   *
   * @return true if the '<code>instance</code>' attribute was set.
   */
  bool has_instance() const {
    return Storage().isMember("instance");
  }

  /**
   * Clears the '<code>instance</code>' attribute.
   */
  void clear_instance() {
    MutableStorage()->removeMember("instance");
  }


  /**
   * Get the value of the '<code>instance</code>' attribute.
   */
  const StringPiece get_instance() const {
    const Json::Value& v = Storage("instance");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>instance</code>' attribute.
   *
   * [Output Only] The URL of the instance. The URL can exist even if the
   * instance has not yet been created.
   *
   * @param[in] value The new value.
   */
  void set_instance(const StringPiece& value) {
    *MutableStorage("instance") = value.data();
  }

  /**
   * Determine if the '<code>instanceStatus</code>' attribute was set.
   *
   * @return true if the '<code>instanceStatus</code>' attribute was set.
   */
  bool has_instance_status() const {
    return Storage().isMember("instanceStatus");
  }

  /**
   * Clears the '<code>instanceStatus</code>' attribute.
   */
  void clear_instance_status() {
    MutableStorage()->removeMember("instanceStatus");
  }


  /**
   * Get the value of the '<code>instanceStatus</code>' attribute.
   */
  const StringPiece get_instance_status() const {
    const Json::Value& v = Storage("instanceStatus");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>instanceStatus</code>' attribute.
   *
   * [Output Only] The status of the instance. This field is empty when the
   * instance does not exist.
   *
   * @param[in] value The new value.
   */
  void set_instance_status(const StringPiece& value) {
    *MutableStorage("instanceStatus") = value.data();
  }

  /**
   * Determine if the '<code>lastAttempt</code>' attribute was set.
   *
   * @return true if the '<code>lastAttempt</code>' attribute was set.
   */
  bool has_last_attempt() const {
    return Storage().isMember("lastAttempt");
  }

  /**
   * Clears the '<code>lastAttempt</code>' attribute.
   */
  void clear_last_attempt() {
    MutableStorage()->removeMember("lastAttempt");
  }


  /**
   * Get a reference to the value of the '<code>lastAttempt</code>' attribute.
   */
  const ManagedInstanceLastAttempt get_last_attempt() const;

  /**
   * Gets a reference to a mutable value of the '<code>lastAttempt</code>'
   * property.
   *
   * [Output Only] Information about the last attempt to create or delete the
   * instance.
   *
   * @return The result can be modified to change the attribute value.
   */
  ManagedInstanceLastAttempt mutable_lastAttempt();

 private:
  void operator=(const ManagedInstance&);
};  // ManagedInstance
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_MANAGED_INSTANCE_H_
