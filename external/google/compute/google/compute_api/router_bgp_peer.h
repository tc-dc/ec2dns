// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_ROUTER_BGP_PEER_H_
#define  GOOGLE_COMPUTE_API_ROUTER_BGP_PEER_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class RouterBgpPeer : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static RouterBgpPeer* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit RouterBgpPeer(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit RouterBgpPeer(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~RouterBgpPeer();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::RouterBgpPeer</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::RouterBgpPeer");
  }

  /**
   * Determine if the '<code>advertisedRoutePriority</code>' attribute was set.
   *
   * @return true if the '<code>advertisedRoutePriority</code>' attribute was
   * set.
   */
  bool has_advertised_route_priority() const {
    return Storage().isMember("advertisedRoutePriority");
  }

  /**
   * Clears the '<code>advertisedRoutePriority</code>' attribute.
   */
  void clear_advertised_route_priority() {
    MutableStorage()->removeMember("advertisedRoutePriority");
  }


  /**
   * Get the value of the '<code>advertisedRoutePriority</code>' attribute.
   */
  uint32 get_advertised_route_priority() const {
    const Json::Value& storage = Storage("advertisedRoutePriority");
    return client::JsonValueToCppValueHelper<uint32 >(storage);
  }

  /**
   * Change the '<code>advertisedRoutePriority</code>' attribute.
   *
   * The priority of routes advertised to this BGP peer. In the case where there
   * is more than one matching route of maximum length, the routes with lowest
   * priority value win.
   *
   * @param[in] value The new value.
   */
  void set_advertised_route_priority(uint32 value) {
    client::SetJsonValueFromCppValueHelper<uint32 >(
      value, MutableStorage("advertisedRoutePriority"));
  }

  /**
   * Determine if the '<code>interfaceName</code>' attribute was set.
   *
   * @return true if the '<code>interfaceName</code>' attribute was set.
   */
  bool has_interface_name() const {
    return Storage().isMember("interfaceName");
  }

  /**
   * Clears the '<code>interfaceName</code>' attribute.
   */
  void clear_interface_name() {
    MutableStorage()->removeMember("interfaceName");
  }


  /**
   * Get the value of the '<code>interfaceName</code>' attribute.
   */
  const StringPiece get_interface_name() const {
    const Json::Value& v = Storage("interfaceName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>interfaceName</code>' attribute.
   *
   * Name of the interface the BGP peer is associated with.
   *
   * @param[in] value The new value.
   */
  void set_interface_name(const StringPiece& value) {
    *MutableStorage("interfaceName") = value.data();
  }

  /**
   * Determine if the '<code>ipAddress</code>' attribute was set.
   *
   * @return true if the '<code>ipAddress</code>' attribute was set.
   */
  bool has_ip_address() const {
    return Storage().isMember("ipAddress");
  }

  /**
   * Clears the '<code>ipAddress</code>' attribute.
   */
  void clear_ip_address() {
    MutableStorage()->removeMember("ipAddress");
  }


  /**
   * Get the value of the '<code>ipAddress</code>' attribute.
   */
  const StringPiece get_ip_address() const {
    const Json::Value& v = Storage("ipAddress");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>ipAddress</code>' attribute.
   *
   * IP address of the interface inside Google Cloud Platform. Only IPv4 is
   * supported.
   *
   * @param[in] value The new value.
   */
  void set_ip_address(const StringPiece& value) {
    *MutableStorage("ipAddress") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of this BGP peer. The name must be 1-63 characters long and comply
   * with RFC1035.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>peerAsn</code>' attribute was set.
   *
   * @return true if the '<code>peerAsn</code>' attribute was set.
   */
  bool has_peer_asn() const {
    return Storage().isMember("peerAsn");
  }

  /**
   * Clears the '<code>peerAsn</code>' attribute.
   */
  void clear_peer_asn() {
    MutableStorage()->removeMember("peerAsn");
  }


  /**
   * Get the value of the '<code>peerAsn</code>' attribute.
   */
  uint32 get_peer_asn() const {
    const Json::Value& storage = Storage("peerAsn");
    return client::JsonValueToCppValueHelper<uint32 >(storage);
  }

  /**
   * Change the '<code>peerAsn</code>' attribute.
   *
   * Peer BGP Autonomous System Number (ASN). For VPN use case, this value can
   * be different for every tunnel.
   *
   * @param[in] value The new value.
   */
  void set_peer_asn(uint32 value) {
    client::SetJsonValueFromCppValueHelper<uint32 >(
      value, MutableStorage("peerAsn"));
  }

  /**
   * Determine if the '<code>peerIpAddress</code>' attribute was set.
   *
   * @return true if the '<code>peerIpAddress</code>' attribute was set.
   */
  bool has_peer_ip_address() const {
    return Storage().isMember("peerIpAddress");
  }

  /**
   * Clears the '<code>peerIpAddress</code>' attribute.
   */
  void clear_peer_ip_address() {
    MutableStorage()->removeMember("peerIpAddress");
  }


  /**
   * Get the value of the '<code>peerIpAddress</code>' attribute.
   */
  const StringPiece get_peer_ip_address() const {
    const Json::Value& v = Storage("peerIpAddress");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>peerIpAddress</code>' attribute.
   *
   * IP address of the BGP interface outside Google cloud. Only IPv4 is
   * supported.
   *
   * @param[in] value The new value.
   */
  void set_peer_ip_address(const StringPiece& value) {
    *MutableStorage("peerIpAddress") = value.data();
  }

 private:
  void operator=(const RouterBgpPeer&);
};  // RouterBgpPeer
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_ROUTER_BGP_PEER_H_
