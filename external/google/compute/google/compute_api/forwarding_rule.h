// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_FORWARDING_RULE_H_
#define  GOOGLE_COMPUTE_API_FORWARDING_RULE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * A ForwardingRule resource. A ForwardingRule resource specifies which pool of
 * target virtual machines to forward a packet to if it matches the given
 * [IPAddress, IPProtocol, portRange] tuple.
 *
 * @ingroup DataObject
 */
class ForwardingRule : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ForwardingRule* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ForwardingRule(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ForwardingRule(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ForwardingRule();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::ForwardingRule</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::ForwardingRule");
  }

  /**
   * Determine if the '<code>IPAddress</code>' attribute was set.
   *
   * @return true if the '<code>IPAddress</code>' attribute was set.
   */
  bool has_ipa_ddress() const {
    return Storage().isMember("IPAddress");
  }

  /**
   * Clears the '<code>IPAddress</code>' attribute.
   */
  void clear_ipa_ddress() {
    MutableStorage()->removeMember("IPAddress");
  }


  /**
   * Get the value of the '<code>IPAddress</code>' attribute.
   */
  const StringPiece get_ipa_ddress() const {
    const Json::Value& v = Storage("IPAddress");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>IPAddress</code>' attribute.
   *
   * The IP address that this forwarding rule is serving on behalf of.
   *
   * For global forwarding rules, the address must be a global IP; for regional
   * forwarding rules, the address must live in the same region as the
   * forwarding rule. By default, this field is empty and an ephemeral IP from
   * the same scope (global or regional) will be assigned.
   *
   * When the load balancing scheme is INTERNAL, this can only be an RFC 1918 IP
   * address belonging to the network/subnetwork configured for the forwarding
   * rule. A reserved address cannot be used. If the field is empty, the IP
   * address will be automatically allocated from the internal IP range of the
   * subnetwork or network configured for this forwarding rule. Only IPv4 is
   * supported.
   *
   * @param[in] value The new value.
   */
  void set_ipa_ddress(const StringPiece& value) {
    *MutableStorage("IPAddress") = value.data();
  }

  /**
   * Determine if the '<code>IPProtocol</code>' attribute was set.
   *
   * @return true if the '<code>IPProtocol</code>' attribute was set.
   */
  bool has_ipp_rotocol() const {
    return Storage().isMember("IPProtocol");
  }

  /**
   * Clears the '<code>IPProtocol</code>' attribute.
   */
  void clear_ipp_rotocol() {
    MutableStorage()->removeMember("IPProtocol");
  }


  /**
   * Get the value of the '<code>IPProtocol</code>' attribute.
   */
  const StringPiece get_ipp_rotocol() const {
    const Json::Value& v = Storage("IPProtocol");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>IPProtocol</code>' attribute.
   *
   * The IP protocol to which this rule applies. Valid options are TCP, UDP,
   * ESP, AH, SCTP or ICMP.
   *
   * When the load balancing scheme is INTERNAL.
   *
   * @param[in] value The new value.
   */
  void set_ipp_rotocol(const StringPiece& value) {
    *MutableStorage("IPProtocol") = value.data();
  }

  /**
   * Determine if the '<code>backendService</code>' attribute was set.
   *
   * @return true if the '<code>backendService</code>' attribute was set.
   */
  bool has_backend_service() const {
    return Storage().isMember("backendService");
  }

  /**
   * Clears the '<code>backendService</code>' attribute.
   */
  void clear_backend_service() {
    MutableStorage()->removeMember("backendService");
  }


  /**
   * Get the value of the '<code>backendService</code>' attribute.
   */
  const StringPiece get_backend_service() const {
    const Json::Value& v = Storage("backendService");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>backendService</code>' attribute.
   *
   * This field is not used for external load balancing.
   *
   * For internal load balancing, this field identifies the BackendService
   * resource to receive the matched traffic.
   *
   * @param[in] value The new value.
   */
  void set_backend_service(const StringPiece& value) {
    *MutableStorage("backendService") = value.data();
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of the resource. Always compute#forwardingRule for
   * Forwarding Rule resources.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>loadBalancingScheme</code>' attribute was set.
   *
   * @return true if the '<code>loadBalancingScheme</code>' attribute was set.
   */
  bool has_load_balancing_scheme() const {
    return Storage().isMember("loadBalancingScheme");
  }

  /**
   * Clears the '<code>loadBalancingScheme</code>' attribute.
   */
  void clear_load_balancing_scheme() {
    MutableStorage()->removeMember("loadBalancingScheme");
  }


  /**
   * Get the value of the '<code>loadBalancingScheme</code>' attribute.
   */
  const StringPiece get_load_balancing_scheme() const {
    const Json::Value& v = Storage("loadBalancingScheme");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>loadBalancingScheme</code>' attribute.
   *
   * This signifies what the ForwardingRule will be used for and can only take
   * the following values: INTERNAL EXTERNAL The value of INTERNAL means that
   * this will be used for Internal Network Load Balancing (TCP, UDP). The value
   * of EXTERNAL means that this will be used for External Load Balancing
   * (HTTP(S) LB, External TCP/UDP LB, SSL Proxy).
   *
   * @param[in] value The new value.
   */
  void set_load_balancing_scheme(const StringPiece& value) {
    *MutableStorage("loadBalancingScheme") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of the resource; provided by the client when the resource is created.
   * The name must be 1-63 characters long, and comply with RFC1035.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must
   * be a lowercase letter, and all following characters must be a dash,
   * lowercase letter, or digit, except the last character, which cannot be a
   * dash.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>network</code>' attribute was set.
   *
   * @return true if the '<code>network</code>' attribute was set.
   */
  bool has_network() const {
    return Storage().isMember("network");
  }

  /**
   * Clears the '<code>network</code>' attribute.
   */
  void clear_network() {
    MutableStorage()->removeMember("network");
  }


  /**
   * Get the value of the '<code>network</code>' attribute.
   */
  const StringPiece get_network() const {
    const Json::Value& v = Storage("network");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>network</code>' attribute.
   *
   * This field is not used for external load balancing.
   *
   * For internal load balancing, this field identifies the network that the
   * load balanced IP should belong to for this Forwarding Rule. If this field
   * is not specified, the default network will be used.
   *
   * @param[in] value The new value.
   */
  void set_network(const StringPiece& value) {
    *MutableStorage("network") = value.data();
  }

  /**
   * Determine if the '<code>portRange</code>' attribute was set.
   *
   * @return true if the '<code>portRange</code>' attribute was set.
   */
  bool has_port_range() const {
    return Storage().isMember("portRange");
  }

  /**
   * Clears the '<code>portRange</code>' attribute.
   */
  void clear_port_range() {
    MutableStorage()->removeMember("portRange");
  }


  /**
   * Get the value of the '<code>portRange</code>' attribute.
   */
  const StringPiece get_port_range() const {
    const Json::Value& v = Storage("portRange");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>portRange</code>' attribute.
   *
   * Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
   * addressed to ports in the specified range will be forwarded to target.
   * Forwarding rules with the same [IPAddress, IPProtocol] pair must have
   * disjoint port ranges.
   *
   * This field is not used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_port_range(const StringPiece& value) {
    *MutableStorage("portRange") = value.data();
  }

  /**
   * Determine if the '<code>ports</code>' attribute was set.
   *
   * @return true if the '<code>ports</code>' attribute was set.
   */
  bool has_ports() const {
    return Storage().isMember("ports");
  }

  /**
   * Clears the '<code>ports</code>' attribute.
   */
  void clear_ports() {
    MutableStorage()->removeMember("ports");
  }


  /**
   * Get a reference to the value of the '<code>ports</code>' attribute.
   */
  const client::JsonCppArray<string > get_ports() const {
     const Json::Value& storage = Storage("ports");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>ports</code>' property.
   *
   * This field is not used for external load balancing.
   *
   * When the load balancing scheme is INTERNAL, a single port or a comma
   * separated list of ports can be configured. Only packets addressed to these
   * ports will be forwarded to the backends configured with this forwarding
   * rule. If the port list is not provided then all ports are allowed to pass
   * through.
   *
   * You may specify a maximum of up to 5 ports.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_ports() {
    Json::Value* storage = MutableStorage("ports");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>region</code>' attribute was set.
   *
   * @return true if the '<code>region</code>' attribute was set.
   */
  bool has_region() const {
    return Storage().isMember("region");
  }

  /**
   * Clears the '<code>region</code>' attribute.
   */
  void clear_region() {
    MutableStorage()->removeMember("region");
  }


  /**
   * Get the value of the '<code>region</code>' attribute.
   */
  const StringPiece get_region() const {
    const Json::Value& v = Storage("region");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>region</code>' attribute.
   *
   * [Output Only] URL of the region where the regional forwarding rule resides.
   * This field is not applicable to global forwarding rules.
   *
   * @param[in] value The new value.
   */
  void set_region(const StringPiece& value) {
    *MutableStorage("region") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>subnetwork</code>' attribute was set.
   *
   * @return true if the '<code>subnetwork</code>' attribute was set.
   */
  bool has_subnetwork() const {
    return Storage().isMember("subnetwork");
  }

  /**
   * Clears the '<code>subnetwork</code>' attribute.
   */
  void clear_subnetwork() {
    MutableStorage()->removeMember("subnetwork");
  }


  /**
   * Get the value of the '<code>subnetwork</code>' attribute.
   */
  const StringPiece get_subnetwork() const {
    const Json::Value& v = Storage("subnetwork");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>subnetwork</code>' attribute.
   *
   * This field is not used for external load balancing.
   *
   * For internal load balancing, this field identifies the subnetwork that the
   * load balanced IP should belong to for this Forwarding Rule.
   *
   * If the network specified is in auto subnet mode, this field is optional.
   * However, if the network is in custom subnet mode, a subnetwork must be
   * specified.
   *
   * @param[in] value The new value.
   */
  void set_subnetwork(const StringPiece& value) {
    *MutableStorage("subnetwork") = value.data();
  }

  /**
   * Determine if the '<code>target</code>' attribute was set.
   *
   * @return true if the '<code>target</code>' attribute was set.
   */
  bool has_target() const {
    return Storage().isMember("target");
  }

  /**
   * Clears the '<code>target</code>' attribute.
   */
  void clear_target() {
    MutableStorage()->removeMember("target");
  }


  /**
   * Get the value of the '<code>target</code>' attribute.
   */
  const StringPiece get_target() const {
    const Json::Value& v = Storage("target");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>target</code>' attribute.
   *
   * The URL of the target resource to receive the matched traffic. For regional
   * forwarding rules, this target must live in the same region as the
   * forwarding rule. For global forwarding rules, this target must be a global
   * TargetHttpProxy or TargetHttpsProxy resource. The forwarded traffic must be
   * of a type appropriate to the target object. For example, TargetHttpProxy
   * requires HTTP traffic, and TargetHttpsProxy requires HTTPS traffic.
   *
   * This field is not used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_target(const StringPiece& value) {
    *MutableStorage("target") = value.data();
  }

 private:
  void operator=(const ForwardingRule&);
};  // ForwardingRule
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_FORWARDING_RULE_H_
