// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_OPERATION_H_
#define  GOOGLE_COMPUTE_API_OPERATION_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * An Operation resource, used to manage asynchronous API requests.
 *
 * @ingroup DataObject
 */
class Operation : public client::JsonCppData {
 public:
  /**
   * [Output Only] If errors are generated during processing of the operation,
   * this field will be populated.
   *
   * @ingroup DataObject
   */
  class OperationError : public client::JsonCppData {
   public:
    /**
     * No description provided.
     *
     * @ingroup DataObject
     */
    class OperationErrorErrors : public client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static OperationErrorErrors* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit OperationErrorErrors(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit OperationErrorErrors(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~OperationErrorErrors();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return <code>google_compute_api::OperationErrorErrors</code>
       */
      const StringPiece GetTypeName() const {
        return StringPiece("google_compute_api::OperationErrorErrors");
      }

      /**
       * Determine if the '<code>code</code>' attribute was set.
       *
       * @return true if the '<code>code</code>' attribute was set.
       */
      bool has_code() const {
        return Storage().isMember("code");
      }

      /**
       * Clears the '<code>code</code>' attribute.
       */
      void clear_code() {
        MutableStorage()->removeMember("code");
      }


      /**
       * Get the value of the '<code>code</code>' attribute.
       */
      const StringPiece get_code() const {
        const Json::Value& v = Storage("code");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>code</code>' attribute.
       *
       * [Output Only] The error type identifier for this error.
       *
       * @param[in] value The new value.
       */
      void set_code(const StringPiece& value) {
        *MutableStorage("code") = value.data();
      }

      /**
       * Determine if the '<code>location</code>' attribute was set.
       *
       * @return true if the '<code>location</code>' attribute was set.
       */
      bool has_location() const {
        return Storage().isMember("location");
      }

      /**
       * Clears the '<code>location</code>' attribute.
       */
      void clear_location() {
        MutableStorage()->removeMember("location");
      }


      /**
       * Get the value of the '<code>location</code>' attribute.
       */
      const StringPiece get_location() const {
        const Json::Value& v = Storage("location");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>location</code>' attribute.
       *
       * [Output Only] Indicates the field in the request that caused the error.
       * This property is optional.
       *
       * @param[in] value The new value.
       */
      void set_location(const StringPiece& value) {
        *MutableStorage("location") = value.data();
      }

      /**
       * Determine if the '<code>message</code>' attribute was set.
       *
       * @return true if the '<code>message</code>' attribute was set.
       */
      bool has_message() const {
        return Storage().isMember("message");
      }

      /**
       * Clears the '<code>message</code>' attribute.
       */
      void clear_message() {
        MutableStorage()->removeMember("message");
      }


      /**
       * Get the value of the '<code>message</code>' attribute.
       */
      const StringPiece get_message() const {
        const Json::Value& v = Storage("message");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>message</code>' attribute.
       *
       * [Output Only] An optional, human-readable error message.
       *
       * @param[in] value The new value.
       */
      void set_message(const StringPiece& value) {
        *MutableStorage("message") = value.data();
      }

     private:
      void operator=(const OperationErrorErrors&);
    };  // OperationErrorErrors
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static OperationError* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit OperationError(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit OperationError(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~OperationError();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_compute_api::OperationError</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_compute_api::OperationError");
    }

    /**
     * Determine if the '<code>errors</code>' attribute was set.
     *
     * @return true if the '<code>errors</code>' attribute was set.
     */
    bool has_errors() const {
      return Storage().isMember("errors");
    }

    /**
     * Clears the '<code>errors</code>' attribute.
     */
    void clear_errors() {
      MutableStorage()->removeMember("errors");
    }


    /**
     * Get a reference to the value of the '<code>errors</code>' attribute.
     */
    const client::JsonCppArray<OperationErrorErrors > get_errors() const {
       const Json::Value& storage = Storage("errors");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<OperationErrorErrors > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>errors</code>'
     * property.
     *
     * [Output Only] The array of errors encountered while processing this
     * operation.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<OperationErrorErrors > mutable_errors() {
      Json::Value* storage = MutableStorage("errors");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<OperationErrorErrors > >(storage);
    }

   private:
    void operator=(const OperationError&);
  };  // OperationError
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class OperationWarnings : public client::JsonCppData {
   public:
    /**
     * No description provided.
     *
     * @ingroup DataObject
     */
    class OperationWarningsData : public client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static OperationWarningsData* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit OperationWarningsData(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit OperationWarningsData(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~OperationWarningsData();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return <code>google_compute_api::OperationWarningsData</code>
       */
      const StringPiece GetTypeName() const {
        return StringPiece("google_compute_api::OperationWarningsData");
      }

      /**
       * Determine if the '<code>key</code>' attribute was set.
       *
       * @return true if the '<code>key</code>' attribute was set.
       */
      bool has_key() const {
        return Storage().isMember("key");
      }

      /**
       * Clears the '<code>key</code>' attribute.
       */
      void clear_key() {
        MutableStorage()->removeMember("key");
      }


      /**
       * Get the value of the '<code>key</code>' attribute.
       */
      const StringPiece get_key() const {
        const Json::Value& v = Storage("key");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>key</code>' attribute.
       *
       * [Output Only] A key that provides more detail on the warning being
       * returned. For example, for warnings where there are no results in a
       * list request for a particular zone, this key might be scope and the key
       * value might be the zone name. Other examples might be a key indicating
       * a deprecated resource and a suggested replacement, or a warning about
       * invalid network settings (for example, if an instance attempts to
       * perform IP forwarding but is not enabled for IP forwarding).
       *
       * @param[in] value The new value.
       */
      void set_key(const StringPiece& value) {
        *MutableStorage("key") = value.data();
      }

      /**
       * Determine if the '<code>value</code>' attribute was set.
       *
       * @return true if the '<code>value</code>' attribute was set.
       */
      bool has_value() const {
        return Storage().isMember("value");
      }

      /**
       * Clears the '<code>value</code>' attribute.
       */
      void clear_value() {
        MutableStorage()->removeMember("value");
      }


      /**
       * Get the value of the '<code>value</code>' attribute.
       */
      const StringPiece get_value() const {
        const Json::Value& v = Storage("value");
        if (v == Json::Value::null) return StringPiece("");
        return StringPiece(v.asCString());
      }

      /**
       * Change the '<code>value</code>' attribute.
       *
       * [Output Only] A warning data value corresponding to the key.
       *
       * @param[in] value The new value.
       */
      void set_value(const StringPiece& value) {
        *MutableStorage("value") = value.data();
      }

     private:
      void operator=(const OperationWarningsData&);
    };  // OperationWarningsData
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static OperationWarnings* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit OperationWarnings(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit OperationWarnings(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~OperationWarnings();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_compute_api::OperationWarnings</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_compute_api::OperationWarnings");
    }

    /**
     * Determine if the '<code>code</code>' attribute was set.
     *
     * @return true if the '<code>code</code>' attribute was set.
     */
    bool has_code() const {
      return Storage().isMember("code");
    }

    /**
     * Clears the '<code>code</code>' attribute.
     */
    void clear_code() {
      MutableStorage()->removeMember("code");
    }


    /**
     * Get the value of the '<code>code</code>' attribute.
     */
    const StringPiece get_code() const {
      const Json::Value& v = Storage("code");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>code</code>' attribute.
     *
     * [Output Only] A warning code, if applicable. For example, Compute Engine
     * returns NO_RESULTS_ON_PAGE if there are no results in the response.
     *
     * @param[in] value The new value.
     */
    void set_code(const StringPiece& value) {
      *MutableStorage("code") = value.data();
    }

    /**
     * Determine if the '<code>data</code>' attribute was set.
     *
     * @return true if the '<code>data</code>' attribute was set.
     */
    bool has_data() const {
      return Storage().isMember("data");
    }

    /**
     * Clears the '<code>data</code>' attribute.
     */
    void clear_data() {
      MutableStorage()->removeMember("data");
    }


    /**
     * Get a reference to the value of the '<code>data</code>' attribute.
     */
    const client::JsonCppArray<OperationWarningsData > get_data() const {
       const Json::Value& storage = Storage("data");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<OperationWarningsData > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>data</code>' property.
     *
     * [Output Only] Metadata about this warning in key: value format. For
     * example:
     * "data": [ { "key": "scope", "value": "zones/us-east1-d" }.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<OperationWarningsData > mutable_data() {
      Json::Value* storage = MutableStorage("data");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<OperationWarningsData > >(storage);
    }

    /**
     * Determine if the '<code>message</code>' attribute was set.
     *
     * @return true if the '<code>message</code>' attribute was set.
     */
    bool has_message() const {
      return Storage().isMember("message");
    }

    /**
     * Clears the '<code>message</code>' attribute.
     */
    void clear_message() {
      MutableStorage()->removeMember("message");
    }


    /**
     * Get the value of the '<code>message</code>' attribute.
     */
    const StringPiece get_message() const {
      const Json::Value& v = Storage("message");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>message</code>' attribute.
     *
     * [Output Only] A human-readable description of the warning code.
     *
     * @param[in] value The new value.
     */
    void set_message(const StringPiece& value) {
      *MutableStorage("message") = value.data();
    }

   private:
    void operator=(const OperationWarnings&);
  };  // OperationWarnings
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Operation* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Operation(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Operation(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Operation();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::Operation</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::Operation");
  }

  /**
   * Determine if the '<code>clientOperationId</code>' attribute was set.
   *
   * @return true if the '<code>clientOperationId</code>' attribute was set.
   */
  bool has_client_operation_id() const {
    return Storage().isMember("clientOperationId");
  }

  /**
   * Clears the '<code>clientOperationId</code>' attribute.
   */
  void clear_client_operation_id() {
    MutableStorage()->removeMember("clientOperationId");
  }


  /**
   * Get the value of the '<code>clientOperationId</code>' attribute.
   */
  const StringPiece get_client_operation_id() const {
    const Json::Value& v = Storage("clientOperationId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>clientOperationId</code>' attribute.
   *
   * [Output Only] Reserved for future use.
   *
   * @param[in] value The new value.
   */
  void set_client_operation_id(const StringPiece& value) {
    *MutableStorage("clientOperationId") = value.data();
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * [Output Only] A textual description of the operation, which is set when the
   * operation is created.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>endTime</code>' attribute was set.
   *
   * @return true if the '<code>endTime</code>' attribute was set.
   */
  bool has_end_time() const {
    return Storage().isMember("endTime");
  }

  /**
   * Clears the '<code>endTime</code>' attribute.
   */
  void clear_end_time() {
    MutableStorage()->removeMember("endTime");
  }


  /**
   * Get the value of the '<code>endTime</code>' attribute.
   */
  const StringPiece get_end_time() const {
    const Json::Value& v = Storage("endTime");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>endTime</code>' attribute.
   *
   * [Output Only] The time that this operation was completed. This value is in
   * RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_end_time(const StringPiece& value) {
    *MutableStorage("endTime") = value.data();
  }

  /**
   * Determine if the '<code>error</code>' attribute was set.
   *
   * @return true if the '<code>error</code>' attribute was set.
   */
  bool has_error() const {
    return Storage().isMember("error");
  }

  /**
   * Clears the '<code>error</code>' attribute.
   */
  void clear_error() {
    MutableStorage()->removeMember("error");
  }


  /**
   * Get a reference to the value of the '<code>error</code>' attribute.
   */
  const OperationError get_error() const {
     const Json::Value& storage = Storage("error");
    return client::JsonValueToCppValueHelper<OperationError >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>error</code>' property.
   *
   * [Output Only] If errors are generated during processing of the operation,
   * this field will be populated.
   *
   * @return The result can be modified to change the attribute value.
   */
  OperationError mutable_error() {
    Json::Value* storage = MutableStorage("error");
    return client::JsonValueToMutableCppValueHelper<OperationError >(storage);
  }

  /**
   * Determine if the '<code>httpErrorMessage</code>' attribute was set.
   *
   * @return true if the '<code>httpErrorMessage</code>' attribute was set.
   */
  bool has_http_error_message() const {
    return Storage().isMember("httpErrorMessage");
  }

  /**
   * Clears the '<code>httpErrorMessage</code>' attribute.
   */
  void clear_http_error_message() {
    MutableStorage()->removeMember("httpErrorMessage");
  }


  /**
   * Get the value of the '<code>httpErrorMessage</code>' attribute.
   */
  const StringPiece get_http_error_message() const {
    const Json::Value& v = Storage("httpErrorMessage");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>httpErrorMessage</code>' attribute.
   *
   * [Output Only] If the operation fails, this field contains the HTTP error
   * message that was returned, such as NOT FOUND.
   *
   * @param[in] value The new value.
   */
  void set_http_error_message(const StringPiece& value) {
    *MutableStorage("httpErrorMessage") = value.data();
  }

  /**
   * Determine if the '<code>httpErrorStatusCode</code>' attribute was set.
   *
   * @return true if the '<code>httpErrorStatusCode</code>' attribute was set.
   */
  bool has_http_error_status_code() const {
    return Storage().isMember("httpErrorStatusCode");
  }

  /**
   * Clears the '<code>httpErrorStatusCode</code>' attribute.
   */
  void clear_http_error_status_code() {
    MutableStorage()->removeMember("httpErrorStatusCode");
  }


  /**
   * Get the value of the '<code>httpErrorStatusCode</code>' attribute.
   */
  int32 get_http_error_status_code() const {
    const Json::Value& storage = Storage("httpErrorStatusCode");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>httpErrorStatusCode</code>' attribute.
   *
   * [Output Only] If the operation fails, this field contains the HTTP error
   * status code that was returned. For example, a 404 means the resource was
   * not found.
   *
   * @param[in] value The new value.
   */
  void set_http_error_status_code(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("httpErrorStatusCode"));
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>insertTime</code>' attribute was set.
   *
   * @return true if the '<code>insertTime</code>' attribute was set.
   */
  bool has_insert_time() const {
    return Storage().isMember("insertTime");
  }

  /**
   * Clears the '<code>insertTime</code>' attribute.
   */
  void clear_insert_time() {
    MutableStorage()->removeMember("insertTime");
  }


  /**
   * Get the value of the '<code>insertTime</code>' attribute.
   */
  const StringPiece get_insert_time() const {
    const Json::Value& v = Storage("insertTime");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>insertTime</code>' attribute.
   *
   * [Output Only] The time that this operation was requested. This value is in
   * RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_insert_time(const StringPiece& value) {
    *MutableStorage("insertTime") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of the resource. Always compute#operation for Operation
   * resources.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * [Output Only] Name of the resource.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>operationType</code>' attribute was set.
   *
   * @return true if the '<code>operationType</code>' attribute was set.
   */
  bool has_operation_type() const {
    return Storage().isMember("operationType");
  }

  /**
   * Clears the '<code>operationType</code>' attribute.
   */
  void clear_operation_type() {
    MutableStorage()->removeMember("operationType");
  }


  /**
   * Get the value of the '<code>operationType</code>' attribute.
   */
  const StringPiece get_operation_type() const {
    const Json::Value& v = Storage("operationType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>operationType</code>' attribute.
   *
   * [Output Only] The type of operation, such as insert, update, or delete, and
   * so on.
   *
   * @param[in] value The new value.
   */
  void set_operation_type(const StringPiece& value) {
    *MutableStorage("operationType") = value.data();
  }

  /**
   * Determine if the '<code>progress</code>' attribute was set.
   *
   * @return true if the '<code>progress</code>' attribute was set.
   */
  bool has_progress() const {
    return Storage().isMember("progress");
  }

  /**
   * Clears the '<code>progress</code>' attribute.
   */
  void clear_progress() {
    MutableStorage()->removeMember("progress");
  }


  /**
   * Get the value of the '<code>progress</code>' attribute.
   */
  int32 get_progress() const {
    const Json::Value& storage = Storage("progress");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>progress</code>' attribute.
   *
   * [Output Only] An optional progress indicator that ranges from 0 to 100.
   * There is no requirement that this be linear or support any granularity of
   * operations. This should not be used to guess when the operation will be
   * complete. This number should monotonically increase as the operation
   * progresses.
   *
   * @param[in] value The new value.
   */
  void set_progress(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("progress"));
  }

  /**
   * Determine if the '<code>region</code>' attribute was set.
   *
   * @return true if the '<code>region</code>' attribute was set.
   */
  bool has_region() const {
    return Storage().isMember("region");
  }

  /**
   * Clears the '<code>region</code>' attribute.
   */
  void clear_region() {
    MutableStorage()->removeMember("region");
  }


  /**
   * Get the value of the '<code>region</code>' attribute.
   */
  const StringPiece get_region() const {
    const Json::Value& v = Storage("region");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>region</code>' attribute.
   *
   * [Output Only] The URL of the region where the operation resides. Only
   * available when performing regional operations.
   *
   * @param[in] value The new value.
   */
  void set_region(const StringPiece& value) {
    *MutableStorage("region") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>startTime</code>' attribute was set.
   *
   * @return true if the '<code>startTime</code>' attribute was set.
   */
  bool has_start_time() const {
    return Storage().isMember("startTime");
  }

  /**
   * Clears the '<code>startTime</code>' attribute.
   */
  void clear_start_time() {
    MutableStorage()->removeMember("startTime");
  }


  /**
   * Get the value of the '<code>startTime</code>' attribute.
   */
  const StringPiece get_start_time() const {
    const Json::Value& v = Storage("startTime");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>startTime</code>' attribute.
   *
   * [Output Only] The time that this operation was started by the server. This
   * value is in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_start_time(const StringPiece& value) {
    *MutableStorage("startTime") = value.data();
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * [Output Only] The status of the operation, which can be one of the
   * following: PENDING, RUNNING, or DONE.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>statusMessage</code>' attribute was set.
   *
   * @return true if the '<code>statusMessage</code>' attribute was set.
   */
  bool has_status_message() const {
    return Storage().isMember("statusMessage");
  }

  /**
   * Clears the '<code>statusMessage</code>' attribute.
   */
  void clear_status_message() {
    MutableStorage()->removeMember("statusMessage");
  }


  /**
   * Get the value of the '<code>statusMessage</code>' attribute.
   */
  const StringPiece get_status_message() const {
    const Json::Value& v = Storage("statusMessage");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>statusMessage</code>' attribute.
   *
   * [Output Only] An optional textual description of the current status of the
   * operation.
   *
   * @param[in] value The new value.
   */
  void set_status_message(const StringPiece& value) {
    *MutableStorage("statusMessage") = value.data();
  }

  /**
   * Determine if the '<code>targetId</code>' attribute was set.
   *
   * @return true if the '<code>targetId</code>' attribute was set.
   */
  bool has_target_id() const {
    return Storage().isMember("targetId");
  }

  /**
   * Clears the '<code>targetId</code>' attribute.
   */
  void clear_target_id() {
    MutableStorage()->removeMember("targetId");
  }


  /**
   * Get the value of the '<code>targetId</code>' attribute.
   */
  uint64 get_target_id() const {
    const Json::Value& storage = Storage("targetId");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>targetId</code>' attribute.
   *
   * [Output Only] The unique target ID, which identifies a specific incarnation
   * of the target resource.
   *
   * @param[in] value The new value.
   */
  void set_target_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("targetId"));
  }

  /**
   * Determine if the '<code>targetLink</code>' attribute was set.
   *
   * @return true if the '<code>targetLink</code>' attribute was set.
   */
  bool has_target_link() const {
    return Storage().isMember("targetLink");
  }

  /**
   * Clears the '<code>targetLink</code>' attribute.
   */
  void clear_target_link() {
    MutableStorage()->removeMember("targetLink");
  }


  /**
   * Get the value of the '<code>targetLink</code>' attribute.
   */
  const StringPiece get_target_link() const {
    const Json::Value& v = Storage("targetLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>targetLink</code>' attribute.
   *
   * [Output Only] The URL of the resource that the operation modifies. For
   * operations related to creating a snapshot, this points to the persistent
   * disk that the snapshot was created from.
   *
   * @param[in] value The new value.
   */
  void set_target_link(const StringPiece& value) {
    *MutableStorage("targetLink") = value.data();
  }

  /**
   * Determine if the '<code>user</code>' attribute was set.
   *
   * @return true if the '<code>user</code>' attribute was set.
   */
  bool has_user() const {
    return Storage().isMember("user");
  }

  /**
   * Clears the '<code>user</code>' attribute.
   */
  void clear_user() {
    MutableStorage()->removeMember("user");
  }


  /**
   * Get the value of the '<code>user</code>' attribute.
   */
  const StringPiece get_user() const {
    const Json::Value& v = Storage("user");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>user</code>' attribute.
   *
   * [Output Only] User who requested the operation, for example:
   * user@example.com.
   *
   * @param[in] value The new value.
   */
  void set_user(const StringPiece& value) {
    *MutableStorage("user") = value.data();
  }

  /**
   * Determine if the '<code>warnings</code>' attribute was set.
   *
   * @return true if the '<code>warnings</code>' attribute was set.
   */
  bool has_warnings() const {
    return Storage().isMember("warnings");
  }

  /**
   * Clears the '<code>warnings</code>' attribute.
   */
  void clear_warnings() {
    MutableStorage()->removeMember("warnings");
  }


  /**
   * Get a reference to the value of the '<code>warnings</code>' attribute.
   */
  const client::JsonCppArray<OperationWarnings > get_warnings() const {
     const Json::Value& storage = Storage("warnings");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<OperationWarnings > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>warnings</code>'
   * property.
   *
   * [Output Only] If warning messages are generated during processing of the
   * operation, this field will be populated.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<OperationWarnings > mutable_warnings() {
    Json::Value* storage = MutableStorage("warnings");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<OperationWarnings > >(storage);
  }

  /**
   * Determine if the '<code>zone</code>' attribute was set.
   *
   * @return true if the '<code>zone</code>' attribute was set.
   */
  bool has_zone() const {
    return Storage().isMember("zone");
  }

  /**
   * Clears the '<code>zone</code>' attribute.
   */
  void clear_zone() {
    MutableStorage()->removeMember("zone");
  }


  /**
   * Get the value of the '<code>zone</code>' attribute.
   */
  const StringPiece get_zone() const {
    const Json::Value& v = Storage("zone");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>zone</code>' attribute.
   *
   * [Output Only] The URL of the zone where the operation resides. Only
   * available when performing per-zone operations.
   *
   * @param[in] value The new value.
   */
  void set_zone(const StringPiece& value) {
    *MutableStorage("zone") = value.data();
  }

 private:
  void operator=(const Operation&);
};  // Operation
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_OPERATION_H_
