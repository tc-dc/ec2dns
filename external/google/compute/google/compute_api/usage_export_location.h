// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_USAGE_EXPORT_LOCATION_H_
#define  GOOGLE_COMPUTE_API_USAGE_EXPORT_LOCATION_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * The location in Cloud Storage and naming method of the daily usage report.
 * Contains bucket_name and report_name prefix.
 *
 * @ingroup DataObject
 */
class UsageExportLocation : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static UsageExportLocation* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UsageExportLocation(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UsageExportLocation(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~UsageExportLocation();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::UsageExportLocation</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::UsageExportLocation");
  }

  /**
   * Determine if the '<code>bucketName</code>' attribute was set.
   *
   * @return true if the '<code>bucketName</code>' attribute was set.
   */
  bool has_bucket_name() const {
    return Storage().isMember("bucketName");
  }

  /**
   * Clears the '<code>bucketName</code>' attribute.
   */
  void clear_bucket_name() {
    MutableStorage()->removeMember("bucketName");
  }


  /**
   * Get the value of the '<code>bucketName</code>' attribute.
   */
  const StringPiece get_bucket_name() const {
    const Json::Value& v = Storage("bucketName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bucketName</code>' attribute.
   *
   * The name of an existing bucket in Cloud Storage where the usage report
   * object is stored. The Google Service Account is granted write access to
   * this bucket. This can either be the bucket name by itself, such as example-
   * bucket, or the bucket name with gs:// or https://storage.googleapis.com/ in
   * front of it, such as gs://example-bucket.
   *
   * @param[in] value The new value.
   */
  void set_bucket_name(const StringPiece& value) {
    *MutableStorage("bucketName") = value.data();
  }

  /**
   * Determine if the '<code>reportNamePrefix</code>' attribute was set.
   *
   * @return true if the '<code>reportNamePrefix</code>' attribute was set.
   */
  bool has_report_name_prefix() const {
    return Storage().isMember("reportNamePrefix");
  }

  /**
   * Clears the '<code>reportNamePrefix</code>' attribute.
   */
  void clear_report_name_prefix() {
    MutableStorage()->removeMember("reportNamePrefix");
  }


  /**
   * Get the value of the '<code>reportNamePrefix</code>' attribute.
   */
  const StringPiece get_report_name_prefix() const {
    const Json::Value& v = Storage("reportNamePrefix");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>reportNamePrefix</code>' attribute.
   *
   * An optional prefix for the name of the usage report object stored in
   * bucketName. If not supplied, defaults to usage. The report is stored as a
   * CSV file named report_name_prefix_gce_YYYYMMDD.csv where YYYYMMDD is the
   * day of the usage according to Pacific Time. If you supply a prefix, it
   * should conform to Cloud Storage object naming conventions.
   *
   * @param[in] value The new value.
   */
  void set_report_name_prefix(const StringPiece& value) {
    *MutableStorage("reportNamePrefix") = value.data();
  }

 private:
  void operator=(const UsageExportLocation&);
};  // UsageExportLocation
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_USAGE_EXPORT_LOCATION_H_
