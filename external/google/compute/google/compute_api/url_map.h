// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_URL_MAP_H_
#define  GOOGLE_COMPUTE_API_URL_MAP_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/host_rule.h"
#include "google/compute_api/path_matcher.h"
#include "google/compute_api/url_map_test.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * A UrlMap resource. This resource defines the mapping from URL to the
 * BackendService resource, based on the "longest-match" of the URL's host and
 * path.
 *
 * @ingroup DataObject
 */
class UrlMap : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static UrlMap* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UrlMap(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UrlMap(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~UrlMap();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::UrlMap</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::UrlMap");
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>defaultService</code>' attribute was set.
   *
   * @return true if the '<code>defaultService</code>' attribute was set.
   */
  bool has_default_service() const {
    return Storage().isMember("defaultService");
  }

  /**
   * Clears the '<code>defaultService</code>' attribute.
   */
  void clear_default_service() {
    MutableStorage()->removeMember("defaultService");
  }


  /**
   * Get the value of the '<code>defaultService</code>' attribute.
   */
  const StringPiece get_default_service() const {
    const Json::Value& v = Storage("defaultService");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>defaultService</code>' attribute.
   *
   * The URL of the BackendService resource if none of the hostRules match.
   *
   * @param[in] value The new value.
   */
  void set_default_service(const StringPiece& value) {
    *MutableStorage("defaultService") = value.data();
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>fingerprint</code>' attribute was set.
   *
   * @return true if the '<code>fingerprint</code>' attribute was set.
   */
  bool has_fingerprint() const {
    return Storage().isMember("fingerprint");
  }

  /**
   * Clears the '<code>fingerprint</code>' attribute.
   */
  void clear_fingerprint() {
    MutableStorage()->removeMember("fingerprint");
  }


  /**
   * Get the value of the '<code>fingerprint</code>' attribute.
   */
  const StringPiece get_fingerprint() const {
    const Json::Value& v = Storage("fingerprint");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fingerprint</code>' attribute.
   *
   * Fingerprint of this resource. A hash of the contents stored in this object.
   * This field is used in optimistic locking. This field will be ignored when
   * inserting a UrlMap. An up-to-date fingerprint must be provided in order to
   * update the UrlMap.
   *
   * @param[in] value The new value.
   */
  void set_fingerprint(const StringPiece& value) {
    *MutableStorage("fingerprint") = value.data();
  }

  /**
   * Determine if the '<code>hostRules</code>' attribute was set.
   *
   * @return true if the '<code>hostRules</code>' attribute was set.
   */
  bool has_host_rules() const {
    return Storage().isMember("hostRules");
  }

  /**
   * Clears the '<code>hostRules</code>' attribute.
   */
  void clear_host_rules() {
    MutableStorage()->removeMember("hostRules");
  }


  /**
   * Get a reference to the value of the '<code>hostRules</code>' attribute.
   */
  const client::JsonCppArray<HostRule > get_host_rules() const;

  /**
   * Gets a reference to a mutable value of the '<code>hostRules</code>'
   * property.
   *
   * The list of HostRules to use against the URL.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<HostRule > mutable_hostRules();

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of the resource. Always compute#urlMaps for url maps.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of the resource. Provided by the client when the resource is created.
   * The name must be 1-63 characters long, and comply with RFC1035.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must
   * be a lowercase letter, and all following characters must be a dash,
   * lowercase letter, or digit, except the last character, which cannot be a
   * dash.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>pathMatchers</code>' attribute was set.
   *
   * @return true if the '<code>pathMatchers</code>' attribute was set.
   */
  bool has_path_matchers() const {
    return Storage().isMember("pathMatchers");
  }

  /**
   * Clears the '<code>pathMatchers</code>' attribute.
   */
  void clear_path_matchers() {
    MutableStorage()->removeMember("pathMatchers");
  }


  /**
   * Get a reference to the value of the '<code>pathMatchers</code>' attribute.
   */
  const client::JsonCppArray<PathMatcher > get_path_matchers() const;

  /**
   * Gets a reference to a mutable value of the '<code>pathMatchers</code>'
   * property.
   *
   * The list of named PathMatchers to use against the URL.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<PathMatcher > mutable_pathMatchers();

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>tests</code>' attribute was set.
   *
   * @return true if the '<code>tests</code>' attribute was set.
   */
  bool has_tests() const {
    return Storage().isMember("tests");
  }

  /**
   * Clears the '<code>tests</code>' attribute.
   */
  void clear_tests() {
    MutableStorage()->removeMember("tests");
  }


  /**
   * Get a reference to the value of the '<code>tests</code>' attribute.
   */
  const client::JsonCppArray<UrlMapTest > get_tests() const;

  /**
   * Gets a reference to a mutable value of the '<code>tests</code>' property.
   *
   * The list of expected URL mappings. Request to update this UrlMap will
   * succeed only if all of the test cases pass.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<UrlMapTest > mutable_tests();

 private:
  void operator=(const UrlMap&);
};  // UrlMap
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_URL_MAP_H_
