// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_IMAGE_H_
#define  GOOGLE_COMPUTE_API_IMAGE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/customer_encryption_key.h"
#include "google/compute_api/deprecation_status.h"
#include "google/compute_api/guest_os_feature.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * An Image resource.
 *
 * @ingroup DataObject
 */
class Image : public client::JsonCppData {
 public:
  /**
   * The parameters of the raw disk image.
   *
   * @ingroup DataObject
   */
  class ImageRawDisk : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ImageRawDisk* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ImageRawDisk(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ImageRawDisk(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ImageRawDisk();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_compute_api::ImageRawDisk</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_compute_api::ImageRawDisk");
    }

    /**
     * Determine if the '<code>containerType</code>' attribute was set.
     *
     * @return true if the '<code>containerType</code>' attribute was set.
     */
    bool has_container_type() const {
      return Storage().isMember("containerType");
    }

    /**
     * Clears the '<code>containerType</code>' attribute.
     */
    void clear_container_type() {
      MutableStorage()->removeMember("containerType");
    }


    /**
     * Get the value of the '<code>containerType</code>' attribute.
     */
    const StringPiece get_container_type() const {
      const Json::Value& v = Storage("containerType");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>containerType</code>' attribute.
     *
     * The format used to encode and transmit the block device, which should be
     * TAR. This is just a container and transmission format and not a runtime
     * format. Provided by the client when the disk image is created.
     *
     * @param[in] value The new value.
     */
    void set_container_type(const StringPiece& value) {
      *MutableStorage("containerType") = value.data();
    }

    /**
     * Determine if the '<code>sha1Checksum</code>' attribute was set.
     *
     * @return true if the '<code>sha1Checksum</code>' attribute was set.
     */
    bool has_sha1_checksum() const {
      return Storage().isMember("sha1Checksum");
    }

    /**
     * Clears the '<code>sha1Checksum</code>' attribute.
     */
    void clear_sha1_checksum() {
      MutableStorage()->removeMember("sha1Checksum");
    }


    /**
     * Get the value of the '<code>sha1Checksum</code>' attribute.
     */
    const StringPiece get_sha1_checksum() const {
      const Json::Value& v = Storage("sha1Checksum");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>sha1Checksum</code>' attribute.
     *
     * An optional SHA1 checksum of the disk image before unpackaging; provided
     * by the client when the disk image is created.
     *
     * @param[in] value The new value.
     */
    void set_sha1_checksum(const StringPiece& value) {
      *MutableStorage("sha1Checksum") = value.data();
    }

    /**
     * Determine if the '<code>source</code>' attribute was set.
     *
     * @return true if the '<code>source</code>' attribute was set.
     */
    bool has_source() const {
      return Storage().isMember("source");
    }

    /**
     * Clears the '<code>source</code>' attribute.
     */
    void clear_source() {
      MutableStorage()->removeMember("source");
    }


    /**
     * Get the value of the '<code>source</code>' attribute.
     */
    const StringPiece get_source() const {
      const Json::Value& v = Storage("source");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>source</code>' attribute.
     *
     * The full Google Cloud Storage URL where the disk image is stored. You
     * must provide either this property or the sourceDisk property but not
     * both.
     *
     * @param[in] value The new value.
     */
    void set_source(const StringPiece& value) {
      *MutableStorage("source") = value.data();
    }

   private:
    void operator=(const ImageRawDisk&);
  };  // ImageRawDisk
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Image* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Image(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Image(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Image();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::Image</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::Image");
  }

  /**
   * Determine if the '<code>archiveSizeBytes</code>' attribute was set.
   *
   * @return true if the '<code>archiveSizeBytes</code>' attribute was set.
   */
  bool has_archive_size_bytes() const {
    return Storage().isMember("archiveSizeBytes");
  }

  /**
   * Clears the '<code>archiveSizeBytes</code>' attribute.
   */
  void clear_archive_size_bytes() {
    MutableStorage()->removeMember("archiveSizeBytes");
  }


  /**
   * Get the value of the '<code>archiveSizeBytes</code>' attribute.
   */
  int64 get_archive_size_bytes() const {
    const Json::Value& storage = Storage("archiveSizeBytes");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>archiveSizeBytes</code>' attribute.
   *
   * Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).
   *
   * @param[in] value The new value.
   */
  void set_archive_size_bytes(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("archiveSizeBytes"));
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>deprecated</code>' attribute was set.
   *
   * @return true if the '<code>deprecated</code>' attribute was set.
   */
  bool has_deprecated() const {
    return Storage().isMember("deprecated");
  }

  /**
   * Clears the '<code>deprecated</code>' attribute.
   */
  void clear_deprecated() {
    MutableStorage()->removeMember("deprecated");
  }


  /**
   * Get a reference to the value of the '<code>deprecated</code>' attribute.
   */
  const DeprecationStatus get_deprecated() const;

  /**
   * Gets a reference to a mutable value of the '<code>deprecated</code>'
   * property.
   *
   * The deprecation status associated with this image.
   *
   * @return The result can be modified to change the attribute value.
   */
  DeprecationStatus mutable_deprecated();

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>diskSizeGb</code>' attribute was set.
   *
   * @return true if the '<code>diskSizeGb</code>' attribute was set.
   */
  bool has_disk_size_gb() const {
    return Storage().isMember("diskSizeGb");
  }

  /**
   * Clears the '<code>diskSizeGb</code>' attribute.
   */
  void clear_disk_size_gb() {
    MutableStorage()->removeMember("diskSizeGb");
  }


  /**
   * Get the value of the '<code>diskSizeGb</code>' attribute.
   */
  int64 get_disk_size_gb() const {
    const Json::Value& storage = Storage("diskSizeGb");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>diskSizeGb</code>' attribute.
   *
   * Size of the image when restored onto a persistent disk (in GB).
   *
   * @param[in] value The new value.
   */
  void set_disk_size_gb(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("diskSizeGb"));
  }

  /**
   * Determine if the '<code>family</code>' attribute was set.
   *
   * @return true if the '<code>family</code>' attribute was set.
   */
  bool has_family() const {
    return Storage().isMember("family");
  }

  /**
   * Clears the '<code>family</code>' attribute.
   */
  void clear_family() {
    MutableStorage()->removeMember("family");
  }


  /**
   * Get the value of the '<code>family</code>' attribute.
   */
  const StringPiece get_family() const {
    const Json::Value& v = Storage("family");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>family</code>' attribute.
   *
   * The name of the image family to which this image belongs. You can create
   * disks by specifying an image family instead of a specific image name. The
   * image family always returns its latest image that is not deprecated. The
   * name of the image family must comply with RFC1035.
   *
   * @param[in] value The new value.
   */
  void set_family(const StringPiece& value) {
    *MutableStorage("family") = value.data();
  }

  /**
   * Determine if the '<code>guestOsFeatures</code>' attribute was set.
   *
   * @return true if the '<code>guestOsFeatures</code>' attribute was set.
   */
  bool has_guest_os_features() const {
    return Storage().isMember("guestOsFeatures");
  }

  /**
   * Clears the '<code>guestOsFeatures</code>' attribute.
   */
  void clear_guest_os_features() {
    MutableStorage()->removeMember("guestOsFeatures");
  }


  /**
   * Get a reference to the value of the '<code>guestOsFeatures</code>'
   * attribute.
   */
  const client::JsonCppArray<GuestOsFeature > get_guest_os_features() const;

  /**
   * Gets a reference to a mutable value of the '<code>guestOsFeatures</code>'
   * property.
   *
   * A list of features to enable on the guest OS. Applicable for bootable
   * images only. Currently, only one feature can be enabled,
   * VIRTIO_SCSCI_MULTIQUEUE, which allows each virtual CPU to have its own
   * queue. For Windows images, you can only enable VIRTIO_SCSCI_MULTIQUEUE on
   * images with driver version 1.2.0.1621 or higher. Linux images with kernel
   * versions 3.17 and higher will support VIRTIO_SCSCI_MULTIQUEUE.
   *
   * For new Windows images, the server might also populate this field with the
   * value WINDOWS, to indicate that this is a Windows image. This value is
   * purely informational and does not enable or disable any features.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<GuestOsFeature > mutable_guestOsFeatures();

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>imageEncryptionKey</code>' attribute was set.
   *
   * @return true if the '<code>imageEncryptionKey</code>' attribute was set.
   */
  bool has_image_encryption_key() const {
    return Storage().isMember("imageEncryptionKey");
  }

  /**
   * Clears the '<code>imageEncryptionKey</code>' attribute.
   */
  void clear_image_encryption_key() {
    MutableStorage()->removeMember("imageEncryptionKey");
  }


  /**
   * Get a reference to the value of the '<code>imageEncryptionKey</code>'
   * attribute.
   */
  const CustomerEncryptionKey get_image_encryption_key() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>imageEncryptionKey</code>' property.
   *
   * Encrypts the image using a customer-supplied encryption key.
   *
   * After you encrypt an image with a customer-supplied key, you must provide
   * the same key if you use the image later (e.g. to create a disk from the
   * image).
   *
   * Customer-supplied encryption keys do not protect access to metadata of the
   * disk.
   *
   * If you do not provide an encryption key when creating the image, then the
   * disk will be encrypted using an automatically generated key and you do not
   * need to provide a key to use the image later.
   *
   * @return The result can be modified to change the attribute value.
   */
  CustomerEncryptionKey mutable_imageEncryptionKey();

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of the resource. Always compute#image for images.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>licenses</code>' attribute was set.
   *
   * @return true if the '<code>licenses</code>' attribute was set.
   */
  bool has_licenses() const {
    return Storage().isMember("licenses");
  }

  /**
   * Clears the '<code>licenses</code>' attribute.
   */
  void clear_licenses() {
    MutableStorage()->removeMember("licenses");
  }


  /**
   * Get a reference to the value of the '<code>licenses</code>' attribute.
   */
  const client::JsonCppArray<string > get_licenses() const {
     const Json::Value& storage = Storage("licenses");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>licenses</code>'
   * property.
   *
   * Any applicable license URI.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_licenses() {
    Json::Value* storage = MutableStorage("licenses");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of the resource; provided by the client when the resource is created.
   * The name must be 1-63 characters long, and comply with RFC1035.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must
   * be a lowercase letter, and all following characters must be a dash,
   * lowercase letter, or digit, except the last character, which cannot be a
   * dash.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>rawDisk</code>' attribute was set.
   *
   * @return true if the '<code>rawDisk</code>' attribute was set.
   */
  bool has_raw_disk() const {
    return Storage().isMember("rawDisk");
  }

  /**
   * Clears the '<code>rawDisk</code>' attribute.
   */
  void clear_raw_disk() {
    MutableStorage()->removeMember("rawDisk");
  }


  /**
   * Get a reference to the value of the '<code>rawDisk</code>' attribute.
   */
  const ImageRawDisk get_raw_disk() const {
     const Json::Value& storage = Storage("rawDisk");
    return client::JsonValueToCppValueHelper<ImageRawDisk >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>rawDisk</code>' property.
   *
   * The parameters of the raw disk image.
   *
   * @return The result can be modified to change the attribute value.
   */
  ImageRawDisk mutable_rawDisk() {
    Json::Value* storage = MutableStorage("rawDisk");
    return client::JsonValueToMutableCppValueHelper<ImageRawDisk >(storage);
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>sourceDisk</code>' attribute was set.
   *
   * @return true if the '<code>sourceDisk</code>' attribute was set.
   */
  bool has_source_disk() const {
    return Storage().isMember("sourceDisk");
  }

  /**
   * Clears the '<code>sourceDisk</code>' attribute.
   */
  void clear_source_disk() {
    MutableStorage()->removeMember("sourceDisk");
  }


  /**
   * Get the value of the '<code>sourceDisk</code>' attribute.
   */
  const StringPiece get_source_disk() const {
    const Json::Value& v = Storage("sourceDisk");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sourceDisk</code>' attribute.
   *
   * URL of the source disk used to create this image. This can be a full or
   * valid partial URL. You must provide either this property or the
   * rawDisk.source property but not both to create an image. For example, the
   * following are valid values:
   * - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/d
   * isk
   * - projects/project/zones/zone/disks/disk
   * - zones/zone/disks/disk.
   *
   * @param[in] value The new value.
   */
  void set_source_disk(const StringPiece& value) {
    *MutableStorage("sourceDisk") = value.data();
  }

  /**
   * Determine if the '<code>sourceDiskEncryptionKey</code>' attribute was set.
   *
   * @return true if the '<code>sourceDiskEncryptionKey</code>' attribute was
   * set.
   */
  bool has_source_disk_encryption_key() const {
    return Storage().isMember("sourceDiskEncryptionKey");
  }

  /**
   * Clears the '<code>sourceDiskEncryptionKey</code>' attribute.
   */
  void clear_source_disk_encryption_key() {
    MutableStorage()->removeMember("sourceDiskEncryptionKey");
  }


  /**
   * Get a reference to the value of the '<code>sourceDiskEncryptionKey</code>'
   * attribute.
   */
  const CustomerEncryptionKey get_source_disk_encryption_key() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>sourceDiskEncryptionKey</code>' property.
   *
   * The customer-supplied encryption key of the source disk. Required if the
   * source disk is protected by a customer-supplied encryption key.
   *
   * @return The result can be modified to change the attribute value.
   */
  CustomerEncryptionKey mutable_sourceDiskEncryptionKey();

  /**
   * Determine if the '<code>sourceDiskId</code>' attribute was set.
   *
   * @return true if the '<code>sourceDiskId</code>' attribute was set.
   */
  bool has_source_disk_id() const {
    return Storage().isMember("sourceDiskId");
  }

  /**
   * Clears the '<code>sourceDiskId</code>' attribute.
   */
  void clear_source_disk_id() {
    MutableStorage()->removeMember("sourceDiskId");
  }


  /**
   * Get the value of the '<code>sourceDiskId</code>' attribute.
   */
  const StringPiece get_source_disk_id() const {
    const Json::Value& v = Storage("sourceDiskId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sourceDiskId</code>' attribute.
   *
   * The ID value of the disk used to create this image. This value may be used
   * to determine whether the image was taken from the current or a previous
   * instance of a given disk name.
   *
   * @param[in] value The new value.
   */
  void set_source_disk_id(const StringPiece& value) {
    *MutableStorage("sourceDiskId") = value.data();
  }

  /**
   * Determine if the '<code>sourceType</code>' attribute was set.
   *
   * @return true if the '<code>sourceType</code>' attribute was set.
   */
  bool has_source_type() const {
    return Storage().isMember("sourceType");
  }

  /**
   * Clears the '<code>sourceType</code>' attribute.
   */
  void clear_source_type() {
    MutableStorage()->removeMember("sourceType");
  }


  /**
   * Get the value of the '<code>sourceType</code>' attribute.
   */
  const StringPiece get_source_type() const {
    const Json::Value& v = Storage("sourceType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sourceType</code>' attribute.
   *
   * The type of the image used to create this disk. The default and only value
   * is RAW.
   *
   * @param[in] value The new value.
   */
  void set_source_type(const StringPiece& value) {
    *MutableStorage("sourceType") = value.data();
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * [Output Only] The status of the image. An image can be used to create other
   * resources, such as instances, only after the image has been successfully
   * created and the status is set to READY. Possible values are FAILED,
   * PENDING, or READY.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

 private:
  void operator=(const Image&);
};  // Image
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_IMAGE_H_
