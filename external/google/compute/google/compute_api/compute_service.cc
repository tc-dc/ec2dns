// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/compute_api/compute_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"

#include "google/compute_api/access_config.h"
#include "google/compute_api/address.h"
#include "google/compute_api/address_aggregated_list.h"
#include "google/compute_api/address_list.h"
#include "google/compute_api/attached_disk.h"
#include "google/compute_api/autoscaler.h"
#include "google/compute_api/autoscaler_aggregated_list.h"
#include "google/compute_api/autoscaler_list.h"
#include "google/compute_api/backend_service.h"
#include "google/compute_api/backend_service_aggregated_list.h"
#include "google/compute_api/backend_service_group_health.h"
#include "google/compute_api/backend_service_list.h"
#include "google/compute_api/cache_invalidation_rule.h"
#include "google/compute_api/deprecation_status.h"
#include "google/compute_api/disk.h"
#include "google/compute_api/disk_aggregated_list.h"
#include "google/compute_api/disk_list.h"
#include "google/compute_api/disk_move_request.h"
#include "google/compute_api/disk_type.h"
#include "google/compute_api/disk_type_aggregated_list.h"
#include "google/compute_api/disk_type_list.h"
#include "google/compute_api/disks_resize_request.h"
#include "google/compute_api/firewall.h"
#include "google/compute_api/firewall_list.h"
#include "google/compute_api/forwarding_rule.h"
#include "google/compute_api/forwarding_rule_aggregated_list.h"
#include "google/compute_api/forwarding_rule_list.h"
#include "google/compute_api/health_check.h"
#include "google/compute_api/health_check_list.h"
#include "google/compute_api/http_health_check.h"
#include "google/compute_api/http_health_check_list.h"
#include "google/compute_api/https_health_check.h"
#include "google/compute_api/https_health_check_list.h"
#include "google/compute_api/image.h"
#include "google/compute_api/image_list.h"
#include "google/compute_api/instance.h"
#include "google/compute_api/instance_aggregated_list.h"
#include "google/compute_api/instance_group.h"
#include "google/compute_api/instance_group_aggregated_list.h"
#include "google/compute_api/instance_group_list.h"
#include "google/compute_api/instance_group_manager.h"
#include "google/compute_api/instance_group_manager_aggregated_list.h"
#include "google/compute_api/instance_group_manager_list.h"
#include "google/compute_api/instance_group_managers_abandon_instances_request.h"
#include "google/compute_api/instance_group_managers_delete_instances_request.h"
#include "google/compute_api/instance_group_managers_list_managed_instances_response.h"
#include "google/compute_api/instance_group_managers_recreate_instances_request.h"
#include "google/compute_api/instance_group_managers_set_instance_template_request.h"
#include "google/compute_api/instance_group_managers_set_target_pools_request.h"
#include "google/compute_api/instance_groups_add_instances_request.h"
#include "google/compute_api/instance_groups_list_instances.h"
#include "google/compute_api/instance_groups_list_instances_request.h"
#include "google/compute_api/instance_groups_remove_instances_request.h"
#include "google/compute_api/instance_groups_set_named_ports_request.h"
#include "google/compute_api/instance_list.h"
#include "google/compute_api/instance_move_request.h"
#include "google/compute_api/instance_reference.h"
#include "google/compute_api/instance_template.h"
#include "google/compute_api/instance_template_list.h"
#include "google/compute_api/instances_set_machine_type_request.h"
#include "google/compute_api/instances_set_service_account_request.h"
#include "google/compute_api/instances_start_with_encryption_key_request.h"
#include "google/compute_api/license.h"
#include "google/compute_api/machine_type.h"
#include "google/compute_api/machine_type_aggregated_list.h"
#include "google/compute_api/machine_type_list.h"
#include "google/compute_api/metadata.h"
#include "google/compute_api/network.h"
#include "google/compute_api/network_list.h"
#include "google/compute_api/operation.h"
#include "google/compute_api/operation_aggregated_list.h"
#include "google/compute_api/operation_list.h"
#include "google/compute_api/project.h"
#include "google/compute_api/region.h"
#include "google/compute_api/region_autoscaler_list.h"
#include "google/compute_api/region_instance_group_list.h"
#include "google/compute_api/region_instance_group_manager_list.h"
#include "google/compute_api/region_instance_group_managers_abandon_instances_request.h"
#include "google/compute_api/region_instance_group_managers_delete_instances_request.h"
#include "google/compute_api/region_instance_group_managers_list_instances_response.h"
#include "google/compute_api/region_instance_group_managers_recreate_request.h"
#include "google/compute_api/region_instance_group_managers_set_target_pools_request.h"
#include "google/compute_api/region_instance_group_managers_set_template_request.h"
#include "google/compute_api/region_instance_groups_list_instances.h"
#include "google/compute_api/region_instance_groups_list_instances_request.h"
#include "google/compute_api/region_instance_groups_set_named_ports_request.h"
#include "google/compute_api/region_list.h"
#include "google/compute_api/resource_group_reference.h"
#include "google/compute_api/route.h"
#include "google/compute_api/route_list.h"
#include "google/compute_api/router.h"
#include "google/compute_api/router_aggregated_list.h"
#include "google/compute_api/router_list.h"
#include "google/compute_api/router_status_response.h"
#include "google/compute_api/routers_preview_response.h"
#include "google/compute_api/scheduling.h"
#include "google/compute_api/serial_port_output.h"
#include "google/compute_api/snapshot.h"
#include "google/compute_api/snapshot_list.h"
#include "google/compute_api/ssl_certificate.h"
#include "google/compute_api/ssl_certificate_list.h"
#include "google/compute_api/subnetwork.h"
#include "google/compute_api/subnetwork_aggregated_list.h"
#include "google/compute_api/subnetwork_list.h"
#include "google/compute_api/subnetworks_expand_ip_cidr_range_request.h"
#include "google/compute_api/tags.h"
#include "google/compute_api/target_http_proxy.h"
#include "google/compute_api/target_http_proxy_list.h"
#include "google/compute_api/target_https_proxies_set_ssl_certificates_request.h"
#include "google/compute_api/target_https_proxy.h"
#include "google/compute_api/target_https_proxy_list.h"
#include "google/compute_api/target_instance.h"
#include "google/compute_api/target_instance_aggregated_list.h"
#include "google/compute_api/target_instance_list.h"
#include "google/compute_api/target_pool.h"
#include "google/compute_api/target_pool_aggregated_list.h"
#include "google/compute_api/target_pool_instance_health.h"
#include "google/compute_api/target_pool_list.h"
#include "google/compute_api/target_pools_add_health_check_request.h"
#include "google/compute_api/target_pools_add_instance_request.h"
#include "google/compute_api/target_pools_remove_health_check_request.h"
#include "google/compute_api/target_pools_remove_instance_request.h"
#include "google/compute_api/target_reference.h"
#include "google/compute_api/target_ssl_proxies_set_backend_service_request.h"
#include "google/compute_api/target_ssl_proxies_set_proxy_header_request.h"
#include "google/compute_api/target_ssl_proxies_set_ssl_certificates_request.h"
#include "google/compute_api/target_ssl_proxy.h"
#include "google/compute_api/target_ssl_proxy_list.h"
#include "google/compute_api/target_vpn_gateway.h"
#include "google/compute_api/target_vpn_gateway_aggregated_list.h"
#include "google/compute_api/target_vpn_gateway_list.h"
#include "google/compute_api/url_map.h"
#include "google/compute_api/url_map_list.h"
#include "google/compute_api/url_map_reference.h"
#include "google/compute_api/url_maps_validate_request.h"
#include "google/compute_api/url_maps_validate_response.h"
#include "google/compute_api/usage_export_location.h"
#include "google/compute_api/vpn_tunnel.h"
#include "google/compute_api/vpn_tunnel_aggregated_list.h"
#include "google/compute_api/vpn_tunnel_list.h"
#include "google/compute_api/zone.h"
#include "google/compute_api/zone_list.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "googleapis/strings/strcat.h"

namespace google_compute_api {
using namespace googleapis;
const char ComputeService::googleapis_API_NAME[] = {"compute"};

const char ComputeService::googleapis_API_VERSION[] = {"v1"};

const char ComputeService::googleapis_API_GENERATOR[] = {
  "google-apis-code-generator 1.5.1 / 0.1.4"};


const char ComputeService::SCOPES::CLOUD_PLATFORM[] = {"https://www.googleapis.com/auth/cloud-platform"};

const char ComputeService::SCOPES::COMPUTE[] = {"https://www.googleapis.com/auth/compute"};

const char ComputeService::SCOPES::COMPUTE_READONLY[] = {"https://www.googleapis.com/auth/compute.readonly"};

const char ComputeService::SCOPES::DEVSTORAGE_FULL_CONTROL[] = {"https://www.googleapis.com/auth/devstorage.full_control"};

const char ComputeService::SCOPES::DEVSTORAGE_READ_ONLY[] = {"https://www.googleapis.com/auth/devstorage.read_only"};

const char ComputeService::SCOPES::DEVSTORAGE_READ_WRITE[] = {"https://www.googleapis.com/auth/devstorage.read_write"};
ComputeServiceBaseRequest::ComputeServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      pretty_print_(true),
      _have_alt_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauth_token_(false),
      _have_pretty_print_(false),
      _have_quota_user_(false),
      _have_user_ip_(false) {
}

ComputeServiceBaseRequest::~ComputeServiceBaseRequest() {
}

util::Status ComputeServiceBaseRequest::AppendVariable(
    const StringPiece& variable_name,
    const client::UriTemplateConfig& config,
    string* target) {
  return client::StatusInvalidArgument(
      StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status ComputeServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_fields_) {
    StrAppend(target, sep, "fields=",
              client::CppValueToEscapedUrlValue(
                fields_));
    sep = "&";
  }
  if (_have_key_) {
    StrAppend(target, sep, "key=",
              client::CppValueToEscapedUrlValue(
                key_));
    sep = "&";
  }
  if (_have_oauth_token_) {
    StrAppend(target, sep, "oauth_token=",
              client::CppValueToEscapedUrlValue(
                oauth_token_));
    sep = "&";
  }
  if (_have_pretty_print_) {
    StrAppend(target, sep, "prettyPrint=",
              client::CppValueToEscapedUrlValue(
                pretty_print_));
    sep = "&";
  }
  if (_have_quota_user_) {
    StrAppend(target, sep, "quotaUser=",
              client::CppValueToEscapedUrlValue(
                quota_user_));
    sep = "&";
  }
  if (_have_user_ip_) {
    StrAppend(target, sep, "userIp=",
              client::CppValueToEscapedUrlValue(
                user_ip_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


void ComputeServiceBaseRequest::AddJsonContentToRequest(
    const client::JsonCppData *content) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
        client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(content->MakeJsonReader());
}



// Standard constructor.
AddressesResource_AggregatedListMethod::AddressesResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/addresses"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
AddressesResource_AggregatedListMethod::~AddressesResource_AggregatedListMethod() {
}

util::Status AddressesResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status AddressesResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AddressesResource_DeleteMethod::AddressesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& address)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/addresses/{address}"),
      project_(project.as_string()),
      region_(region.as_string()),
      address_(address.as_string()) {
}

// Standard destructor.
AddressesResource_DeleteMethod::~AddressesResource_DeleteMethod() {
}


util::Status AddressesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "address") {
    client::UriTemplate::AppendValue(
        address_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AddressesResource_GetMethod::AddressesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& address)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/addresses/{address}"),
      project_(project.as_string()),
      region_(region.as_string()),
      address_(address.as_string()) {
}

// Standard destructor.
AddressesResource_GetMethod::~AddressesResource_GetMethod() {
}


util::Status AddressesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "address") {
    client::UriTemplate::AppendValue(
        address_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AddressesResource_InsertMethod::AddressesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Address& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/addresses"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
AddressesResource_InsertMethod::~AddressesResource_InsertMethod() {
}


util::Status AddressesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AddressesResource_ListMethod::AddressesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/addresses"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
AddressesResource_ListMethod::~AddressesResource_ListMethod() {
}

util::Status AddressesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status AddressesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AutoscalersResource_AggregatedListMethod::AutoscalersResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/autoscalers"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
AutoscalersResource_AggregatedListMethod::~AutoscalersResource_AggregatedListMethod() {
}

util::Status AutoscalersResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status AutoscalersResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AutoscalersResource_DeleteMethod::AutoscalersResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& autoscaler)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/zones/{zone}/autoscalers/{autoscaler}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      autoscaler_(autoscaler.as_string()) {
}

// Standard destructor.
AutoscalersResource_DeleteMethod::~AutoscalersResource_DeleteMethod() {
}


util::Status AutoscalersResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "autoscaler") {
    client::UriTemplate::AppendValue(
        autoscaler_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AutoscalersResource_GetMethod::AutoscalersResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& autoscaler)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/autoscalers/{autoscaler}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      autoscaler_(autoscaler.as_string()) {
}

// Standard destructor.
AutoscalersResource_GetMethod::~AutoscalersResource_GetMethod() {
}


util::Status AutoscalersResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "autoscaler") {
    client::UriTemplate::AppendValue(
        autoscaler_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AutoscalersResource_InsertMethod::AutoscalersResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const Autoscaler& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/autoscalers"),
      project_(project.as_string()),
      zone_(zone.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
AutoscalersResource_InsertMethod::~AutoscalersResource_InsertMethod() {
}


util::Status AutoscalersResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AutoscalersResource_ListMethod::AutoscalersResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/autoscalers"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
AutoscalersResource_ListMethod::~AutoscalersResource_ListMethod() {
}

util::Status AutoscalersResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status AutoscalersResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AutoscalersResource_PatchMethod::AutoscalersResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& autoscaler, const Autoscaler& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/zones/{zone}/autoscalers"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      autoscaler_(autoscaler.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
AutoscalersResource_PatchMethod::~AutoscalersResource_PatchMethod() {
}

util::Status AutoscalersResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "autoscaler=",
              client::CppValueToEscapedUrlValue(
                autoscaler_));
    sep = "&";
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status AutoscalersResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
AutoscalersResource_UpdateMethod::AutoscalersResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const Autoscaler& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/zones/{zone}/autoscalers"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      _have_autoscaler_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
AutoscalersResource_UpdateMethod::~AutoscalersResource_UpdateMethod() {
}

util::Status AutoscalersResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_autoscaler_) {
    StrAppend(target, sep, "autoscaler=",
              client::CppValueToEscapedUrlValue(
                autoscaler_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status AutoscalersResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
BackendServicesResource_AggregatedListMethod::BackendServicesResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/backendServices"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
BackendServicesResource_AggregatedListMethod::~BackendServicesResource_AggregatedListMethod() {
}

util::Status BackendServicesResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status BackendServicesResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
BackendServicesResource_DeleteMethod::BackendServicesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/backendServices/{backendService}"),
      project_(project.as_string()),
      backend_service_(backend_service.as_string()) {
}

// Standard destructor.
BackendServicesResource_DeleteMethod::~BackendServicesResource_DeleteMethod() {
}


util::Status BackendServicesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
BackendServicesResource_GetMethod::BackendServicesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/backendServices/{backendService}"),
      project_(project.as_string()),
      backend_service_(backend_service.as_string()) {
}

// Standard destructor.
BackendServicesResource_GetMethod::~BackendServicesResource_GetMethod() {
}


util::Status BackendServicesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
BackendServicesResource_GetHealthMethod::BackendServicesResource_GetHealthMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service, const ResourceGroupReference& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/backendServices/{backendService}/getHealth"),
      project_(project.as_string()),
      backend_service_(backend_service.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
BackendServicesResource_GetHealthMethod::~BackendServicesResource_GetHealthMethod() {
}


util::Status BackendServicesResource_GetHealthMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
BackendServicesResource_InsertMethod::BackendServicesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const BackendService& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/backendServices"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
BackendServicesResource_InsertMethod::~BackendServicesResource_InsertMethod() {
}


util::Status BackendServicesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
BackendServicesResource_ListMethod::BackendServicesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/backendServices"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
BackendServicesResource_ListMethod::~BackendServicesResource_ListMethod() {
}

util::Status BackendServicesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status BackendServicesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
BackendServicesResource_PatchMethod::BackendServicesResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service, const BackendService& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/global/backendServices/{backendService}"),
      project_(project.as_string()),
      backend_service_(backend_service.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
BackendServicesResource_PatchMethod::~BackendServicesResource_PatchMethod() {
}


util::Status BackendServicesResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
BackendServicesResource_UpdateMethod::BackendServicesResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service, const BackendService& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/global/backendServices/{backendService}"),
      project_(project.as_string()),
      backend_service_(backend_service.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
BackendServicesResource_UpdateMethod::~BackendServicesResource_UpdateMethod() {
}


util::Status BackendServicesResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DiskTypesResource_AggregatedListMethod::DiskTypesResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/diskTypes"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
DiskTypesResource_AggregatedListMethod::~DiskTypesResource_AggregatedListMethod() {
}

util::Status DiskTypesResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DiskTypesResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DiskTypesResource_GetMethod::DiskTypesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk_type)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/diskTypes/{diskType}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      disk_type_(disk_type.as_string()) {
}

// Standard destructor.
DiskTypesResource_GetMethod::~DiskTypesResource_GetMethod() {
}


util::Status DiskTypesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "diskType") {
    client::UriTemplate::AppendValue(
        disk_type_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DiskTypesResource_ListMethod::DiskTypesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/diskTypes"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
DiskTypesResource_ListMethod::~DiskTypesResource_ListMethod() {
}

util::Status DiskTypesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DiskTypesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DisksResource_AggregatedListMethod::DisksResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/disks"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
DisksResource_AggregatedListMethod::~DisksResource_AggregatedListMethod() {
}

util::Status DisksResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DisksResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DisksResource_CreateSnapshotMethod::DisksResource_CreateSnapshotMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk, const Snapshot& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/disks/{disk}/createSnapshot"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      disk_(disk.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
DisksResource_CreateSnapshotMethod::~DisksResource_CreateSnapshotMethod() {
}


util::Status DisksResource_CreateSnapshotMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "disk") {
    client::UriTemplate::AppendValue(
        disk_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DisksResource_DeleteMethod::DisksResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/zones/{zone}/disks/{disk}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      disk_(disk.as_string()) {
}

// Standard destructor.
DisksResource_DeleteMethod::~DisksResource_DeleteMethod() {
}


util::Status DisksResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "disk") {
    client::UriTemplate::AppendValue(
        disk_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DisksResource_GetMethod::DisksResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/disks/{disk}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      disk_(disk.as_string()) {
}

// Standard destructor.
DisksResource_GetMethod::~DisksResource_GetMethod() {
}


util::Status DisksResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "disk") {
    client::UriTemplate::AppendValue(
        disk_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DisksResource_InsertMethod::DisksResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const Disk& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/disks"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      _have_source_image_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
DisksResource_InsertMethod::~DisksResource_InsertMethod() {
}

util::Status DisksResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_source_image_) {
    StrAppend(target, sep, "sourceImage=",
              client::CppValueToEscapedUrlValue(
                source_image_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DisksResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DisksResource_ListMethod::DisksResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/disks"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
DisksResource_ListMethod::~DisksResource_ListMethod() {
}

util::Status DisksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DisksResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DisksResource_ResizeMethod::DisksResource_ResizeMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk, const DisksResizeRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/disks/{disk}/resize"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      disk_(disk.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
DisksResource_ResizeMethod::~DisksResource_ResizeMethod() {
}


util::Status DisksResource_ResizeMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "disk") {
    client::UriTemplate::AppendValue(
        disk_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FirewallsResource_DeleteMethod::FirewallsResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& firewall)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/firewalls/{firewall}"),
      project_(project.as_string()),
      firewall_(firewall.as_string()) {
}

// Standard destructor.
FirewallsResource_DeleteMethod::~FirewallsResource_DeleteMethod() {
}


util::Status FirewallsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "firewall") {
    client::UriTemplate::AppendValue(
        firewall_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FirewallsResource_GetMethod::FirewallsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& firewall)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/firewalls/{firewall}"),
      project_(project.as_string()),
      firewall_(firewall.as_string()) {
}

// Standard destructor.
FirewallsResource_GetMethod::~FirewallsResource_GetMethod() {
}


util::Status FirewallsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "firewall") {
    client::UriTemplate::AppendValue(
        firewall_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FirewallsResource_InsertMethod::FirewallsResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const Firewall& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/firewalls"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
FirewallsResource_InsertMethod::~FirewallsResource_InsertMethod() {
}


util::Status FirewallsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FirewallsResource_ListMethod::FirewallsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/firewalls"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
FirewallsResource_ListMethod::~FirewallsResource_ListMethod() {
}

util::Status FirewallsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FirewallsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FirewallsResource_PatchMethod::FirewallsResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& firewall, const Firewall& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/global/firewalls/{firewall}"),
      project_(project.as_string()),
      firewall_(firewall.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
FirewallsResource_PatchMethod::~FirewallsResource_PatchMethod() {
}


util::Status FirewallsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "firewall") {
    client::UriTemplate::AppendValue(
        firewall_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FirewallsResource_UpdateMethod::FirewallsResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& firewall, const Firewall& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/global/firewalls/{firewall}"),
      project_(project.as_string()),
      firewall_(firewall.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
FirewallsResource_UpdateMethod::~FirewallsResource_UpdateMethod() {
}


util::Status FirewallsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "firewall") {
    client::UriTemplate::AppendValue(
        firewall_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ForwardingRulesResource_AggregatedListMethod::ForwardingRulesResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/forwardingRules"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
ForwardingRulesResource_AggregatedListMethod::~ForwardingRulesResource_AggregatedListMethod() {
}

util::Status ForwardingRulesResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ForwardingRulesResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ForwardingRulesResource_DeleteMethod::ForwardingRulesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& forwarding_rule)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/forwardingRules/{forwardingRule}"),
      project_(project.as_string()),
      region_(region.as_string()),
      forwarding_rule_(forwarding_rule.as_string()) {
}

// Standard destructor.
ForwardingRulesResource_DeleteMethod::~ForwardingRulesResource_DeleteMethod() {
}


util::Status ForwardingRulesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "forwardingRule") {
    client::UriTemplate::AppendValue(
        forwarding_rule_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ForwardingRulesResource_GetMethod::ForwardingRulesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& forwarding_rule)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/forwardingRules/{forwardingRule}"),
      project_(project.as_string()),
      region_(region.as_string()),
      forwarding_rule_(forwarding_rule.as_string()) {
}

// Standard destructor.
ForwardingRulesResource_GetMethod::~ForwardingRulesResource_GetMethod() {
}


util::Status ForwardingRulesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "forwardingRule") {
    client::UriTemplate::AppendValue(
        forwarding_rule_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ForwardingRulesResource_InsertMethod::ForwardingRulesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const ForwardingRule& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/forwardingRules"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ForwardingRulesResource_InsertMethod::~ForwardingRulesResource_InsertMethod() {
}


util::Status ForwardingRulesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ForwardingRulesResource_ListMethod::ForwardingRulesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/forwardingRules"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
ForwardingRulesResource_ListMethod::~ForwardingRulesResource_ListMethod() {
}

util::Status ForwardingRulesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ForwardingRulesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ForwardingRulesResource_SetTargetMethod::ForwardingRulesResource_SetTargetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& forwarding_rule, const TargetReference& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget"),
      project_(project.as_string()),
      region_(region.as_string()),
      forwarding_rule_(forwarding_rule.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ForwardingRulesResource_SetTargetMethod::~ForwardingRulesResource_SetTargetMethod() {
}


util::Status ForwardingRulesResource_SetTargetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "forwardingRule") {
    client::UriTemplate::AppendValue(
        forwarding_rule_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalAddressesResource_DeleteMethod::GlobalAddressesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& address)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/addresses/{address}"),
      project_(project.as_string()),
      address_(address.as_string()) {
}

// Standard destructor.
GlobalAddressesResource_DeleteMethod::~GlobalAddressesResource_DeleteMethod() {
}


util::Status GlobalAddressesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "address") {
    client::UriTemplate::AppendValue(
        address_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalAddressesResource_GetMethod::GlobalAddressesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& address)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/addresses/{address}"),
      project_(project.as_string()),
      address_(address.as_string()) {
}

// Standard destructor.
GlobalAddressesResource_GetMethod::~GlobalAddressesResource_GetMethod() {
}


util::Status GlobalAddressesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "address") {
    client::UriTemplate::AppendValue(
        address_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalAddressesResource_InsertMethod::GlobalAddressesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const Address& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/addresses"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
GlobalAddressesResource_InsertMethod::~GlobalAddressesResource_InsertMethod() {
}


util::Status GlobalAddressesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalAddressesResource_ListMethod::GlobalAddressesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/addresses"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
GlobalAddressesResource_ListMethod::~GlobalAddressesResource_ListMethod() {
}

util::Status GlobalAddressesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status GlobalAddressesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalForwardingRulesResource_DeleteMethod::GlobalForwardingRulesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& forwarding_rule)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/forwardingRules/{forwardingRule}"),
      project_(project.as_string()),
      forwarding_rule_(forwarding_rule.as_string()) {
}

// Standard destructor.
GlobalForwardingRulesResource_DeleteMethod::~GlobalForwardingRulesResource_DeleteMethod() {
}


util::Status GlobalForwardingRulesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "forwardingRule") {
    client::UriTemplate::AppendValue(
        forwarding_rule_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalForwardingRulesResource_GetMethod::GlobalForwardingRulesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& forwarding_rule)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/forwardingRules/{forwardingRule}"),
      project_(project.as_string()),
      forwarding_rule_(forwarding_rule.as_string()) {
}

// Standard destructor.
GlobalForwardingRulesResource_GetMethod::~GlobalForwardingRulesResource_GetMethod() {
}


util::Status GlobalForwardingRulesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "forwardingRule") {
    client::UriTemplate::AppendValue(
        forwarding_rule_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalForwardingRulesResource_InsertMethod::GlobalForwardingRulesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const ForwardingRule& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/forwardingRules"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
GlobalForwardingRulesResource_InsertMethod::~GlobalForwardingRulesResource_InsertMethod() {
}


util::Status GlobalForwardingRulesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalForwardingRulesResource_ListMethod::GlobalForwardingRulesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/forwardingRules"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
GlobalForwardingRulesResource_ListMethod::~GlobalForwardingRulesResource_ListMethod() {
}

util::Status GlobalForwardingRulesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status GlobalForwardingRulesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalForwardingRulesResource_SetTargetMethod::GlobalForwardingRulesResource_SetTargetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& forwarding_rule, const TargetReference& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/forwardingRules/{forwardingRule}/setTarget"),
      project_(project.as_string()),
      forwarding_rule_(forwarding_rule.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
GlobalForwardingRulesResource_SetTargetMethod::~GlobalForwardingRulesResource_SetTargetMethod() {
}


util::Status GlobalForwardingRulesResource_SetTargetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "forwardingRule") {
    client::UriTemplate::AppendValue(
        forwarding_rule_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalOperationsResource_AggregatedListMethod::GlobalOperationsResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/operations"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
GlobalOperationsResource_AggregatedListMethod::~GlobalOperationsResource_AggregatedListMethod() {
}

util::Status GlobalOperationsResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status GlobalOperationsResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalOperationsResource_DeleteMethod::GlobalOperationsResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& operation)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/operations/{operation}"),
      project_(project.as_string()),
      operation_(operation.as_string()) {
}

// Standard destructor.
GlobalOperationsResource_DeleteMethod::~GlobalOperationsResource_DeleteMethod() {
}


util::Status GlobalOperationsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "operation") {
    client::UriTemplate::AppendValue(
        operation_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalOperationsResource_GetMethod::GlobalOperationsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& operation)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/operations/{operation}"),
      project_(project.as_string()),
      operation_(operation.as_string()) {
}

// Standard destructor.
GlobalOperationsResource_GetMethod::~GlobalOperationsResource_GetMethod() {
}


util::Status GlobalOperationsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "operation") {
    client::UriTemplate::AppendValue(
        operation_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
GlobalOperationsResource_ListMethod::GlobalOperationsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/operations"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
GlobalOperationsResource_ListMethod::~GlobalOperationsResource_ListMethod() {
}

util::Status GlobalOperationsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status GlobalOperationsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HealthChecksResource_DeleteMethod::HealthChecksResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& health_check)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/healthChecks/{healthCheck}"),
      project_(project.as_string()),
      health_check_(health_check.as_string()) {
}

// Standard destructor.
HealthChecksResource_DeleteMethod::~HealthChecksResource_DeleteMethod() {
}


util::Status HealthChecksResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "healthCheck") {
    client::UriTemplate::AppendValue(
        health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HealthChecksResource_GetMethod::HealthChecksResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& health_check)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/healthChecks/{healthCheck}"),
      project_(project.as_string()),
      health_check_(health_check.as_string()) {
}

// Standard destructor.
HealthChecksResource_GetMethod::~HealthChecksResource_GetMethod() {
}


util::Status HealthChecksResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "healthCheck") {
    client::UriTemplate::AppendValue(
        health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HealthChecksResource_InsertMethod::HealthChecksResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const HealthCheck& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/healthChecks"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
HealthChecksResource_InsertMethod::~HealthChecksResource_InsertMethod() {
}


util::Status HealthChecksResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HealthChecksResource_ListMethod::HealthChecksResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/healthChecks"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
HealthChecksResource_ListMethod::~HealthChecksResource_ListMethod() {
}

util::Status HealthChecksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status HealthChecksResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HealthChecksResource_PatchMethod::HealthChecksResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& health_check, const HealthCheck& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/global/healthChecks/{healthCheck}"),
      project_(project.as_string()),
      health_check_(health_check.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
HealthChecksResource_PatchMethod::~HealthChecksResource_PatchMethod() {
}


util::Status HealthChecksResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "healthCheck") {
    client::UriTemplate::AppendValue(
        health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HealthChecksResource_UpdateMethod::HealthChecksResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& health_check, const HealthCheck& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/global/healthChecks/{healthCheck}"),
      project_(project.as_string()),
      health_check_(health_check.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
HealthChecksResource_UpdateMethod::~HealthChecksResource_UpdateMethod() {
}


util::Status HealthChecksResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "healthCheck") {
    client::UriTemplate::AppendValue(
        health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpHealthChecksResource_DeleteMethod::HttpHealthChecksResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& http_health_check)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/httpHealthChecks/{httpHealthCheck}"),
      project_(project.as_string()),
      http_health_check_(http_health_check.as_string()) {
}

// Standard destructor.
HttpHealthChecksResource_DeleteMethod::~HttpHealthChecksResource_DeleteMethod() {
}


util::Status HttpHealthChecksResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "httpHealthCheck") {
    client::UriTemplate::AppendValue(
        http_health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpHealthChecksResource_GetMethod::HttpHealthChecksResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& http_health_check)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/httpHealthChecks/{httpHealthCheck}"),
      project_(project.as_string()),
      http_health_check_(http_health_check.as_string()) {
}

// Standard destructor.
HttpHealthChecksResource_GetMethod::~HttpHealthChecksResource_GetMethod() {
}


util::Status HttpHealthChecksResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "httpHealthCheck") {
    client::UriTemplate::AppendValue(
        http_health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpHealthChecksResource_InsertMethod::HttpHealthChecksResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const HttpHealthCheck& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/httpHealthChecks"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
HttpHealthChecksResource_InsertMethod::~HttpHealthChecksResource_InsertMethod() {
}


util::Status HttpHealthChecksResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpHealthChecksResource_ListMethod::HttpHealthChecksResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/httpHealthChecks"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
HttpHealthChecksResource_ListMethod::~HttpHealthChecksResource_ListMethod() {
}

util::Status HttpHealthChecksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status HttpHealthChecksResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpHealthChecksResource_PatchMethod::HttpHealthChecksResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& http_health_check, const HttpHealthCheck& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/global/httpHealthChecks/{httpHealthCheck}"),
      project_(project.as_string()),
      http_health_check_(http_health_check.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
HttpHealthChecksResource_PatchMethod::~HttpHealthChecksResource_PatchMethod() {
}


util::Status HttpHealthChecksResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "httpHealthCheck") {
    client::UriTemplate::AppendValue(
        http_health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpHealthChecksResource_UpdateMethod::HttpHealthChecksResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& http_health_check, const HttpHealthCheck& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/global/httpHealthChecks/{httpHealthCheck}"),
      project_(project.as_string()),
      http_health_check_(http_health_check.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
HttpHealthChecksResource_UpdateMethod::~HttpHealthChecksResource_UpdateMethod() {
}


util::Status HttpHealthChecksResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "httpHealthCheck") {
    client::UriTemplate::AppendValue(
        http_health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpsHealthChecksResource_DeleteMethod::HttpsHealthChecksResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& https_health_check)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/httpsHealthChecks/{httpsHealthCheck}"),
      project_(project.as_string()),
      https_health_check_(https_health_check.as_string()) {
}

// Standard destructor.
HttpsHealthChecksResource_DeleteMethod::~HttpsHealthChecksResource_DeleteMethod() {
}


util::Status HttpsHealthChecksResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "httpsHealthCheck") {
    client::UriTemplate::AppendValue(
        https_health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpsHealthChecksResource_GetMethod::HttpsHealthChecksResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& https_health_check)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/httpsHealthChecks/{httpsHealthCheck}"),
      project_(project.as_string()),
      https_health_check_(https_health_check.as_string()) {
}

// Standard destructor.
HttpsHealthChecksResource_GetMethod::~HttpsHealthChecksResource_GetMethod() {
}


util::Status HttpsHealthChecksResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "httpsHealthCheck") {
    client::UriTemplate::AppendValue(
        https_health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpsHealthChecksResource_InsertMethod::HttpsHealthChecksResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const HttpsHealthCheck& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/httpsHealthChecks"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
HttpsHealthChecksResource_InsertMethod::~HttpsHealthChecksResource_InsertMethod() {
}


util::Status HttpsHealthChecksResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpsHealthChecksResource_ListMethod::HttpsHealthChecksResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/httpsHealthChecks"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
HttpsHealthChecksResource_ListMethod::~HttpsHealthChecksResource_ListMethod() {
}

util::Status HttpsHealthChecksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status HttpsHealthChecksResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpsHealthChecksResource_PatchMethod::HttpsHealthChecksResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& https_health_check, const HttpsHealthCheck& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/global/httpsHealthChecks/{httpsHealthCheck}"),
      project_(project.as_string()),
      https_health_check_(https_health_check.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
HttpsHealthChecksResource_PatchMethod::~HttpsHealthChecksResource_PatchMethod() {
}


util::Status HttpsHealthChecksResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "httpsHealthCheck") {
    client::UriTemplate::AppendValue(
        https_health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
HttpsHealthChecksResource_UpdateMethod::HttpsHealthChecksResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& https_health_check, const HttpsHealthCheck& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/global/httpsHealthChecks/{httpsHealthCheck}"),
      project_(project.as_string()),
      https_health_check_(https_health_check.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
HttpsHealthChecksResource_UpdateMethod::~HttpsHealthChecksResource_UpdateMethod() {
}


util::Status HttpsHealthChecksResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "httpsHealthCheck") {
    client::UriTemplate::AppendValue(
        https_health_check_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ImagesResource_DeleteMethod::ImagesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& image)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/images/{image}"),
      project_(project.as_string()),
      image_(image.as_string()) {
}

// Standard destructor.
ImagesResource_DeleteMethod::~ImagesResource_DeleteMethod() {
}


util::Status ImagesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "image") {
    client::UriTemplate::AppendValue(
        image_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ImagesResource_DeprecateMethod::ImagesResource_DeprecateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& image, const DeprecationStatus& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/images/{image}/deprecate"),
      project_(project.as_string()),
      image_(image.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ImagesResource_DeprecateMethod::~ImagesResource_DeprecateMethod() {
}


util::Status ImagesResource_DeprecateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "image") {
    client::UriTemplate::AppendValue(
        image_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ImagesResource_GetMethod::ImagesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& image)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/images/{image}"),
      project_(project.as_string()),
      image_(image.as_string()) {
}

// Standard destructor.
ImagesResource_GetMethod::~ImagesResource_GetMethod() {
}


util::Status ImagesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "image") {
    client::UriTemplate::AppendValue(
        image_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ImagesResource_GetFromFamilyMethod::ImagesResource_GetFromFamilyMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& family)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/images/family/{family}"),
      project_(project.as_string()),
      family_(family.as_string()) {
}

// Standard destructor.
ImagesResource_GetFromFamilyMethod::~ImagesResource_GetFromFamilyMethod() {
}


util::Status ImagesResource_GetFromFamilyMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "family") {
    client::UriTemplate::AppendValue(
        family_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ImagesResource_InsertMethod::ImagesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const Image& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/images"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ImagesResource_InsertMethod::~ImagesResource_InsertMethod() {
}


util::Status ImagesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ImagesResource_ListMethod::ImagesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/images"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
ImagesResource_ListMethod::~ImagesResource_ListMethod() {
}

util::Status ImagesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ImagesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_AbandonInstancesMethod::InstanceGroupManagersResource_AbandonInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersAbandonInstancesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupManagersResource_AbandonInstancesMethod::~InstanceGroupManagersResource_AbandonInstancesMethod() {
}


util::Status InstanceGroupManagersResource_AbandonInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_AggregatedListMethod::InstanceGroupManagersResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/instanceGroupManagers"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
InstanceGroupManagersResource_AggregatedListMethod::~InstanceGroupManagersResource_AggregatedListMethod() {
}

util::Status InstanceGroupManagersResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstanceGroupManagersResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_DeleteMethod::InstanceGroupManagersResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
}

// Standard destructor.
InstanceGroupManagersResource_DeleteMethod::~InstanceGroupManagersResource_DeleteMethod() {
}


util::Status InstanceGroupManagersResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_DeleteInstancesMethod::InstanceGroupManagersResource_DeleteInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersDeleteInstancesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupManagersResource_DeleteInstancesMethod::~InstanceGroupManagersResource_DeleteInstancesMethod() {
}


util::Status InstanceGroupManagersResource_DeleteInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_GetMethod::InstanceGroupManagersResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
}

// Standard destructor.
InstanceGroupManagersResource_GetMethod::~InstanceGroupManagersResource_GetMethod() {
}


util::Status InstanceGroupManagersResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_InsertMethod::InstanceGroupManagersResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const InstanceGroupManager& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroupManagers"),
      project_(project.as_string()),
      zone_(zone.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupManagersResource_InsertMethod::~InstanceGroupManagersResource_InsertMethod() {
}


util::Status InstanceGroupManagersResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_ListMethod::InstanceGroupManagersResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/instanceGroupManagers"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
InstanceGroupManagersResource_ListMethod::~InstanceGroupManagersResource_ListMethod() {
}

util::Status InstanceGroupManagersResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstanceGroupManagersResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_ListManagedInstancesMethod::InstanceGroupManagersResource_ListManagedInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_manager_(instance_group_manager.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
InstanceGroupManagersResource_ListManagedInstancesMethod::~InstanceGroupManagersResource_ListManagedInstancesMethod() {
}

util::Status InstanceGroupManagersResource_ListManagedInstancesMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "order_by=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstanceGroupManagersResource_ListManagedInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_RecreateInstancesMethod::InstanceGroupManagersResource_RecreateInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersRecreateInstancesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupManagersResource_RecreateInstancesMethod::~InstanceGroupManagersResource_RecreateInstancesMethod() {
}


util::Status InstanceGroupManagersResource_RecreateInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_ResizeMethod::InstanceGroupManagersResource_ResizeMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const int32& size)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_manager_(instance_group_manager.as_string()),
      size_(size) {
}

// Standard destructor.
InstanceGroupManagersResource_ResizeMethod::~InstanceGroupManagersResource_ResizeMethod() {
}

util::Status InstanceGroupManagersResource_ResizeMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "size=",
              client::CppValueToEscapedUrlValue(
                size_));
    sep = "&";
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstanceGroupManagersResource_ResizeMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_SetInstanceTemplateMethod::InstanceGroupManagersResource_SetInstanceTemplateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersSetInstanceTemplateRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupManagersResource_SetInstanceTemplateMethod::~InstanceGroupManagersResource_SetInstanceTemplateMethod() {
}


util::Status InstanceGroupManagersResource_SetInstanceTemplateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupManagersResource_SetTargetPoolsMethod::InstanceGroupManagersResource_SetTargetPoolsMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersSetTargetPoolsRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupManagersResource_SetTargetPoolsMethod::~InstanceGroupManagersResource_SetTargetPoolsMethod() {
}


util::Status InstanceGroupManagersResource_SetTargetPoolsMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupsResource_AddInstancesMethod::InstanceGroupsResource_AddInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group, const InstanceGroupsAddInstancesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_(instance_group.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupsResource_AddInstancesMethod::~InstanceGroupsResource_AddInstancesMethod() {
}


util::Status InstanceGroupsResource_AddInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroup") {
    client::UriTemplate::AppendValue(
        instance_group_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupsResource_AggregatedListMethod::InstanceGroupsResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/instanceGroups"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
InstanceGroupsResource_AggregatedListMethod::~InstanceGroupsResource_AggregatedListMethod() {
}

util::Status InstanceGroupsResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstanceGroupsResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupsResource_DeleteMethod::InstanceGroupsResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/zones/{zone}/instanceGroups/{instanceGroup}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_(instance_group.as_string()) {
}

// Standard destructor.
InstanceGroupsResource_DeleteMethod::~InstanceGroupsResource_DeleteMethod() {
}


util::Status InstanceGroupsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroup") {
    client::UriTemplate::AppendValue(
        instance_group_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupsResource_GetMethod::InstanceGroupsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/instanceGroups/{instanceGroup}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_(instance_group.as_string()) {
}

// Standard destructor.
InstanceGroupsResource_GetMethod::~InstanceGroupsResource_GetMethod() {
}


util::Status InstanceGroupsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroup") {
    client::UriTemplate::AppendValue(
        instance_group_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupsResource_InsertMethod::InstanceGroupsResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const InstanceGroup& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroups"),
      project_(project.as_string()),
      zone_(zone.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupsResource_InsertMethod::~InstanceGroupsResource_InsertMethod() {
}


util::Status InstanceGroupsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupsResource_ListMethod::InstanceGroupsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/instanceGroups"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
InstanceGroupsResource_ListMethod::~InstanceGroupsResource_ListMethod() {
}

util::Status InstanceGroupsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstanceGroupsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupsResource_ListInstancesMethod::InstanceGroupsResource_ListInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group, const InstanceGroupsListInstancesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_(instance_group.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupsResource_ListInstancesMethod::~InstanceGroupsResource_ListInstancesMethod() {
}

util::Status InstanceGroupsResource_ListInstancesMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstanceGroupsResource_ListInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroup") {
    client::UriTemplate::AppendValue(
        instance_group_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupsResource_RemoveInstancesMethod::InstanceGroupsResource_RemoveInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group, const InstanceGroupsRemoveInstancesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_(instance_group.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupsResource_RemoveInstancesMethod::~InstanceGroupsResource_RemoveInstancesMethod() {
}


util::Status InstanceGroupsResource_RemoveInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroup") {
    client::UriTemplate::AppendValue(
        instance_group_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceGroupsResource_SetNamedPortsMethod::InstanceGroupsResource_SetNamedPortsMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group, const InstanceGroupsSetNamedPortsRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_group_(instance_group.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceGroupsResource_SetNamedPortsMethod::~InstanceGroupsResource_SetNamedPortsMethod() {
}


util::Status InstanceGroupsResource_SetNamedPortsMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroup") {
    client::UriTemplate::AppendValue(
        instance_group_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceTemplatesResource_DeleteMethod::InstanceTemplatesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& instance_template)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/instanceTemplates/{instanceTemplate}"),
      project_(project.as_string()),
      instance_template_(instance_template.as_string()) {
}

// Standard destructor.
InstanceTemplatesResource_DeleteMethod::~InstanceTemplatesResource_DeleteMethod() {
}


util::Status InstanceTemplatesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceTemplate") {
    client::UriTemplate::AppendValue(
        instance_template_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceTemplatesResource_GetMethod::InstanceTemplatesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& instance_template)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/instanceTemplates/{instanceTemplate}"),
      project_(project.as_string()),
      instance_template_(instance_template.as_string()) {
}

// Standard destructor.
InstanceTemplatesResource_GetMethod::~InstanceTemplatesResource_GetMethod() {
}


util::Status InstanceTemplatesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceTemplate") {
    client::UriTemplate::AppendValue(
        instance_template_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceTemplatesResource_InsertMethod::InstanceTemplatesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const InstanceTemplate& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/instanceTemplates"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstanceTemplatesResource_InsertMethod::~InstanceTemplatesResource_InsertMethod() {
}


util::Status InstanceTemplatesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstanceTemplatesResource_ListMethod::InstanceTemplatesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/instanceTemplates"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
InstanceTemplatesResource_ListMethod::~InstanceTemplatesResource_ListMethod() {
}

util::Status InstanceTemplatesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstanceTemplatesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_AddAccessConfigMethod::InstancesResource_AddAccessConfigMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const StringPiece& network_interface, const AccessConfig& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/addAccessConfig"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()),
      network_interface_(network_interface.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstancesResource_AddAccessConfigMethod::~InstancesResource_AddAccessConfigMethod() {
}

util::Status InstancesResource_AddAccessConfigMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "networkInterface=",
              client::CppValueToEscapedUrlValue(
                network_interface_));
    sep = "&";
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstancesResource_AddAccessConfigMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_AggregatedListMethod::InstancesResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/instances"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
InstancesResource_AggregatedListMethod::~InstancesResource_AggregatedListMethod() {
}

util::Status InstancesResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstancesResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_AttachDiskMethod::InstancesResource_AttachDiskMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const AttachedDisk& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/attachDisk"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstancesResource_AttachDiskMethod::~InstancesResource_AttachDiskMethod() {
}


util::Status InstancesResource_AttachDiskMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_DeleteMethod::InstancesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/zones/{zone}/instances/{instance}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
}

// Standard destructor.
InstancesResource_DeleteMethod::~InstancesResource_DeleteMethod() {
}


util::Status InstancesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_DeleteAccessConfigMethod::InstancesResource_DeleteAccessConfigMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const StringPiece& access_config, const StringPiece& network_interface)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/deleteAccessConfig"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()),
      access_config_(access_config.as_string()),
      network_interface_(network_interface.as_string()) {
}

// Standard destructor.
InstancesResource_DeleteAccessConfigMethod::~InstancesResource_DeleteAccessConfigMethod() {
}

util::Status InstancesResource_DeleteAccessConfigMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "accessConfig=",
              client::CppValueToEscapedUrlValue(
                access_config_));
    sep = "&";
    StrAppend(target, sep, "networkInterface=",
              client::CppValueToEscapedUrlValue(
                network_interface_));
    sep = "&";
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstancesResource_DeleteAccessConfigMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_DetachDiskMethod::InstancesResource_DetachDiskMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const StringPiece& device_name)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/detachDisk"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()),
      device_name_(device_name.as_string()) {
}

// Standard destructor.
InstancesResource_DetachDiskMethod::~InstancesResource_DetachDiskMethod() {
}

util::Status InstancesResource_DetachDiskMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "deviceName=",
              client::CppValueToEscapedUrlValue(
                device_name_));
    sep = "&";
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstancesResource_DetachDiskMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_GetMethod::InstancesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/instances/{instance}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
}

// Standard destructor.
InstancesResource_GetMethod::~InstancesResource_GetMethod() {
}


util::Status InstancesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_GetSerialPortOutputMethod::InstancesResource_GetSerialPortOutputMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/instances/{instance}/serialPort"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()),
      port_(1),
      _have_port_(false),
      _have_start_(false) {
}

// Standard destructor.
InstancesResource_GetSerialPortOutputMethod::~InstancesResource_GetSerialPortOutputMethod() {
}

util::Status InstancesResource_GetSerialPortOutputMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_port_) {
    StrAppend(target, sep, "port=",
              client::CppValueToEscapedUrlValue(
                port_));
    sep = "&";
  }
  if (_have_start_) {
    StrAppend(target, sep, "start=",
              client::CppValueToEscapedUrlValue(
                start_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstancesResource_GetSerialPortOutputMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_InsertMethod::InstancesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const Instance& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances"),
      project_(project.as_string()),
      zone_(zone.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstancesResource_InsertMethod::~InstancesResource_InsertMethod() {
}


util::Status InstancesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_ListMethod::InstancesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/instances"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
InstancesResource_ListMethod::~InstancesResource_ListMethod() {
}

util::Status InstancesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstancesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_ResetMethod::InstancesResource_ResetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/reset"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
}

// Standard destructor.
InstancesResource_ResetMethod::~InstancesResource_ResetMethod() {
}


util::Status InstancesResource_ResetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_SetDiskAutoDeleteMethod::InstancesResource_SetDiskAutoDeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const bool& auto_delete, const StringPiece& device_name)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()),
      auto_delete_(auto_delete),
      device_name_(device_name.as_string()) {
}

// Standard destructor.
InstancesResource_SetDiskAutoDeleteMethod::~InstancesResource_SetDiskAutoDeleteMethod() {
}

util::Status InstancesResource_SetDiskAutoDeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "autoDelete=",
              client::CppValueToEscapedUrlValue(
                auto_delete_));
    sep = "&";
    StrAppend(target, sep, "deviceName=",
              client::CppValueToEscapedUrlValue(
                device_name_));
    sep = "&";
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status InstancesResource_SetDiskAutoDeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_SetMachineTypeMethod::InstancesResource_SetMachineTypeMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const InstancesSetMachineTypeRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/setMachineType"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstancesResource_SetMachineTypeMethod::~InstancesResource_SetMachineTypeMethod() {
}


util::Status InstancesResource_SetMachineTypeMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_SetMetadataMethod::InstancesResource_SetMetadataMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const Metadata& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/setMetadata"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstancesResource_SetMetadataMethod::~InstancesResource_SetMetadataMethod() {
}


util::Status InstancesResource_SetMetadataMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_SetSchedulingMethod::InstancesResource_SetSchedulingMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const Scheduling& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/setScheduling"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstancesResource_SetSchedulingMethod::~InstancesResource_SetSchedulingMethod() {
}


util::Status InstancesResource_SetSchedulingMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_SetServiceAccountMethod::InstancesResource_SetServiceAccountMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const InstancesSetServiceAccountRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/setServiceAccount"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstancesResource_SetServiceAccountMethod::~InstancesResource_SetServiceAccountMethod() {
}


util::Status InstancesResource_SetServiceAccountMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_SetTagsMethod::InstancesResource_SetTagsMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const Tags& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/setTags"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstancesResource_SetTagsMethod::~InstancesResource_SetTagsMethod() {
}


util::Status InstancesResource_SetTagsMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_StartMethod::InstancesResource_StartMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/start"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
}

// Standard destructor.
InstancesResource_StartMethod::~InstancesResource_StartMethod() {
}


util::Status InstancesResource_StartMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_StartWithEncryptionKeyMethod::InstancesResource_StartWithEncryptionKeyMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const InstancesStartWithEncryptionKeyRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
InstancesResource_StartWithEncryptionKeyMethod::~InstancesResource_StartWithEncryptionKeyMethod() {
}


util::Status InstancesResource_StartWithEncryptionKeyMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
InstancesResource_StopMethod::InstancesResource_StopMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/instances/{instance}/stop"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      instance_(instance.as_string()) {
}

// Standard destructor.
InstancesResource_StopMethod::~InstancesResource_StopMethod() {
}


util::Status InstancesResource_StopMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instance") {
    client::UriTemplate::AppendValue(
        instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
LicensesResource_GetMethod::LicensesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& license)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/licenses/{license}"),
      project_(project.as_string()),
      license_(license.as_string()) {
}

// Standard destructor.
LicensesResource_GetMethod::~LicensesResource_GetMethod() {
}


util::Status LicensesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "license") {
    client::UriTemplate::AppendValue(
        license_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
MachineTypesResource_AggregatedListMethod::MachineTypesResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/machineTypes"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
MachineTypesResource_AggregatedListMethod::~MachineTypesResource_AggregatedListMethod() {
}

util::Status MachineTypesResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status MachineTypesResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
MachineTypesResource_GetMethod::MachineTypesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& machine_type)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/machineTypes/{machineType}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      machine_type_(machine_type.as_string()) {
}

// Standard destructor.
MachineTypesResource_GetMethod::~MachineTypesResource_GetMethod() {
}


util::Status MachineTypesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "machineType") {
    client::UriTemplate::AppendValue(
        machine_type_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
MachineTypesResource_ListMethod::MachineTypesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/machineTypes"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
MachineTypesResource_ListMethod::~MachineTypesResource_ListMethod() {
}

util::Status MachineTypesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status MachineTypesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
NetworksResource_DeleteMethod::NetworksResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& network)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/networks/{network}"),
      project_(project.as_string()),
      network_(network.as_string()) {
}

// Standard destructor.
NetworksResource_DeleteMethod::~NetworksResource_DeleteMethod() {
}


util::Status NetworksResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "network") {
    client::UriTemplate::AppendValue(
        network_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
NetworksResource_GetMethod::NetworksResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& network)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/networks/{network}"),
      project_(project.as_string()),
      network_(network.as_string()) {
}

// Standard destructor.
NetworksResource_GetMethod::~NetworksResource_GetMethod() {
}


util::Status NetworksResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "network") {
    client::UriTemplate::AppendValue(
        network_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
NetworksResource_InsertMethod::NetworksResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const Network& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/networks"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
NetworksResource_InsertMethod::~NetworksResource_InsertMethod() {
}


util::Status NetworksResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
NetworksResource_ListMethod::NetworksResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/networks"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
NetworksResource_ListMethod::~NetworksResource_ListMethod() {
}

util::Status NetworksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status NetworksResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
NetworksResource_SwitchToCustomModeMethod::NetworksResource_SwitchToCustomModeMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& network)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/networks/{network}/switchToCustomMode"),
      project_(project.as_string()),
      network_(network.as_string()) {
}

// Standard destructor.
NetworksResource_SwitchToCustomModeMethod::~NetworksResource_SwitchToCustomModeMethod() {
}


util::Status NetworksResource_SwitchToCustomModeMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "network") {
    client::UriTemplate::AppendValue(
        network_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_GetMethod::ProjectsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}"),
      project_(project.as_string()) {
}

// Standard destructor.
ProjectsResource_GetMethod::~ProjectsResource_GetMethod() {
}


util::Status ProjectsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_MoveDiskMethod::ProjectsResource_MoveDiskMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const DiskMoveRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/moveDisk"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_MoveDiskMethod::~ProjectsResource_MoveDiskMethod() {
}


util::Status ProjectsResource_MoveDiskMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_MoveInstanceMethod::ProjectsResource_MoveInstanceMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const InstanceMoveRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/moveInstance"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_MoveInstanceMethod::~ProjectsResource_MoveInstanceMethod() {
}


util::Status ProjectsResource_MoveInstanceMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SetCommonInstanceMetadataMethod::ProjectsResource_SetCommonInstanceMetadataMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const Metadata& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/setCommonInstanceMetadata"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SetCommonInstanceMetadataMethod::~ProjectsResource_SetCommonInstanceMetadataMethod() {
}


util::Status ProjectsResource_SetCommonInstanceMetadataMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SetUsageExportBucketMethod::ProjectsResource_SetUsageExportBucketMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const UsageExportLocation& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/setUsageExportBucket"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SetUsageExportBucketMethod::~ProjectsResource_SetUsageExportBucketMethod() {
}


util::Status ProjectsResource_SetUsageExportBucketMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionAutoscalersResource_DeleteMethod::RegionAutoscalersResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& autoscaler)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/autoscalers/{autoscaler}"),
      project_(project.as_string()),
      region_(region.as_string()),
      autoscaler_(autoscaler.as_string()) {
}

// Standard destructor.
RegionAutoscalersResource_DeleteMethod::~RegionAutoscalersResource_DeleteMethod() {
}


util::Status RegionAutoscalersResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "autoscaler") {
    client::UriTemplate::AppendValue(
        autoscaler_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionAutoscalersResource_GetMethod::RegionAutoscalersResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& autoscaler)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/autoscalers/{autoscaler}"),
      project_(project.as_string()),
      region_(region.as_string()),
      autoscaler_(autoscaler.as_string()) {
}

// Standard destructor.
RegionAutoscalersResource_GetMethod::~RegionAutoscalersResource_GetMethod() {
}


util::Status RegionAutoscalersResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "autoscaler") {
    client::UriTemplate::AppendValue(
        autoscaler_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionAutoscalersResource_InsertMethod::RegionAutoscalersResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Autoscaler& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/autoscalers"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionAutoscalersResource_InsertMethod::~RegionAutoscalersResource_InsertMethod() {
}


util::Status RegionAutoscalersResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionAutoscalersResource_ListMethod::RegionAutoscalersResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/autoscalers"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RegionAutoscalersResource_ListMethod::~RegionAutoscalersResource_ListMethod() {
}

util::Status RegionAutoscalersResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionAutoscalersResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionAutoscalersResource_PatchMethod::RegionAutoscalersResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& autoscaler, const Autoscaler& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/regions/{region}/autoscalers"),
      project_(project.as_string()),
      region_(region.as_string()),
      autoscaler_(autoscaler.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionAutoscalersResource_PatchMethod::~RegionAutoscalersResource_PatchMethod() {
}

util::Status RegionAutoscalersResource_PatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "autoscaler=",
              client::CppValueToEscapedUrlValue(
                autoscaler_));
    sep = "&";
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionAutoscalersResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionAutoscalersResource_UpdateMethod::RegionAutoscalersResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Autoscaler& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/regions/{region}/autoscalers"),
      project_(project.as_string()),
      region_(region.as_string()),
      _have_autoscaler_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionAutoscalersResource_UpdateMethod::~RegionAutoscalersResource_UpdateMethod() {
}

util::Status RegionAutoscalersResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_autoscaler_) {
    StrAppend(target, sep, "autoscaler=",
              client::CppValueToEscapedUrlValue(
                autoscaler_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionAutoscalersResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionBackendServicesResource_DeleteMethod::RegionBackendServicesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/backendServices/{backendService}"),
      project_(project.as_string()),
      region_(region.as_string()),
      backend_service_(backend_service.as_string()) {
}

// Standard destructor.
RegionBackendServicesResource_DeleteMethod::~RegionBackendServicesResource_DeleteMethod() {
}


util::Status RegionBackendServicesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionBackendServicesResource_GetMethod::RegionBackendServicesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/backendServices/{backendService}"),
      project_(project.as_string()),
      region_(region.as_string()),
      backend_service_(backend_service.as_string()) {
}

// Standard destructor.
RegionBackendServicesResource_GetMethod::~RegionBackendServicesResource_GetMethod() {
}


util::Status RegionBackendServicesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionBackendServicesResource_GetHealthMethod::RegionBackendServicesResource_GetHealthMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service, const ResourceGroupReference& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/backendServices/{backendService}/getHealth"),
      project_(project.as_string()),
      region_(region.as_string()),
      backend_service_(backend_service.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionBackendServicesResource_GetHealthMethod::~RegionBackendServicesResource_GetHealthMethod() {
}


util::Status RegionBackendServicesResource_GetHealthMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionBackendServicesResource_InsertMethod::RegionBackendServicesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const BackendService& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/backendServices"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionBackendServicesResource_InsertMethod::~RegionBackendServicesResource_InsertMethod() {
}


util::Status RegionBackendServicesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionBackendServicesResource_ListMethod::RegionBackendServicesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/backendServices"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RegionBackendServicesResource_ListMethod::~RegionBackendServicesResource_ListMethod() {
}

util::Status RegionBackendServicesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionBackendServicesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionBackendServicesResource_PatchMethod::RegionBackendServicesResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service, const BackendService& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/regions/{region}/backendServices/{backendService}"),
      project_(project.as_string()),
      region_(region.as_string()),
      backend_service_(backend_service.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionBackendServicesResource_PatchMethod::~RegionBackendServicesResource_PatchMethod() {
}


util::Status RegionBackendServicesResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionBackendServicesResource_UpdateMethod::RegionBackendServicesResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service, const BackendService& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/regions/{region}/backendServices/{backendService}"),
      project_(project.as_string()),
      region_(region.as_string()),
      backend_service_(backend_service.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionBackendServicesResource_UpdateMethod::~RegionBackendServicesResource_UpdateMethod() {
}


util::Status RegionBackendServicesResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "backendService") {
    client::UriTemplate::AppendValue(
        backend_service_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_AbandonInstancesMethod::RegionInstanceGroupManagersResource_AbandonInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersAbandonInstancesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionInstanceGroupManagersResource_AbandonInstancesMethod::~RegionInstanceGroupManagersResource_AbandonInstancesMethod() {
}


util::Status RegionInstanceGroupManagersResource_AbandonInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_DeleteMethod::RegionInstanceGroupManagersResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
}

// Standard destructor.
RegionInstanceGroupManagersResource_DeleteMethod::~RegionInstanceGroupManagersResource_DeleteMethod() {
}


util::Status RegionInstanceGroupManagersResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_DeleteInstancesMethod::RegionInstanceGroupManagersResource_DeleteInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersDeleteInstancesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionInstanceGroupManagersResource_DeleteInstancesMethod::~RegionInstanceGroupManagersResource_DeleteInstancesMethod() {
}


util::Status RegionInstanceGroupManagersResource_DeleteInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_GetMethod::RegionInstanceGroupManagersResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
}

// Standard destructor.
RegionInstanceGroupManagersResource_GetMethod::~RegionInstanceGroupManagersResource_GetMethod() {
}


util::Status RegionInstanceGroupManagersResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_InsertMethod::RegionInstanceGroupManagersResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const InstanceGroupManager& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroupManagers"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionInstanceGroupManagersResource_InsertMethod::~RegionInstanceGroupManagersResource_InsertMethod() {
}


util::Status RegionInstanceGroupManagersResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_ListMethod::RegionInstanceGroupManagersResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/instanceGroupManagers"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RegionInstanceGroupManagersResource_ListMethod::~RegionInstanceGroupManagersResource_ListMethod() {
}

util::Status RegionInstanceGroupManagersResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionInstanceGroupManagersResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_ListManagedInstancesMethod::RegionInstanceGroupManagersResource_ListManagedInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_manager_(instance_group_manager.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RegionInstanceGroupManagersResource_ListManagedInstancesMethod::~RegionInstanceGroupManagersResource_ListManagedInstancesMethod() {
}

util::Status RegionInstanceGroupManagersResource_ListManagedInstancesMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "order_by=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionInstanceGroupManagersResource_ListManagedInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_RecreateInstancesMethod::RegionInstanceGroupManagersResource_RecreateInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersRecreateRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionInstanceGroupManagersResource_RecreateInstancesMethod::~RegionInstanceGroupManagersResource_RecreateInstancesMethod() {
}


util::Status RegionInstanceGroupManagersResource_RecreateInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_ResizeMethod::RegionInstanceGroupManagersResource_ResizeMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const int32& size)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_manager_(instance_group_manager.as_string()),
      size_(size) {
}

// Standard destructor.
RegionInstanceGroupManagersResource_ResizeMethod::~RegionInstanceGroupManagersResource_ResizeMethod() {
}

util::Status RegionInstanceGroupManagersResource_ResizeMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "size=",
              client::CppValueToEscapedUrlValue(
                size_));
    sep = "&";
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionInstanceGroupManagersResource_ResizeMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_SetInstanceTemplateMethod::RegionInstanceGroupManagersResource_SetInstanceTemplateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersSetTemplateRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionInstanceGroupManagersResource_SetInstanceTemplateMethod::~RegionInstanceGroupManagersResource_SetInstanceTemplateMethod() {
}


util::Status RegionInstanceGroupManagersResource_SetInstanceTemplateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupManagersResource_SetTargetPoolsMethod::RegionInstanceGroupManagersResource_SetTargetPoolsMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersSetTargetPoolsRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_manager_(instance_group_manager.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionInstanceGroupManagersResource_SetTargetPoolsMethod::~RegionInstanceGroupManagersResource_SetTargetPoolsMethod() {
}


util::Status RegionInstanceGroupManagersResource_SetTargetPoolsMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroupManager") {
    client::UriTemplate::AppendValue(
        instance_group_manager_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupsResource_GetMethod::RegionInstanceGroupsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/instanceGroups/{instanceGroup}"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_(instance_group.as_string()) {
}

// Standard destructor.
RegionInstanceGroupsResource_GetMethod::~RegionInstanceGroupsResource_GetMethod() {
}


util::Status RegionInstanceGroupsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroup") {
    client::UriTemplate::AppendValue(
        instance_group_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupsResource_ListMethod::RegionInstanceGroupsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/instanceGroups"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RegionInstanceGroupsResource_ListMethod::~RegionInstanceGroupsResource_ListMethod() {
}

util::Status RegionInstanceGroupsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionInstanceGroupsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupsResource_ListInstancesMethod::RegionInstanceGroupsResource_ListInstancesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group, const RegionInstanceGroupsListInstancesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_(instance_group.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionInstanceGroupsResource_ListInstancesMethod::~RegionInstanceGroupsResource_ListInstancesMethod() {
}

util::Status RegionInstanceGroupsResource_ListInstancesMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionInstanceGroupsResource_ListInstancesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroup") {
    client::UriTemplate::AppendValue(
        instance_group_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionInstanceGroupsResource_SetNamedPortsMethod::RegionInstanceGroupsResource_SetNamedPortsMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group, const RegionInstanceGroupsSetNamedPortsRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts"),
      project_(project.as_string()),
      region_(region.as_string()),
      instance_group_(instance_group.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RegionInstanceGroupsResource_SetNamedPortsMethod::~RegionInstanceGroupsResource_SetNamedPortsMethod() {
}


util::Status RegionInstanceGroupsResource_SetNamedPortsMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "instanceGroup") {
    client::UriTemplate::AppendValue(
        instance_group_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionOperationsResource_DeleteMethod::RegionOperationsResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& operation)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/operations/{operation}"),
      project_(project.as_string()),
      region_(region.as_string()),
      operation_(operation.as_string()) {
}

// Standard destructor.
RegionOperationsResource_DeleteMethod::~RegionOperationsResource_DeleteMethod() {
}


util::Status RegionOperationsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "operation") {
    client::UriTemplate::AppendValue(
        operation_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionOperationsResource_GetMethod::RegionOperationsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& operation)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/operations/{operation}"),
      project_(project.as_string()),
      region_(region.as_string()),
      operation_(operation.as_string()) {
}

// Standard destructor.
RegionOperationsResource_GetMethod::~RegionOperationsResource_GetMethod() {
}


util::Status RegionOperationsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "operation") {
    client::UriTemplate::AppendValue(
        operation_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionOperationsResource_ListMethod::RegionOperationsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/operations"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RegionOperationsResource_ListMethod::~RegionOperationsResource_ListMethod() {
}

util::Status RegionOperationsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionOperationsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionsResource_GetMethod::RegionsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}"),
      project_(project.as_string()),
      region_(region.as_string()) {
}

// Standard destructor.
RegionsResource_GetMethod::~RegionsResource_GetMethod() {
}


util::Status RegionsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RegionsResource_ListMethod::RegionsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RegionsResource_ListMethod::~RegionsResource_ListMethod() {
}

util::Status RegionsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RegionsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutersResource_AggregatedListMethod::RoutersResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/routers"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RoutersResource_AggregatedListMethod::~RoutersResource_AggregatedListMethod() {
}

util::Status RoutersResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RoutersResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutersResource_DeleteMethod::RoutersResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/routers/{router}"),
      project_(project.as_string()),
      region_(region.as_string()),
      router_(router.as_string()) {
}

// Standard destructor.
RoutersResource_DeleteMethod::~RoutersResource_DeleteMethod() {
}


util::Status RoutersResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "router") {
    client::UriTemplate::AppendValue(
        router_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutersResource_GetMethod::RoutersResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/routers/{router}"),
      project_(project.as_string()),
      region_(region.as_string()),
      router_(router.as_string()) {
}

// Standard destructor.
RoutersResource_GetMethod::~RoutersResource_GetMethod() {
}


util::Status RoutersResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "router") {
    client::UriTemplate::AppendValue(
        router_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutersResource_GetRouterStatusMethod::RoutersResource_GetRouterStatusMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/routers/{router}/getRouterStatus"),
      project_(project.as_string()),
      region_(region.as_string()),
      router_(router.as_string()) {
}

// Standard destructor.
RoutersResource_GetRouterStatusMethod::~RoutersResource_GetRouterStatusMethod() {
}


util::Status RoutersResource_GetRouterStatusMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "router") {
    client::UriTemplate::AppendValue(
        router_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutersResource_InsertMethod::RoutersResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Router& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/routers"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RoutersResource_InsertMethod::~RoutersResource_InsertMethod() {
}


util::Status RoutersResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutersResource_ListMethod::RoutersResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/routers"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RoutersResource_ListMethod::~RoutersResource_ListMethod() {
}

util::Status RoutersResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RoutersResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutersResource_PatchMethod::RoutersResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router, const Router& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/regions/{region}/routers/{router}"),
      project_(project.as_string()),
      region_(region.as_string()),
      router_(router.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RoutersResource_PatchMethod::~RoutersResource_PatchMethod() {
}


util::Status RoutersResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "router") {
    client::UriTemplate::AppendValue(
        router_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutersResource_PreviewMethod::RoutersResource_PreviewMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router, const Router& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/routers/{router}/preview"),
      project_(project.as_string()),
      region_(region.as_string()),
      router_(router.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RoutersResource_PreviewMethod::~RoutersResource_PreviewMethod() {
}


util::Status RoutersResource_PreviewMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "router") {
    client::UriTemplate::AppendValue(
        router_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutersResource_UpdateMethod::RoutersResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router, const Router& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/regions/{region}/routers/{router}"),
      project_(project.as_string()),
      region_(region.as_string()),
      router_(router.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RoutersResource_UpdateMethod::~RoutersResource_UpdateMethod() {
}


util::Status RoutersResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "router") {
    client::UriTemplate::AppendValue(
        router_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutesResource_DeleteMethod::RoutesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& route)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/routes/{route}"),
      project_(project.as_string()),
      route_(route.as_string()) {
}

// Standard destructor.
RoutesResource_DeleteMethod::~RoutesResource_DeleteMethod() {
}


util::Status RoutesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "route") {
    client::UriTemplate::AppendValue(
        route_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutesResource_GetMethod::RoutesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& route)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/routes/{route}"),
      project_(project.as_string()),
      route_(route.as_string()) {
}

// Standard destructor.
RoutesResource_GetMethod::~RoutesResource_GetMethod() {
}


util::Status RoutesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "route") {
    client::UriTemplate::AppendValue(
        route_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutesResource_InsertMethod::RoutesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const Route& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/routes"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RoutesResource_InsertMethod::~RoutesResource_InsertMethod() {
}


util::Status RoutesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RoutesResource_ListMethod::RoutesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/routes"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RoutesResource_ListMethod::~RoutesResource_ListMethod() {
}

util::Status RoutesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RoutesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SnapshotsResource_DeleteMethod::SnapshotsResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& snapshot)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/snapshots/{snapshot}"),
      project_(project.as_string()),
      snapshot_(snapshot.as_string()) {
}

// Standard destructor.
SnapshotsResource_DeleteMethod::~SnapshotsResource_DeleteMethod() {
}


util::Status SnapshotsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "snapshot") {
    client::UriTemplate::AppendValue(
        snapshot_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SnapshotsResource_GetMethod::SnapshotsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& snapshot)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/snapshots/{snapshot}"),
      project_(project.as_string()),
      snapshot_(snapshot.as_string()) {
}

// Standard destructor.
SnapshotsResource_GetMethod::~SnapshotsResource_GetMethod() {
}


util::Status SnapshotsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "snapshot") {
    client::UriTemplate::AppendValue(
        snapshot_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SnapshotsResource_ListMethod::SnapshotsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/snapshots"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
SnapshotsResource_ListMethod::~SnapshotsResource_ListMethod() {
}

util::Status SnapshotsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status SnapshotsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SslCertificatesResource_DeleteMethod::SslCertificatesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& ssl_certificate)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/sslCertificates/{sslCertificate}"),
      project_(project.as_string()),
      ssl_certificate_(ssl_certificate.as_string()) {
}

// Standard destructor.
SslCertificatesResource_DeleteMethod::~SslCertificatesResource_DeleteMethod() {
}


util::Status SslCertificatesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sslCertificate") {
    client::UriTemplate::AppendValue(
        ssl_certificate_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SslCertificatesResource_GetMethod::SslCertificatesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& ssl_certificate)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/sslCertificates/{sslCertificate}"),
      project_(project.as_string()),
      ssl_certificate_(ssl_certificate.as_string()) {
}

// Standard destructor.
SslCertificatesResource_GetMethod::~SslCertificatesResource_GetMethod() {
}


util::Status SslCertificatesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sslCertificate") {
    client::UriTemplate::AppendValue(
        ssl_certificate_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SslCertificatesResource_InsertMethod::SslCertificatesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const SslCertificate& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/sslCertificates"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
SslCertificatesResource_InsertMethod::~SslCertificatesResource_InsertMethod() {
}


util::Status SslCertificatesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SslCertificatesResource_ListMethod::SslCertificatesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/sslCertificates"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
SslCertificatesResource_ListMethod::~SslCertificatesResource_ListMethod() {
}

util::Status SslCertificatesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status SslCertificatesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubnetworksResource_AggregatedListMethod::SubnetworksResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/subnetworks"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
SubnetworksResource_AggregatedListMethod::~SubnetworksResource_AggregatedListMethod() {
}

util::Status SubnetworksResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status SubnetworksResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubnetworksResource_DeleteMethod::SubnetworksResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& subnetwork)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/subnetworks/{subnetwork}"),
      project_(project.as_string()),
      region_(region.as_string()),
      subnetwork_(subnetwork.as_string()) {
}

// Standard destructor.
SubnetworksResource_DeleteMethod::~SubnetworksResource_DeleteMethod() {
}


util::Status SubnetworksResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "subnetwork") {
    client::UriTemplate::AppendValue(
        subnetwork_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubnetworksResource_ExpandIpCidrRangeMethod::SubnetworksResource_ExpandIpCidrRangeMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& subnetwork, const SubnetworksExpandIpCidrRangeRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange"),
      project_(project.as_string()),
      region_(region.as_string()),
      subnetwork_(subnetwork.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
SubnetworksResource_ExpandIpCidrRangeMethod::~SubnetworksResource_ExpandIpCidrRangeMethod() {
}


util::Status SubnetworksResource_ExpandIpCidrRangeMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "subnetwork") {
    client::UriTemplate::AppendValue(
        subnetwork_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubnetworksResource_GetMethod::SubnetworksResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& subnetwork)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/subnetworks/{subnetwork}"),
      project_(project.as_string()),
      region_(region.as_string()),
      subnetwork_(subnetwork.as_string()) {
}

// Standard destructor.
SubnetworksResource_GetMethod::~SubnetworksResource_GetMethod() {
}


util::Status SubnetworksResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "subnetwork") {
    client::UriTemplate::AppendValue(
        subnetwork_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubnetworksResource_InsertMethod::SubnetworksResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Subnetwork& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/subnetworks"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
SubnetworksResource_InsertMethod::~SubnetworksResource_InsertMethod() {
}


util::Status SubnetworksResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubnetworksResource_ListMethod::SubnetworksResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/subnetworks"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
SubnetworksResource_ListMethod::~SubnetworksResource_ListMethod() {
}

util::Status SubnetworksResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status SubnetworksResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpProxiesResource_DeleteMethod::TargetHttpProxiesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_http_proxy)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/targetHttpProxies/{targetHttpProxy}"),
      project_(project.as_string()),
      target_http_proxy_(target_http_proxy.as_string()) {
}

// Standard destructor.
TargetHttpProxiesResource_DeleteMethod::~TargetHttpProxiesResource_DeleteMethod() {
}


util::Status TargetHttpProxiesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetHttpProxy") {
    client::UriTemplate::AppendValue(
        target_http_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpProxiesResource_GetMethod::TargetHttpProxiesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_http_proxy)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/targetHttpProxies/{targetHttpProxy}"),
      project_(project.as_string()),
      target_http_proxy_(target_http_proxy.as_string()) {
}

// Standard destructor.
TargetHttpProxiesResource_GetMethod::~TargetHttpProxiesResource_GetMethod() {
}


util::Status TargetHttpProxiesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetHttpProxy") {
    client::UriTemplate::AppendValue(
        target_http_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpProxiesResource_InsertMethod::TargetHttpProxiesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const TargetHttpProxy& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/targetHttpProxies"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetHttpProxiesResource_InsertMethod::~TargetHttpProxiesResource_InsertMethod() {
}


util::Status TargetHttpProxiesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpProxiesResource_ListMethod::TargetHttpProxiesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/targetHttpProxies"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TargetHttpProxiesResource_ListMethod::~TargetHttpProxiesResource_ListMethod() {
}

util::Status TargetHttpProxiesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetHttpProxiesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpProxiesResource_SetUrlMapMethod::TargetHttpProxiesResource_SetUrlMapMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_http_proxy, const UrlMapReference& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap"),
      project_(project.as_string()),
      target_http_proxy_(target_http_proxy.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetHttpProxiesResource_SetUrlMapMethod::~TargetHttpProxiesResource_SetUrlMapMethod() {
}


util::Status TargetHttpProxiesResource_SetUrlMapMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetHttpProxy") {
    client::UriTemplate::AppendValue(
        target_http_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpsProxiesResource_DeleteMethod::TargetHttpsProxiesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_https_proxy)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/targetHttpsProxies/{targetHttpsProxy}"),
      project_(project.as_string()),
      target_https_proxy_(target_https_proxy.as_string()) {
}

// Standard destructor.
TargetHttpsProxiesResource_DeleteMethod::~TargetHttpsProxiesResource_DeleteMethod() {
}


util::Status TargetHttpsProxiesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetHttpsProxy") {
    client::UriTemplate::AppendValue(
        target_https_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpsProxiesResource_GetMethod::TargetHttpsProxiesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_https_proxy)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/targetHttpsProxies/{targetHttpsProxy}"),
      project_(project.as_string()),
      target_https_proxy_(target_https_proxy.as_string()) {
}

// Standard destructor.
TargetHttpsProxiesResource_GetMethod::~TargetHttpsProxiesResource_GetMethod() {
}


util::Status TargetHttpsProxiesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetHttpsProxy") {
    client::UriTemplate::AppendValue(
        target_https_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpsProxiesResource_InsertMethod::TargetHttpsProxiesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const TargetHttpsProxy& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/targetHttpsProxies"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetHttpsProxiesResource_InsertMethod::~TargetHttpsProxiesResource_InsertMethod() {
}


util::Status TargetHttpsProxiesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpsProxiesResource_ListMethod::TargetHttpsProxiesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/targetHttpsProxies"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TargetHttpsProxiesResource_ListMethod::~TargetHttpsProxiesResource_ListMethod() {
}

util::Status TargetHttpsProxiesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetHttpsProxiesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpsProxiesResource_SetSslCertificatesMethod::TargetHttpsProxiesResource_SetSslCertificatesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_https_proxy, const TargetHttpsProxiesSetSslCertificatesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates"),
      project_(project.as_string()),
      target_https_proxy_(target_https_proxy.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetHttpsProxiesResource_SetSslCertificatesMethod::~TargetHttpsProxiesResource_SetSslCertificatesMethod() {
}


util::Status TargetHttpsProxiesResource_SetSslCertificatesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetHttpsProxy") {
    client::UriTemplate::AppendValue(
        target_https_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetHttpsProxiesResource_SetUrlMapMethod::TargetHttpsProxiesResource_SetUrlMapMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_https_proxy, const UrlMapReference& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap"),
      project_(project.as_string()),
      target_https_proxy_(target_https_proxy.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetHttpsProxiesResource_SetUrlMapMethod::~TargetHttpsProxiesResource_SetUrlMapMethod() {
}


util::Status TargetHttpsProxiesResource_SetUrlMapMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetHttpsProxy") {
    client::UriTemplate::AppendValue(
        target_https_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetInstancesResource_AggregatedListMethod::TargetInstancesResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/targetInstances"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TargetInstancesResource_AggregatedListMethod::~TargetInstancesResource_AggregatedListMethod() {
}

util::Status TargetInstancesResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetInstancesResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetInstancesResource_DeleteMethod::TargetInstancesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& target_instance)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/zones/{zone}/targetInstances/{targetInstance}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      target_instance_(target_instance.as_string()) {
}

// Standard destructor.
TargetInstancesResource_DeleteMethod::~TargetInstancesResource_DeleteMethod() {
}


util::Status TargetInstancesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetInstance") {
    client::UriTemplate::AppendValue(
        target_instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetInstancesResource_GetMethod::TargetInstancesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& target_instance)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/targetInstances/{targetInstance}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      target_instance_(target_instance.as_string()) {
}

// Standard destructor.
TargetInstancesResource_GetMethod::~TargetInstancesResource_GetMethod() {
}


util::Status TargetInstancesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetInstance") {
    client::UriTemplate::AppendValue(
        target_instance_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetInstancesResource_InsertMethod::TargetInstancesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const TargetInstance& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/zones/{zone}/targetInstances"),
      project_(project.as_string()),
      zone_(zone.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetInstancesResource_InsertMethod::~TargetInstancesResource_InsertMethod() {
}


util::Status TargetInstancesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetInstancesResource_ListMethod::TargetInstancesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/targetInstances"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TargetInstancesResource_ListMethod::~TargetInstancesResource_ListMethod() {
}

util::Status TargetInstancesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetInstancesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_AddHealthCheckMethod::TargetPoolsResource_AddHealthCheckMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetPoolsAddHealthCheckRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_pool_(target_pool.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetPoolsResource_AddHealthCheckMethod::~TargetPoolsResource_AddHealthCheckMethod() {
}


util::Status TargetPoolsResource_AddHealthCheckMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetPool") {
    client::UriTemplate::AppendValue(
        target_pool_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_AddInstanceMethod::TargetPoolsResource_AddInstanceMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetPoolsAddInstanceRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/targetPools/{targetPool}/addInstance"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_pool_(target_pool.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetPoolsResource_AddInstanceMethod::~TargetPoolsResource_AddInstanceMethod() {
}


util::Status TargetPoolsResource_AddInstanceMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetPool") {
    client::UriTemplate::AppendValue(
        target_pool_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_AggregatedListMethod::TargetPoolsResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/targetPools"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TargetPoolsResource_AggregatedListMethod::~TargetPoolsResource_AggregatedListMethod() {
}

util::Status TargetPoolsResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetPoolsResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_DeleteMethod::TargetPoolsResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/targetPools/{targetPool}"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_pool_(target_pool.as_string()) {
}

// Standard destructor.
TargetPoolsResource_DeleteMethod::~TargetPoolsResource_DeleteMethod() {
}


util::Status TargetPoolsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetPool") {
    client::UriTemplate::AppendValue(
        target_pool_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_GetMethod::TargetPoolsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/targetPools/{targetPool}"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_pool_(target_pool.as_string()) {
}

// Standard destructor.
TargetPoolsResource_GetMethod::~TargetPoolsResource_GetMethod() {
}


util::Status TargetPoolsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetPool") {
    client::UriTemplate::AppendValue(
        target_pool_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_GetHealthMethod::TargetPoolsResource_GetHealthMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const InstanceReference& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/targetPools/{targetPool}/getHealth"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_pool_(target_pool.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetPoolsResource_GetHealthMethod::~TargetPoolsResource_GetHealthMethod() {
}


util::Status TargetPoolsResource_GetHealthMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetPool") {
    client::UriTemplate::AppendValue(
        target_pool_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_InsertMethod::TargetPoolsResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const TargetPool& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/targetPools"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetPoolsResource_InsertMethod::~TargetPoolsResource_InsertMethod() {
}


util::Status TargetPoolsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_ListMethod::TargetPoolsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/targetPools"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TargetPoolsResource_ListMethod::~TargetPoolsResource_ListMethod() {
}

util::Status TargetPoolsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetPoolsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_RemoveHealthCheckMethod::TargetPoolsResource_RemoveHealthCheckMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetPoolsRemoveHealthCheckRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_pool_(target_pool.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetPoolsResource_RemoveHealthCheckMethod::~TargetPoolsResource_RemoveHealthCheckMethod() {
}


util::Status TargetPoolsResource_RemoveHealthCheckMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetPool") {
    client::UriTemplate::AppendValue(
        target_pool_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_RemoveInstanceMethod::TargetPoolsResource_RemoveInstanceMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetPoolsRemoveInstanceRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/targetPools/{targetPool}/removeInstance"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_pool_(target_pool.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetPoolsResource_RemoveInstanceMethod::~TargetPoolsResource_RemoveInstanceMethod() {
}


util::Status TargetPoolsResource_RemoveInstanceMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetPool") {
    client::UriTemplate::AppendValue(
        target_pool_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetPoolsResource_SetBackupMethod::TargetPoolsResource_SetBackupMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetReference& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/targetPools/{targetPool}/setBackup"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_pool_(target_pool.as_string()),
      _have_failover_ratio_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetPoolsResource_SetBackupMethod::~TargetPoolsResource_SetBackupMethod() {
}

util::Status TargetPoolsResource_SetBackupMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_failover_ratio_) {
    StrAppend(target, sep, "failoverRatio=",
              client::CppValueToEscapedUrlValue(
                failover_ratio_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetPoolsResource_SetBackupMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetPool") {
    client::UriTemplate::AppendValue(
        target_pool_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetSslProxiesResource_DeleteMethod::TargetSslProxiesResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/targetSslProxies/{targetSslProxy}"),
      project_(project.as_string()),
      target_ssl_proxy_(target_ssl_proxy.as_string()) {
}

// Standard destructor.
TargetSslProxiesResource_DeleteMethod::~TargetSslProxiesResource_DeleteMethod() {
}


util::Status TargetSslProxiesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetSslProxy") {
    client::UriTemplate::AppendValue(
        target_ssl_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetSslProxiesResource_GetMethod::TargetSslProxiesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/targetSslProxies/{targetSslProxy}"),
      project_(project.as_string()),
      target_ssl_proxy_(target_ssl_proxy.as_string()) {
}

// Standard destructor.
TargetSslProxiesResource_GetMethod::~TargetSslProxiesResource_GetMethod() {
}


util::Status TargetSslProxiesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetSslProxy") {
    client::UriTemplate::AppendValue(
        target_ssl_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetSslProxiesResource_InsertMethod::TargetSslProxiesResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const TargetSslProxy& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/targetSslProxies"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetSslProxiesResource_InsertMethod::~TargetSslProxiesResource_InsertMethod() {
}


util::Status TargetSslProxiesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetSslProxiesResource_ListMethod::TargetSslProxiesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/targetSslProxies"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TargetSslProxiesResource_ListMethod::~TargetSslProxiesResource_ListMethod() {
}

util::Status TargetSslProxiesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetSslProxiesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetSslProxiesResource_SetBackendServiceMethod::TargetSslProxiesResource_SetBackendServiceMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy, const TargetSslProxiesSetBackendServiceRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/targetSslProxies/{targetSslProxy}/setBackendService"),
      project_(project.as_string()),
      target_ssl_proxy_(target_ssl_proxy.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetSslProxiesResource_SetBackendServiceMethod::~TargetSslProxiesResource_SetBackendServiceMethod() {
}


util::Status TargetSslProxiesResource_SetBackendServiceMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetSslProxy") {
    client::UriTemplate::AppendValue(
        target_ssl_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetSslProxiesResource_SetProxyHeaderMethod::TargetSslProxiesResource_SetProxyHeaderMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy, const TargetSslProxiesSetProxyHeaderRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader"),
      project_(project.as_string()),
      target_ssl_proxy_(target_ssl_proxy.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetSslProxiesResource_SetProxyHeaderMethod::~TargetSslProxiesResource_SetProxyHeaderMethod() {
}


util::Status TargetSslProxiesResource_SetProxyHeaderMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetSslProxy") {
    client::UriTemplate::AppendValue(
        target_ssl_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetSslProxiesResource_SetSslCertificatesMethod::TargetSslProxiesResource_SetSslCertificatesMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy, const TargetSslProxiesSetSslCertificatesRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates"),
      project_(project.as_string()),
      target_ssl_proxy_(target_ssl_proxy.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetSslProxiesResource_SetSslCertificatesMethod::~TargetSslProxiesResource_SetSslCertificatesMethod() {
}


util::Status TargetSslProxiesResource_SetSslCertificatesMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetSslProxy") {
    client::UriTemplate::AppendValue(
        target_ssl_proxy_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetVpnGatewaysResource_AggregatedListMethod::TargetVpnGatewaysResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/targetVpnGateways"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TargetVpnGatewaysResource_AggregatedListMethod::~TargetVpnGatewaysResource_AggregatedListMethod() {
}

util::Status TargetVpnGatewaysResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetVpnGatewaysResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetVpnGatewaysResource_DeleteMethod::TargetVpnGatewaysResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_vpn_gateway)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_vpn_gateway_(target_vpn_gateway.as_string()) {
}

// Standard destructor.
TargetVpnGatewaysResource_DeleteMethod::~TargetVpnGatewaysResource_DeleteMethod() {
}


util::Status TargetVpnGatewaysResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetVpnGateway") {
    client::UriTemplate::AppendValue(
        target_vpn_gateway_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetVpnGatewaysResource_GetMethod::TargetVpnGatewaysResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_vpn_gateway)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}"),
      project_(project.as_string()),
      region_(region.as_string()),
      target_vpn_gateway_(target_vpn_gateway.as_string()) {
}

// Standard destructor.
TargetVpnGatewaysResource_GetMethod::~TargetVpnGatewaysResource_GetMethod() {
}


util::Status TargetVpnGatewaysResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "targetVpnGateway") {
    client::UriTemplate::AppendValue(
        target_vpn_gateway_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetVpnGatewaysResource_InsertMethod::TargetVpnGatewaysResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const TargetVpnGateway& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/targetVpnGateways"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TargetVpnGatewaysResource_InsertMethod::~TargetVpnGatewaysResource_InsertMethod() {
}


util::Status TargetVpnGatewaysResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TargetVpnGatewaysResource_ListMethod::TargetVpnGatewaysResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/targetVpnGateways"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TargetVpnGatewaysResource_ListMethod::~TargetVpnGatewaysResource_ListMethod() {
}

util::Status TargetVpnGatewaysResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TargetVpnGatewaysResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UrlMapsResource_DeleteMethod::UrlMapsResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/global/urlMaps/{urlMap}"),
      project_(project.as_string()),
      url_map_(url_map.as_string()) {
}

// Standard destructor.
UrlMapsResource_DeleteMethod::~UrlMapsResource_DeleteMethod() {
}


util::Status UrlMapsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "urlMap") {
    client::UriTemplate::AppendValue(
        url_map_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UrlMapsResource_GetMethod::UrlMapsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/urlMaps/{urlMap}"),
      project_(project.as_string()),
      url_map_(url_map.as_string()) {
}

// Standard destructor.
UrlMapsResource_GetMethod::~UrlMapsResource_GetMethod() {
}


util::Status UrlMapsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "urlMap") {
    client::UriTemplate::AppendValue(
        url_map_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UrlMapsResource_InsertMethod::UrlMapsResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const UrlMap& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/urlMaps"),
      project_(project.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UrlMapsResource_InsertMethod::~UrlMapsResource_InsertMethod() {
}


util::Status UrlMapsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UrlMapsResource_InvalidateCacheMethod::UrlMapsResource_InvalidateCacheMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map, const CacheInvalidationRule& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/urlMaps/{urlMap}/invalidateCache"),
      project_(project.as_string()),
      url_map_(url_map.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UrlMapsResource_InvalidateCacheMethod::~UrlMapsResource_InvalidateCacheMethod() {
}


util::Status UrlMapsResource_InvalidateCacheMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "urlMap") {
    client::UriTemplate::AppendValue(
        url_map_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UrlMapsResource_ListMethod::UrlMapsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/global/urlMaps"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
UrlMapsResource_ListMethod::~UrlMapsResource_ListMethod() {
}

util::Status UrlMapsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UrlMapsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UrlMapsResource_PatchMethod::UrlMapsResource_PatchMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map, const UrlMap& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{project}/global/urlMaps/{urlMap}"),
      project_(project.as_string()),
      url_map_(url_map.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UrlMapsResource_PatchMethod::~UrlMapsResource_PatchMethod() {
}


util::Status UrlMapsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "urlMap") {
    client::UriTemplate::AppendValue(
        url_map_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UrlMapsResource_UpdateMethod::UrlMapsResource_UpdateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map, const UrlMap& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{project}/global/urlMaps/{urlMap}"),
      project_(project.as_string()),
      url_map_(url_map.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UrlMapsResource_UpdateMethod::~UrlMapsResource_UpdateMethod() {
}


util::Status UrlMapsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "urlMap") {
    client::UriTemplate::AppendValue(
        url_map_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UrlMapsResource_ValidateMethod::UrlMapsResource_ValidateMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map, const UrlMapsValidateRequest& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/global/urlMaps/{urlMap}/validate"),
      project_(project.as_string()),
      url_map_(url_map.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UrlMapsResource_ValidateMethod::~UrlMapsResource_ValidateMethod() {
}


util::Status UrlMapsResource_ValidateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "urlMap") {
    client::UriTemplate::AppendValue(
        url_map_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VpnTunnelsResource_AggregatedListMethod::VpnTunnelsResource_AggregatedListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/aggregated/vpnTunnels"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
VpnTunnelsResource_AggregatedListMethod::~VpnTunnelsResource_AggregatedListMethod() {
}

util::Status VpnTunnelsResource_AggregatedListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status VpnTunnelsResource_AggregatedListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VpnTunnelsResource_DeleteMethod::VpnTunnelsResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& vpn_tunnel)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/regions/{region}/vpnTunnels/{vpnTunnel}"),
      project_(project.as_string()),
      region_(region.as_string()),
      vpn_tunnel_(vpn_tunnel.as_string()) {
}

// Standard destructor.
VpnTunnelsResource_DeleteMethod::~VpnTunnelsResource_DeleteMethod() {
}


util::Status VpnTunnelsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "vpnTunnel") {
    client::UriTemplate::AppendValue(
        vpn_tunnel_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VpnTunnelsResource_GetMethod::VpnTunnelsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& vpn_tunnel)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/vpnTunnels/{vpnTunnel}"),
      project_(project.as_string()),
      region_(region.as_string()),
      vpn_tunnel_(vpn_tunnel.as_string()) {
}

// Standard destructor.
VpnTunnelsResource_GetMethod::~VpnTunnelsResource_GetMethod() {
}


util::Status VpnTunnelsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "vpnTunnel") {
    client::UriTemplate::AppendValue(
        vpn_tunnel_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VpnTunnelsResource_InsertMethod::VpnTunnelsResource_InsertMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const VpnTunnel& __request_content__)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{project}/regions/{region}/vpnTunnels"),
      project_(project.as_string()),
      region_(region.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
VpnTunnelsResource_InsertMethod::~VpnTunnelsResource_InsertMethod() {
}


util::Status VpnTunnelsResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VpnTunnelsResource_ListMethod::VpnTunnelsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/regions/{region}/vpnTunnels"),
      project_(project.as_string()),
      region_(region.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
VpnTunnelsResource_ListMethod::~VpnTunnelsResource_ListMethod() {
}

util::Status VpnTunnelsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status VpnTunnelsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "region") {
    client::UriTemplate::AppendValue(
        region_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ZoneOperationsResource_DeleteMethod::ZoneOperationsResource_DeleteMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& operation)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{project}/zones/{zone}/operations/{operation}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      operation_(operation.as_string()) {
}

// Standard destructor.
ZoneOperationsResource_DeleteMethod::~ZoneOperationsResource_DeleteMethod() {
}


util::Status ZoneOperationsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "operation") {
    client::UriTemplate::AppendValue(
        operation_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ZoneOperationsResource_GetMethod::ZoneOperationsResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& operation)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/operations/{operation}"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      operation_(operation.as_string()) {
}

// Standard destructor.
ZoneOperationsResource_GetMethod::~ZoneOperationsResource_GetMethod() {
}


util::Status ZoneOperationsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "operation") {
    client::UriTemplate::AppendValue(
        operation_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ZoneOperationsResource_ListMethod::ZoneOperationsResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}/operations"),
      project_(project.as_string()),
      zone_(zone.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
ZoneOperationsResource_ListMethod::~ZoneOperationsResource_ListMethod() {
}

util::Status ZoneOperationsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ZoneOperationsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ZonesResource_GetMethod::ZonesResource_GetMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones/{zone}"),
      project_(project.as_string()),
      zone_(zone.as_string()) {
}

// Standard destructor.
ZonesResource_GetMethod::~ZonesResource_GetMethod() {
}


util::Status ZonesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "zone") {
    client::UriTemplate::AppendValue(
        zone_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ZonesResource_ListMethod::ZonesResource_ListMethod(
    const ComputeService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : ComputeServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{project}/zones"),
      project_(project.as_string()),
      max_results_(500),
      _have_filter_(false),
      _have_max_results_(false),
      _have_order_by_(false),
      _have_page_token_(false) {
}

// Standard destructor.
ZonesResource_ListMethod::~ZonesResource_ListMethod() {
}

util::Status ZonesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_filter_) {
    StrAppend(target, sep, "filter=",
              client::CppValueToEscapedUrlValue(
                filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return ComputeServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ZonesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return ComputeServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



ComputeService::ComputeService(client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "compute/v1/projects/", transport), addresses_(this), autoscalers_(this), backend_services_(this), disk_types_(this), disks_(this), firewalls_(this), forwarding_rules_(this), global_addresses_(this), global_forwarding_rules_(this), global_operations_(this), health_checks_(this), http_health_checks_(this), https_health_checks_(this), images_(this), instance_group_managers_(this), instance_groups_(this), instance_templates_(this), instances_(this), licenses_(this), machine_types_(this), networks_(this), projects_(this), region_autoscalers_(this), region_backend_services_(this), region_instance_group_managers_(this), region_instance_groups_(this), region_operations_(this), regions_(this), routers_(this), routes_(this), snapshots_(this), ssl_certificates_(this), subnetworks_(this), target_http_proxies_(this), target_https_proxies_(this), target_instances_(this), target_pools_(this), target_ssl_proxies_(this), target_vpn_gateways_(this), url_maps_(this), vpn_tunnels_(this), zone_operations_(this), zones_(this) {
}

ComputeService::~ComputeService() {
}


ComputeService::AddressesResource::AddressesResource(ComputeService* service)
  : service_(service) {
}



AddressesResource_AggregatedListMethod* ComputeService::AddressesResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new AddressesResource_AggregatedListMethod(service_, _credential_, project);
}


AddressesResource_AggregatedListMethodPager* ComputeService::AddressesResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<AddressesResource_AggregatedListMethod, AddressAggregatedList>(new AddressesResource_AggregatedListMethod(service_, _credential_, project));
}


AddressesResource_DeleteMethod* ComputeService::AddressesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& address) const {
  return new AddressesResource_DeleteMethod(service_, _credential_, project, region, address);
}


AddressesResource_GetMethod* ComputeService::AddressesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& address) const {
  return new AddressesResource_GetMethod(service_, _credential_, project, region, address);
}


AddressesResource_InsertMethod* ComputeService::AddressesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Address& __request_content__) const {
  return new AddressesResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


AddressesResource_ListMethod* ComputeService::AddressesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new AddressesResource_ListMethod(service_, _credential_, project, region);
}


AddressesResource_ListMethodPager* ComputeService::AddressesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<AddressesResource_ListMethod, AddressList>(new AddressesResource_ListMethod(service_, _credential_, project, region));
}

ComputeService::AutoscalersResource::AutoscalersResource(ComputeService* service)
  : service_(service) {
}



AutoscalersResource_AggregatedListMethod* ComputeService::AutoscalersResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new AutoscalersResource_AggregatedListMethod(service_, _credential_, project);
}


AutoscalersResource_AggregatedListMethodPager* ComputeService::AutoscalersResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<AutoscalersResource_AggregatedListMethod, AutoscalerAggregatedList>(new AutoscalersResource_AggregatedListMethod(service_, _credential_, project));
}


AutoscalersResource_DeleteMethod* ComputeService::AutoscalersResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& autoscaler) const {
  return new AutoscalersResource_DeleteMethod(service_, _credential_, project, zone, autoscaler);
}


AutoscalersResource_GetMethod* ComputeService::AutoscalersResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& autoscaler) const {
  return new AutoscalersResource_GetMethod(service_, _credential_, project, zone, autoscaler);
}


AutoscalersResource_InsertMethod* ComputeService::AutoscalersResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const Autoscaler& __request_content__) const {
  return new AutoscalersResource_InsertMethod(service_, _credential_, project, zone, __request_content__);
}


AutoscalersResource_ListMethod* ComputeService::AutoscalersResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new AutoscalersResource_ListMethod(service_, _credential_, project, zone);
}


AutoscalersResource_ListMethodPager* ComputeService::AutoscalersResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new client::EncapsulatedServiceRequestPager<AutoscalersResource_ListMethod, AutoscalerList>(new AutoscalersResource_ListMethod(service_, _credential_, project, zone));
}


AutoscalersResource_PatchMethod* ComputeService::AutoscalersResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& autoscaler, const Autoscaler& __request_content__) const {
  return new AutoscalersResource_PatchMethod(service_, _credential_, project, zone, autoscaler, __request_content__);
}


AutoscalersResource_UpdateMethod* ComputeService::AutoscalersResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const Autoscaler& __request_content__) const {
  return new AutoscalersResource_UpdateMethod(service_, _credential_, project, zone, __request_content__);
}

ComputeService::BackendServicesResource::BackendServicesResource(ComputeService* service)
  : service_(service) {
}



BackendServicesResource_AggregatedListMethod* ComputeService::BackendServicesResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new BackendServicesResource_AggregatedListMethod(service_, _credential_, project);
}


BackendServicesResource_AggregatedListMethodPager* ComputeService::BackendServicesResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<BackendServicesResource_AggregatedListMethod, BackendServiceAggregatedList>(new BackendServicesResource_AggregatedListMethod(service_, _credential_, project));
}


BackendServicesResource_DeleteMethod* ComputeService::BackendServicesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service) const {
  return new BackendServicesResource_DeleteMethod(service_, _credential_, project, backend_service);
}


BackendServicesResource_GetMethod* ComputeService::BackendServicesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service) const {
  return new BackendServicesResource_GetMethod(service_, _credential_, project, backend_service);
}


BackendServicesResource_GetHealthMethod* ComputeService::BackendServicesResource::NewGetHealthMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service, const ResourceGroupReference& __request_content__) const {
  return new BackendServicesResource_GetHealthMethod(service_, _credential_, project, backend_service, __request_content__);
}


BackendServicesResource_InsertMethod* ComputeService::BackendServicesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const BackendService& __request_content__) const {
  return new BackendServicesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


BackendServicesResource_ListMethod* ComputeService::BackendServicesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new BackendServicesResource_ListMethod(service_, _credential_, project);
}


BackendServicesResource_ListMethodPager* ComputeService::BackendServicesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<BackendServicesResource_ListMethod, BackendServiceList>(new BackendServicesResource_ListMethod(service_, _credential_, project));
}


BackendServicesResource_PatchMethod* ComputeService::BackendServicesResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service, const BackendService& __request_content__) const {
  return new BackendServicesResource_PatchMethod(service_, _credential_, project, backend_service, __request_content__);
}


BackendServicesResource_UpdateMethod* ComputeService::BackendServicesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& backend_service, const BackendService& __request_content__) const {
  return new BackendServicesResource_UpdateMethod(service_, _credential_, project, backend_service, __request_content__);
}

ComputeService::DiskTypesResource::DiskTypesResource(ComputeService* service)
  : service_(service) {
}



DiskTypesResource_AggregatedListMethod* ComputeService::DiskTypesResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new DiskTypesResource_AggregatedListMethod(service_, _credential_, project);
}


DiskTypesResource_AggregatedListMethodPager* ComputeService::DiskTypesResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<DiskTypesResource_AggregatedListMethod, DiskTypeAggregatedList>(new DiskTypesResource_AggregatedListMethod(service_, _credential_, project));
}


DiskTypesResource_GetMethod* ComputeService::DiskTypesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk_type) const {
  return new DiskTypesResource_GetMethod(service_, _credential_, project, zone, disk_type);
}


DiskTypesResource_ListMethod* ComputeService::DiskTypesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new DiskTypesResource_ListMethod(service_, _credential_, project, zone);
}


DiskTypesResource_ListMethodPager* ComputeService::DiskTypesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new client::EncapsulatedServiceRequestPager<DiskTypesResource_ListMethod, DiskTypeList>(new DiskTypesResource_ListMethod(service_, _credential_, project, zone));
}

ComputeService::DisksResource::DisksResource(ComputeService* service)
  : service_(service) {
}



DisksResource_AggregatedListMethod* ComputeService::DisksResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new DisksResource_AggregatedListMethod(service_, _credential_, project);
}


DisksResource_AggregatedListMethodPager* ComputeService::DisksResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<DisksResource_AggregatedListMethod, DiskAggregatedList>(new DisksResource_AggregatedListMethod(service_, _credential_, project));
}


DisksResource_CreateSnapshotMethod* ComputeService::DisksResource::NewCreateSnapshotMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk, const Snapshot& __request_content__) const {
  return new DisksResource_CreateSnapshotMethod(service_, _credential_, project, zone, disk, __request_content__);
}


DisksResource_DeleteMethod* ComputeService::DisksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk) const {
  return new DisksResource_DeleteMethod(service_, _credential_, project, zone, disk);
}


DisksResource_GetMethod* ComputeService::DisksResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk) const {
  return new DisksResource_GetMethod(service_, _credential_, project, zone, disk);
}


DisksResource_InsertMethod* ComputeService::DisksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const Disk& __request_content__) const {
  return new DisksResource_InsertMethod(service_, _credential_, project, zone, __request_content__);
}


DisksResource_ListMethod* ComputeService::DisksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new DisksResource_ListMethod(service_, _credential_, project, zone);
}


DisksResource_ListMethodPager* ComputeService::DisksResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new client::EncapsulatedServiceRequestPager<DisksResource_ListMethod, DiskList>(new DisksResource_ListMethod(service_, _credential_, project, zone));
}


DisksResource_ResizeMethod* ComputeService::DisksResource::NewResizeMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& disk, const DisksResizeRequest& __request_content__) const {
  return new DisksResource_ResizeMethod(service_, _credential_, project, zone, disk, __request_content__);
}

ComputeService::FirewallsResource::FirewallsResource(ComputeService* service)
  : service_(service) {
}



FirewallsResource_DeleteMethod* ComputeService::FirewallsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& firewall) const {
  return new FirewallsResource_DeleteMethod(service_, _credential_, project, firewall);
}


FirewallsResource_GetMethod* ComputeService::FirewallsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& firewall) const {
  return new FirewallsResource_GetMethod(service_, _credential_, project, firewall);
}


FirewallsResource_InsertMethod* ComputeService::FirewallsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const Firewall& __request_content__) const {
  return new FirewallsResource_InsertMethod(service_, _credential_, project, __request_content__);
}


FirewallsResource_ListMethod* ComputeService::FirewallsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new FirewallsResource_ListMethod(service_, _credential_, project);
}


FirewallsResource_ListMethodPager* ComputeService::FirewallsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<FirewallsResource_ListMethod, FirewallList>(new FirewallsResource_ListMethod(service_, _credential_, project));
}


FirewallsResource_PatchMethod* ComputeService::FirewallsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& firewall, const Firewall& __request_content__) const {
  return new FirewallsResource_PatchMethod(service_, _credential_, project, firewall, __request_content__);
}


FirewallsResource_UpdateMethod* ComputeService::FirewallsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& firewall, const Firewall& __request_content__) const {
  return new FirewallsResource_UpdateMethod(service_, _credential_, project, firewall, __request_content__);
}

ComputeService::ForwardingRulesResource::ForwardingRulesResource(ComputeService* service)
  : service_(service) {
}



ForwardingRulesResource_AggregatedListMethod* ComputeService::ForwardingRulesResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new ForwardingRulesResource_AggregatedListMethod(service_, _credential_, project);
}


ForwardingRulesResource_AggregatedListMethodPager* ComputeService::ForwardingRulesResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<ForwardingRulesResource_AggregatedListMethod, ForwardingRuleAggregatedList>(new ForwardingRulesResource_AggregatedListMethod(service_, _credential_, project));
}


ForwardingRulesResource_DeleteMethod* ComputeService::ForwardingRulesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& forwarding_rule) const {
  return new ForwardingRulesResource_DeleteMethod(service_, _credential_, project, region, forwarding_rule);
}


ForwardingRulesResource_GetMethod* ComputeService::ForwardingRulesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& forwarding_rule) const {
  return new ForwardingRulesResource_GetMethod(service_, _credential_, project, region, forwarding_rule);
}


ForwardingRulesResource_InsertMethod* ComputeService::ForwardingRulesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const ForwardingRule& __request_content__) const {
  return new ForwardingRulesResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


ForwardingRulesResource_ListMethod* ComputeService::ForwardingRulesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new ForwardingRulesResource_ListMethod(service_, _credential_, project, region);
}


ForwardingRulesResource_ListMethodPager* ComputeService::ForwardingRulesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<ForwardingRulesResource_ListMethod, ForwardingRuleList>(new ForwardingRulesResource_ListMethod(service_, _credential_, project, region));
}


ForwardingRulesResource_SetTargetMethod* ComputeService::ForwardingRulesResource::NewSetTargetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& forwarding_rule, const TargetReference& __request_content__) const {
  return new ForwardingRulesResource_SetTargetMethod(service_, _credential_, project, region, forwarding_rule, __request_content__);
}

ComputeService::GlobalAddressesResource::GlobalAddressesResource(ComputeService* service)
  : service_(service) {
}



GlobalAddressesResource_DeleteMethod* ComputeService::GlobalAddressesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& address) const {
  return new GlobalAddressesResource_DeleteMethod(service_, _credential_, project, address);
}


GlobalAddressesResource_GetMethod* ComputeService::GlobalAddressesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& address) const {
  return new GlobalAddressesResource_GetMethod(service_, _credential_, project, address);
}


GlobalAddressesResource_InsertMethod* ComputeService::GlobalAddressesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const Address& __request_content__) const {
  return new GlobalAddressesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


GlobalAddressesResource_ListMethod* ComputeService::GlobalAddressesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new GlobalAddressesResource_ListMethod(service_, _credential_, project);
}


GlobalAddressesResource_ListMethodPager* ComputeService::GlobalAddressesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<GlobalAddressesResource_ListMethod, AddressList>(new GlobalAddressesResource_ListMethod(service_, _credential_, project));
}

ComputeService::GlobalForwardingRulesResource::GlobalForwardingRulesResource(ComputeService* service)
  : service_(service) {
}



GlobalForwardingRulesResource_DeleteMethod* ComputeService::GlobalForwardingRulesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& forwarding_rule) const {
  return new GlobalForwardingRulesResource_DeleteMethod(service_, _credential_, project, forwarding_rule);
}


GlobalForwardingRulesResource_GetMethod* ComputeService::GlobalForwardingRulesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& forwarding_rule) const {
  return new GlobalForwardingRulesResource_GetMethod(service_, _credential_, project, forwarding_rule);
}


GlobalForwardingRulesResource_InsertMethod* ComputeService::GlobalForwardingRulesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const ForwardingRule& __request_content__) const {
  return new GlobalForwardingRulesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


GlobalForwardingRulesResource_ListMethod* ComputeService::GlobalForwardingRulesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new GlobalForwardingRulesResource_ListMethod(service_, _credential_, project);
}


GlobalForwardingRulesResource_ListMethodPager* ComputeService::GlobalForwardingRulesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<GlobalForwardingRulesResource_ListMethod, ForwardingRuleList>(new GlobalForwardingRulesResource_ListMethod(service_, _credential_, project));
}


GlobalForwardingRulesResource_SetTargetMethod* ComputeService::GlobalForwardingRulesResource::NewSetTargetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& forwarding_rule, const TargetReference& __request_content__) const {
  return new GlobalForwardingRulesResource_SetTargetMethod(service_, _credential_, project, forwarding_rule, __request_content__);
}

ComputeService::GlobalOperationsResource::GlobalOperationsResource(ComputeService* service)
  : service_(service) {
}



GlobalOperationsResource_AggregatedListMethod* ComputeService::GlobalOperationsResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new GlobalOperationsResource_AggregatedListMethod(service_, _credential_, project);
}


GlobalOperationsResource_AggregatedListMethodPager* ComputeService::GlobalOperationsResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<GlobalOperationsResource_AggregatedListMethod, OperationAggregatedList>(new GlobalOperationsResource_AggregatedListMethod(service_, _credential_, project));
}


GlobalOperationsResource_DeleteMethod* ComputeService::GlobalOperationsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& operation) const {
  return new GlobalOperationsResource_DeleteMethod(service_, _credential_, project, operation);
}


GlobalOperationsResource_GetMethod* ComputeService::GlobalOperationsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& operation) const {
  return new GlobalOperationsResource_GetMethod(service_, _credential_, project, operation);
}


GlobalOperationsResource_ListMethod* ComputeService::GlobalOperationsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new GlobalOperationsResource_ListMethod(service_, _credential_, project);
}


GlobalOperationsResource_ListMethodPager* ComputeService::GlobalOperationsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<GlobalOperationsResource_ListMethod, OperationList>(new GlobalOperationsResource_ListMethod(service_, _credential_, project));
}

ComputeService::HealthChecksResource::HealthChecksResource(ComputeService* service)
  : service_(service) {
}



HealthChecksResource_DeleteMethod* ComputeService::HealthChecksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& health_check) const {
  return new HealthChecksResource_DeleteMethod(service_, _credential_, project, health_check);
}


HealthChecksResource_GetMethod* ComputeService::HealthChecksResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& health_check) const {
  return new HealthChecksResource_GetMethod(service_, _credential_, project, health_check);
}


HealthChecksResource_InsertMethod* ComputeService::HealthChecksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const HealthCheck& __request_content__) const {
  return new HealthChecksResource_InsertMethod(service_, _credential_, project, __request_content__);
}


HealthChecksResource_ListMethod* ComputeService::HealthChecksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new HealthChecksResource_ListMethod(service_, _credential_, project);
}


HealthChecksResource_ListMethodPager* ComputeService::HealthChecksResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<HealthChecksResource_ListMethod, HealthCheckList>(new HealthChecksResource_ListMethod(service_, _credential_, project));
}


HealthChecksResource_PatchMethod* ComputeService::HealthChecksResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& health_check, const HealthCheck& __request_content__) const {
  return new HealthChecksResource_PatchMethod(service_, _credential_, project, health_check, __request_content__);
}


HealthChecksResource_UpdateMethod* ComputeService::HealthChecksResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& health_check, const HealthCheck& __request_content__) const {
  return new HealthChecksResource_UpdateMethod(service_, _credential_, project, health_check, __request_content__);
}

ComputeService::HttpHealthChecksResource::HttpHealthChecksResource(ComputeService* service)
  : service_(service) {
}



HttpHealthChecksResource_DeleteMethod* ComputeService::HttpHealthChecksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& http_health_check) const {
  return new HttpHealthChecksResource_DeleteMethod(service_, _credential_, project, http_health_check);
}


HttpHealthChecksResource_GetMethod* ComputeService::HttpHealthChecksResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& http_health_check) const {
  return new HttpHealthChecksResource_GetMethod(service_, _credential_, project, http_health_check);
}


HttpHealthChecksResource_InsertMethod* ComputeService::HttpHealthChecksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const HttpHealthCheck& __request_content__) const {
  return new HttpHealthChecksResource_InsertMethod(service_, _credential_, project, __request_content__);
}


HttpHealthChecksResource_ListMethod* ComputeService::HttpHealthChecksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new HttpHealthChecksResource_ListMethod(service_, _credential_, project);
}


HttpHealthChecksResource_ListMethodPager* ComputeService::HttpHealthChecksResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<HttpHealthChecksResource_ListMethod, HttpHealthCheckList>(new HttpHealthChecksResource_ListMethod(service_, _credential_, project));
}


HttpHealthChecksResource_PatchMethod* ComputeService::HttpHealthChecksResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& http_health_check, const HttpHealthCheck& __request_content__) const {
  return new HttpHealthChecksResource_PatchMethod(service_, _credential_, project, http_health_check, __request_content__);
}


HttpHealthChecksResource_UpdateMethod* ComputeService::HttpHealthChecksResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& http_health_check, const HttpHealthCheck& __request_content__) const {
  return new HttpHealthChecksResource_UpdateMethod(service_, _credential_, project, http_health_check, __request_content__);
}

ComputeService::HttpsHealthChecksResource::HttpsHealthChecksResource(ComputeService* service)
  : service_(service) {
}



HttpsHealthChecksResource_DeleteMethod* ComputeService::HttpsHealthChecksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& https_health_check) const {
  return new HttpsHealthChecksResource_DeleteMethod(service_, _credential_, project, https_health_check);
}


HttpsHealthChecksResource_GetMethod* ComputeService::HttpsHealthChecksResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& https_health_check) const {
  return new HttpsHealthChecksResource_GetMethod(service_, _credential_, project, https_health_check);
}


HttpsHealthChecksResource_InsertMethod* ComputeService::HttpsHealthChecksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const HttpsHealthCheck& __request_content__) const {
  return new HttpsHealthChecksResource_InsertMethod(service_, _credential_, project, __request_content__);
}


HttpsHealthChecksResource_ListMethod* ComputeService::HttpsHealthChecksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new HttpsHealthChecksResource_ListMethod(service_, _credential_, project);
}


HttpsHealthChecksResource_ListMethodPager* ComputeService::HttpsHealthChecksResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<HttpsHealthChecksResource_ListMethod, HttpsHealthCheckList>(new HttpsHealthChecksResource_ListMethod(service_, _credential_, project));
}


HttpsHealthChecksResource_PatchMethod* ComputeService::HttpsHealthChecksResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& https_health_check, const HttpsHealthCheck& __request_content__) const {
  return new HttpsHealthChecksResource_PatchMethod(service_, _credential_, project, https_health_check, __request_content__);
}


HttpsHealthChecksResource_UpdateMethod* ComputeService::HttpsHealthChecksResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& https_health_check, const HttpsHealthCheck& __request_content__) const {
  return new HttpsHealthChecksResource_UpdateMethod(service_, _credential_, project, https_health_check, __request_content__);
}

ComputeService::ImagesResource::ImagesResource(ComputeService* service)
  : service_(service) {
}



ImagesResource_DeleteMethod* ComputeService::ImagesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& image) const {
  return new ImagesResource_DeleteMethod(service_, _credential_, project, image);
}


ImagesResource_DeprecateMethod* ComputeService::ImagesResource::NewDeprecateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& image, const DeprecationStatus& __request_content__) const {
  return new ImagesResource_DeprecateMethod(service_, _credential_, project, image, __request_content__);
}


ImagesResource_GetMethod* ComputeService::ImagesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& image) const {
  return new ImagesResource_GetMethod(service_, _credential_, project, image);
}


ImagesResource_GetFromFamilyMethod* ComputeService::ImagesResource::NewGetFromFamilyMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& family) const {
  return new ImagesResource_GetFromFamilyMethod(service_, _credential_, project, family);
}


ImagesResource_InsertMethod* ComputeService::ImagesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const Image& __request_content__) const {
  return new ImagesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


ImagesResource_ListMethod* ComputeService::ImagesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new ImagesResource_ListMethod(service_, _credential_, project);
}


ImagesResource_ListMethodPager* ComputeService::ImagesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<ImagesResource_ListMethod, ImageList>(new ImagesResource_ListMethod(service_, _credential_, project));
}

ComputeService::InstanceGroupManagersResource::InstanceGroupManagersResource(ComputeService* service)
  : service_(service) {
}



InstanceGroupManagersResource_AbandonInstancesMethod* ComputeService::InstanceGroupManagersResource::NewAbandonInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersAbandonInstancesRequest& __request_content__) const {
  return new InstanceGroupManagersResource_AbandonInstancesMethod(service_, _credential_, project, zone, instance_group_manager, __request_content__);
}


InstanceGroupManagersResource_AggregatedListMethod* ComputeService::InstanceGroupManagersResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new InstanceGroupManagersResource_AggregatedListMethod(service_, _credential_, project);
}


InstanceGroupManagersResource_AggregatedListMethodPager* ComputeService::InstanceGroupManagersResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<InstanceGroupManagersResource_AggregatedListMethod, InstanceGroupManagerAggregatedList>(new InstanceGroupManagersResource_AggregatedListMethod(service_, _credential_, project));
}


InstanceGroupManagersResource_DeleteMethod* ComputeService::InstanceGroupManagersResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager) const {
  return new InstanceGroupManagersResource_DeleteMethod(service_, _credential_, project, zone, instance_group_manager);
}


InstanceGroupManagersResource_DeleteInstancesMethod* ComputeService::InstanceGroupManagersResource::NewDeleteInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersDeleteInstancesRequest& __request_content__) const {
  return new InstanceGroupManagersResource_DeleteInstancesMethod(service_, _credential_, project, zone, instance_group_manager, __request_content__);
}


InstanceGroupManagersResource_GetMethod* ComputeService::InstanceGroupManagersResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager) const {
  return new InstanceGroupManagersResource_GetMethod(service_, _credential_, project, zone, instance_group_manager);
}


InstanceGroupManagersResource_InsertMethod* ComputeService::InstanceGroupManagersResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const InstanceGroupManager& __request_content__) const {
  return new InstanceGroupManagersResource_InsertMethod(service_, _credential_, project, zone, __request_content__);
}


InstanceGroupManagersResource_ListMethod* ComputeService::InstanceGroupManagersResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new InstanceGroupManagersResource_ListMethod(service_, _credential_, project, zone);
}


InstanceGroupManagersResource_ListMethodPager* ComputeService::InstanceGroupManagersResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new client::EncapsulatedServiceRequestPager<InstanceGroupManagersResource_ListMethod, InstanceGroupManagerList>(new InstanceGroupManagersResource_ListMethod(service_, _credential_, project, zone));
}


InstanceGroupManagersResource_ListManagedInstancesMethod* ComputeService::InstanceGroupManagersResource::NewListManagedInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager) const {
  return new InstanceGroupManagersResource_ListManagedInstancesMethod(service_, _credential_, project, zone, instance_group_manager);
}


InstanceGroupManagersResource_RecreateInstancesMethod* ComputeService::InstanceGroupManagersResource::NewRecreateInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersRecreateInstancesRequest& __request_content__) const {
  return new InstanceGroupManagersResource_RecreateInstancesMethod(service_, _credential_, project, zone, instance_group_manager, __request_content__);
}


InstanceGroupManagersResource_ResizeMethod* ComputeService::InstanceGroupManagersResource::NewResizeMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const int32& size) const {
  return new InstanceGroupManagersResource_ResizeMethod(service_, _credential_, project, zone, instance_group_manager, size);
}


InstanceGroupManagersResource_SetInstanceTemplateMethod* ComputeService::InstanceGroupManagersResource::NewSetInstanceTemplateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersSetInstanceTemplateRequest& __request_content__) const {
  return new InstanceGroupManagersResource_SetInstanceTemplateMethod(service_, _credential_, project, zone, instance_group_manager, __request_content__);
}


InstanceGroupManagersResource_SetTargetPoolsMethod* ComputeService::InstanceGroupManagersResource::NewSetTargetPoolsMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group_manager, const InstanceGroupManagersSetTargetPoolsRequest& __request_content__) const {
  return new InstanceGroupManagersResource_SetTargetPoolsMethod(service_, _credential_, project, zone, instance_group_manager, __request_content__);
}

ComputeService::InstanceGroupsResource::InstanceGroupsResource(ComputeService* service)
  : service_(service) {
}



InstanceGroupsResource_AddInstancesMethod* ComputeService::InstanceGroupsResource::NewAddInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group, const InstanceGroupsAddInstancesRequest& __request_content__) const {
  return new InstanceGroupsResource_AddInstancesMethod(service_, _credential_, project, zone, instance_group, __request_content__);
}


InstanceGroupsResource_AggregatedListMethod* ComputeService::InstanceGroupsResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new InstanceGroupsResource_AggregatedListMethod(service_, _credential_, project);
}


InstanceGroupsResource_AggregatedListMethodPager* ComputeService::InstanceGroupsResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<InstanceGroupsResource_AggregatedListMethod, InstanceGroupAggregatedList>(new InstanceGroupsResource_AggregatedListMethod(service_, _credential_, project));
}


InstanceGroupsResource_DeleteMethod* ComputeService::InstanceGroupsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group) const {
  return new InstanceGroupsResource_DeleteMethod(service_, _credential_, project, zone, instance_group);
}


InstanceGroupsResource_GetMethod* ComputeService::InstanceGroupsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group) const {
  return new InstanceGroupsResource_GetMethod(service_, _credential_, project, zone, instance_group);
}


InstanceGroupsResource_InsertMethod* ComputeService::InstanceGroupsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const InstanceGroup& __request_content__) const {
  return new InstanceGroupsResource_InsertMethod(service_, _credential_, project, zone, __request_content__);
}


InstanceGroupsResource_ListMethod* ComputeService::InstanceGroupsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new InstanceGroupsResource_ListMethod(service_, _credential_, project, zone);
}


InstanceGroupsResource_ListMethodPager* ComputeService::InstanceGroupsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new client::EncapsulatedServiceRequestPager<InstanceGroupsResource_ListMethod, InstanceGroupList>(new InstanceGroupsResource_ListMethod(service_, _credential_, project, zone));
}


InstanceGroupsResource_ListInstancesMethod* ComputeService::InstanceGroupsResource::NewListInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group, const InstanceGroupsListInstancesRequest& __request_content__) const {
  return new InstanceGroupsResource_ListInstancesMethod(service_, _credential_, project, zone, instance_group, __request_content__);
}


InstanceGroupsResource_ListInstancesMethodPager* ComputeService::InstanceGroupsResource::NewListInstancesMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group, const InstanceGroupsListInstancesRequest& __request_content__) const {
  return new client::EncapsulatedServiceRequestPager<InstanceGroupsResource_ListInstancesMethod, InstanceGroupsListInstances>(new InstanceGroupsResource_ListInstancesMethod(service_, _credential_, project, zone, instance_group, __request_content__));
}


InstanceGroupsResource_RemoveInstancesMethod* ComputeService::InstanceGroupsResource::NewRemoveInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group, const InstanceGroupsRemoveInstancesRequest& __request_content__) const {
  return new InstanceGroupsResource_RemoveInstancesMethod(service_, _credential_, project, zone, instance_group, __request_content__);
}


InstanceGroupsResource_SetNamedPortsMethod* ComputeService::InstanceGroupsResource::NewSetNamedPortsMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance_group, const InstanceGroupsSetNamedPortsRequest& __request_content__) const {
  return new InstanceGroupsResource_SetNamedPortsMethod(service_, _credential_, project, zone, instance_group, __request_content__);
}

ComputeService::InstanceTemplatesResource::InstanceTemplatesResource(ComputeService* service)
  : service_(service) {
}



InstanceTemplatesResource_DeleteMethod* ComputeService::InstanceTemplatesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& instance_template) const {
  return new InstanceTemplatesResource_DeleteMethod(service_, _credential_, project, instance_template);
}


InstanceTemplatesResource_GetMethod* ComputeService::InstanceTemplatesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& instance_template) const {
  return new InstanceTemplatesResource_GetMethod(service_, _credential_, project, instance_template);
}


InstanceTemplatesResource_InsertMethod* ComputeService::InstanceTemplatesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const InstanceTemplate& __request_content__) const {
  return new InstanceTemplatesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


InstanceTemplatesResource_ListMethod* ComputeService::InstanceTemplatesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new InstanceTemplatesResource_ListMethod(service_, _credential_, project);
}


InstanceTemplatesResource_ListMethodPager* ComputeService::InstanceTemplatesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<InstanceTemplatesResource_ListMethod, InstanceTemplateList>(new InstanceTemplatesResource_ListMethod(service_, _credential_, project));
}

ComputeService::InstancesResource::InstancesResource(ComputeService* service)
  : service_(service) {
}



InstancesResource_AddAccessConfigMethod* ComputeService::InstancesResource::NewAddAccessConfigMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const StringPiece& network_interface, const AccessConfig& __request_content__) const {
  return new InstancesResource_AddAccessConfigMethod(service_, _credential_, project, zone, instance, network_interface, __request_content__);
}


InstancesResource_AggregatedListMethod* ComputeService::InstancesResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new InstancesResource_AggregatedListMethod(service_, _credential_, project);
}


InstancesResource_AggregatedListMethodPager* ComputeService::InstancesResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<InstancesResource_AggregatedListMethod, InstanceAggregatedList>(new InstancesResource_AggregatedListMethod(service_, _credential_, project));
}


InstancesResource_AttachDiskMethod* ComputeService::InstancesResource::NewAttachDiskMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const AttachedDisk& __request_content__) const {
  return new InstancesResource_AttachDiskMethod(service_, _credential_, project, zone, instance, __request_content__);
}


InstancesResource_DeleteMethod* ComputeService::InstancesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance) const {
  return new InstancesResource_DeleteMethod(service_, _credential_, project, zone, instance);
}


InstancesResource_DeleteAccessConfigMethod* ComputeService::InstancesResource::NewDeleteAccessConfigMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const StringPiece& access_config, const StringPiece& network_interface) const {
  return new InstancesResource_DeleteAccessConfigMethod(service_, _credential_, project, zone, instance, access_config, network_interface);
}


InstancesResource_DetachDiskMethod* ComputeService::InstancesResource::NewDetachDiskMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const StringPiece& device_name) const {
  return new InstancesResource_DetachDiskMethod(service_, _credential_, project, zone, instance, device_name);
}


InstancesResource_GetMethod* ComputeService::InstancesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance) const {
  return new InstancesResource_GetMethod(service_, _credential_, project, zone, instance);
}


InstancesResource_GetSerialPortOutputMethod* ComputeService::InstancesResource::NewGetSerialPortOutputMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance) const {
  return new InstancesResource_GetSerialPortOutputMethod(service_, _credential_, project, zone, instance);
}


InstancesResource_InsertMethod* ComputeService::InstancesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const Instance& __request_content__) const {
  return new InstancesResource_InsertMethod(service_, _credential_, project, zone, __request_content__);
}


InstancesResource_ListMethod* ComputeService::InstancesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new InstancesResource_ListMethod(service_, _credential_, project, zone);
}


InstancesResource_ListMethodPager* ComputeService::InstancesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new client::EncapsulatedServiceRequestPager<InstancesResource_ListMethod, InstanceList>(new InstancesResource_ListMethod(service_, _credential_, project, zone));
}


InstancesResource_ResetMethod* ComputeService::InstancesResource::NewResetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance) const {
  return new InstancesResource_ResetMethod(service_, _credential_, project, zone, instance);
}


InstancesResource_SetDiskAutoDeleteMethod* ComputeService::InstancesResource::NewSetDiskAutoDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const bool& auto_delete, const StringPiece& device_name) const {
  return new InstancesResource_SetDiskAutoDeleteMethod(service_, _credential_, project, zone, instance, auto_delete, device_name);
}


InstancesResource_SetMachineTypeMethod* ComputeService::InstancesResource::NewSetMachineTypeMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const InstancesSetMachineTypeRequest& __request_content__) const {
  return new InstancesResource_SetMachineTypeMethod(service_, _credential_, project, zone, instance, __request_content__);
}


InstancesResource_SetMetadataMethod* ComputeService::InstancesResource::NewSetMetadataMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const Metadata& __request_content__) const {
  return new InstancesResource_SetMetadataMethod(service_, _credential_, project, zone, instance, __request_content__);
}


InstancesResource_SetSchedulingMethod* ComputeService::InstancesResource::NewSetSchedulingMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const Scheduling& __request_content__) const {
  return new InstancesResource_SetSchedulingMethod(service_, _credential_, project, zone, instance, __request_content__);
}


InstancesResource_SetServiceAccountMethod* ComputeService::InstancesResource::NewSetServiceAccountMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const InstancesSetServiceAccountRequest& __request_content__) const {
  return new InstancesResource_SetServiceAccountMethod(service_, _credential_, project, zone, instance, __request_content__);
}


InstancesResource_SetTagsMethod* ComputeService::InstancesResource::NewSetTagsMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const Tags& __request_content__) const {
  return new InstancesResource_SetTagsMethod(service_, _credential_, project, zone, instance, __request_content__);
}


InstancesResource_StartMethod* ComputeService::InstancesResource::NewStartMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance) const {
  return new InstancesResource_StartMethod(service_, _credential_, project, zone, instance);
}


InstancesResource_StartWithEncryptionKeyMethod* ComputeService::InstancesResource::NewStartWithEncryptionKeyMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance, const InstancesStartWithEncryptionKeyRequest& __request_content__) const {
  return new InstancesResource_StartWithEncryptionKeyMethod(service_, _credential_, project, zone, instance, __request_content__);
}


InstancesResource_StopMethod* ComputeService::InstancesResource::NewStopMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& instance) const {
  return new InstancesResource_StopMethod(service_, _credential_, project, zone, instance);
}

ComputeService::LicensesResource::LicensesResource(ComputeService* service)
  : service_(service) {
}



LicensesResource_GetMethod* ComputeService::LicensesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& license) const {
  return new LicensesResource_GetMethod(service_, _credential_, project, license);
}

ComputeService::MachineTypesResource::MachineTypesResource(ComputeService* service)
  : service_(service) {
}



MachineTypesResource_AggregatedListMethod* ComputeService::MachineTypesResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new MachineTypesResource_AggregatedListMethod(service_, _credential_, project);
}


MachineTypesResource_AggregatedListMethodPager* ComputeService::MachineTypesResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<MachineTypesResource_AggregatedListMethod, MachineTypeAggregatedList>(new MachineTypesResource_AggregatedListMethod(service_, _credential_, project));
}


MachineTypesResource_GetMethod* ComputeService::MachineTypesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& machine_type) const {
  return new MachineTypesResource_GetMethod(service_, _credential_, project, zone, machine_type);
}


MachineTypesResource_ListMethod* ComputeService::MachineTypesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new MachineTypesResource_ListMethod(service_, _credential_, project, zone);
}


MachineTypesResource_ListMethodPager* ComputeService::MachineTypesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new client::EncapsulatedServiceRequestPager<MachineTypesResource_ListMethod, MachineTypeList>(new MachineTypesResource_ListMethod(service_, _credential_, project, zone));
}

ComputeService::NetworksResource::NetworksResource(ComputeService* service)
  : service_(service) {
}



NetworksResource_DeleteMethod* ComputeService::NetworksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& network) const {
  return new NetworksResource_DeleteMethod(service_, _credential_, project, network);
}


NetworksResource_GetMethod* ComputeService::NetworksResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& network) const {
  return new NetworksResource_GetMethod(service_, _credential_, project, network);
}


NetworksResource_InsertMethod* ComputeService::NetworksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const Network& __request_content__) const {
  return new NetworksResource_InsertMethod(service_, _credential_, project, __request_content__);
}


NetworksResource_ListMethod* ComputeService::NetworksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new NetworksResource_ListMethod(service_, _credential_, project);
}


NetworksResource_ListMethodPager* ComputeService::NetworksResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<NetworksResource_ListMethod, NetworkList>(new NetworksResource_ListMethod(service_, _credential_, project));
}


NetworksResource_SwitchToCustomModeMethod* ComputeService::NetworksResource::NewSwitchToCustomModeMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& network) const {
  return new NetworksResource_SwitchToCustomModeMethod(service_, _credential_, project, network);
}

ComputeService::ProjectsResource::ProjectsResource(ComputeService* service)
  : service_(service) {
}



ProjectsResource_GetMethod* ComputeService::ProjectsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new ProjectsResource_GetMethod(service_, _credential_, project);
}


ProjectsResource_MoveDiskMethod* ComputeService::ProjectsResource::NewMoveDiskMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const DiskMoveRequest& __request_content__) const {
  return new ProjectsResource_MoveDiskMethod(service_, _credential_, project, __request_content__);
}


ProjectsResource_MoveInstanceMethod* ComputeService::ProjectsResource::NewMoveInstanceMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const InstanceMoveRequest& __request_content__) const {
  return new ProjectsResource_MoveInstanceMethod(service_, _credential_, project, __request_content__);
}


ProjectsResource_SetCommonInstanceMetadataMethod* ComputeService::ProjectsResource::NewSetCommonInstanceMetadataMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const Metadata& __request_content__) const {
  return new ProjectsResource_SetCommonInstanceMetadataMethod(service_, _credential_, project, __request_content__);
}


ProjectsResource_SetUsageExportBucketMethod* ComputeService::ProjectsResource::NewSetUsageExportBucketMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const UsageExportLocation& __request_content__) const {
  return new ProjectsResource_SetUsageExportBucketMethod(service_, _credential_, project, __request_content__);
}

ComputeService::RegionAutoscalersResource::RegionAutoscalersResource(ComputeService* service)
  : service_(service) {
}



RegionAutoscalersResource_DeleteMethod* ComputeService::RegionAutoscalersResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& autoscaler) const {
  return new RegionAutoscalersResource_DeleteMethod(service_, _credential_, project, region, autoscaler);
}


RegionAutoscalersResource_GetMethod* ComputeService::RegionAutoscalersResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& autoscaler) const {
  return new RegionAutoscalersResource_GetMethod(service_, _credential_, project, region, autoscaler);
}


RegionAutoscalersResource_InsertMethod* ComputeService::RegionAutoscalersResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Autoscaler& __request_content__) const {
  return new RegionAutoscalersResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


RegionAutoscalersResource_ListMethod* ComputeService::RegionAutoscalersResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new RegionAutoscalersResource_ListMethod(service_, _credential_, project, region);
}


RegionAutoscalersResource_ListMethodPager* ComputeService::RegionAutoscalersResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<RegionAutoscalersResource_ListMethod, RegionAutoscalerList>(new RegionAutoscalersResource_ListMethod(service_, _credential_, project, region));
}


RegionAutoscalersResource_PatchMethod* ComputeService::RegionAutoscalersResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& autoscaler, const Autoscaler& __request_content__) const {
  return new RegionAutoscalersResource_PatchMethod(service_, _credential_, project, region, autoscaler, __request_content__);
}


RegionAutoscalersResource_UpdateMethod* ComputeService::RegionAutoscalersResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Autoscaler& __request_content__) const {
  return new RegionAutoscalersResource_UpdateMethod(service_, _credential_, project, region, __request_content__);
}

ComputeService::RegionBackendServicesResource::RegionBackendServicesResource(ComputeService* service)
  : service_(service) {
}



RegionBackendServicesResource_DeleteMethod* ComputeService::RegionBackendServicesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service) const {
  return new RegionBackendServicesResource_DeleteMethod(service_, _credential_, project, region, backend_service);
}


RegionBackendServicesResource_GetMethod* ComputeService::RegionBackendServicesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service) const {
  return new RegionBackendServicesResource_GetMethod(service_, _credential_, project, region, backend_service);
}


RegionBackendServicesResource_GetHealthMethod* ComputeService::RegionBackendServicesResource::NewGetHealthMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service, const ResourceGroupReference& __request_content__) const {
  return new RegionBackendServicesResource_GetHealthMethod(service_, _credential_, project, region, backend_service, __request_content__);
}


RegionBackendServicesResource_InsertMethod* ComputeService::RegionBackendServicesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const BackendService& __request_content__) const {
  return new RegionBackendServicesResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


RegionBackendServicesResource_ListMethod* ComputeService::RegionBackendServicesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new RegionBackendServicesResource_ListMethod(service_, _credential_, project, region);
}


RegionBackendServicesResource_ListMethodPager* ComputeService::RegionBackendServicesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<RegionBackendServicesResource_ListMethod, BackendServiceList>(new RegionBackendServicesResource_ListMethod(service_, _credential_, project, region));
}


RegionBackendServicesResource_PatchMethod* ComputeService::RegionBackendServicesResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service, const BackendService& __request_content__) const {
  return new RegionBackendServicesResource_PatchMethod(service_, _credential_, project, region, backend_service, __request_content__);
}


RegionBackendServicesResource_UpdateMethod* ComputeService::RegionBackendServicesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& backend_service, const BackendService& __request_content__) const {
  return new RegionBackendServicesResource_UpdateMethod(service_, _credential_, project, region, backend_service, __request_content__);
}

ComputeService::RegionInstanceGroupManagersResource::RegionInstanceGroupManagersResource(ComputeService* service)
  : service_(service) {
}



RegionInstanceGroupManagersResource_AbandonInstancesMethod* ComputeService::RegionInstanceGroupManagersResource::NewAbandonInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersAbandonInstancesRequest& __request_content__) const {
  return new RegionInstanceGroupManagersResource_AbandonInstancesMethod(service_, _credential_, project, region, instance_group_manager, __request_content__);
}


RegionInstanceGroupManagersResource_DeleteMethod* ComputeService::RegionInstanceGroupManagersResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager) const {
  return new RegionInstanceGroupManagersResource_DeleteMethod(service_, _credential_, project, region, instance_group_manager);
}


RegionInstanceGroupManagersResource_DeleteInstancesMethod* ComputeService::RegionInstanceGroupManagersResource::NewDeleteInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersDeleteInstancesRequest& __request_content__) const {
  return new RegionInstanceGroupManagersResource_DeleteInstancesMethod(service_, _credential_, project, region, instance_group_manager, __request_content__);
}


RegionInstanceGroupManagersResource_GetMethod* ComputeService::RegionInstanceGroupManagersResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager) const {
  return new RegionInstanceGroupManagersResource_GetMethod(service_, _credential_, project, region, instance_group_manager);
}


RegionInstanceGroupManagersResource_InsertMethod* ComputeService::RegionInstanceGroupManagersResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const InstanceGroupManager& __request_content__) const {
  return new RegionInstanceGroupManagersResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


RegionInstanceGroupManagersResource_ListMethod* ComputeService::RegionInstanceGroupManagersResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new RegionInstanceGroupManagersResource_ListMethod(service_, _credential_, project, region);
}


RegionInstanceGroupManagersResource_ListMethodPager* ComputeService::RegionInstanceGroupManagersResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<RegionInstanceGroupManagersResource_ListMethod, RegionInstanceGroupManagerList>(new RegionInstanceGroupManagersResource_ListMethod(service_, _credential_, project, region));
}


RegionInstanceGroupManagersResource_ListManagedInstancesMethod* ComputeService::RegionInstanceGroupManagersResource::NewListManagedInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager) const {
  return new RegionInstanceGroupManagersResource_ListManagedInstancesMethod(service_, _credential_, project, region, instance_group_manager);
}


RegionInstanceGroupManagersResource_RecreateInstancesMethod* ComputeService::RegionInstanceGroupManagersResource::NewRecreateInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersRecreateRequest& __request_content__) const {
  return new RegionInstanceGroupManagersResource_RecreateInstancesMethod(service_, _credential_, project, region, instance_group_manager, __request_content__);
}


RegionInstanceGroupManagersResource_ResizeMethod* ComputeService::RegionInstanceGroupManagersResource::NewResizeMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const int32& size) const {
  return new RegionInstanceGroupManagersResource_ResizeMethod(service_, _credential_, project, region, instance_group_manager, size);
}


RegionInstanceGroupManagersResource_SetInstanceTemplateMethod* ComputeService::RegionInstanceGroupManagersResource::NewSetInstanceTemplateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersSetTemplateRequest& __request_content__) const {
  return new RegionInstanceGroupManagersResource_SetInstanceTemplateMethod(service_, _credential_, project, region, instance_group_manager, __request_content__);
}


RegionInstanceGroupManagersResource_SetTargetPoolsMethod* ComputeService::RegionInstanceGroupManagersResource::NewSetTargetPoolsMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group_manager, const RegionInstanceGroupManagersSetTargetPoolsRequest& __request_content__) const {
  return new RegionInstanceGroupManagersResource_SetTargetPoolsMethod(service_, _credential_, project, region, instance_group_manager, __request_content__);
}

ComputeService::RegionInstanceGroupsResource::RegionInstanceGroupsResource(ComputeService* service)
  : service_(service) {
}



RegionInstanceGroupsResource_GetMethod* ComputeService::RegionInstanceGroupsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group) const {
  return new RegionInstanceGroupsResource_GetMethod(service_, _credential_, project, region, instance_group);
}


RegionInstanceGroupsResource_ListMethod* ComputeService::RegionInstanceGroupsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new RegionInstanceGroupsResource_ListMethod(service_, _credential_, project, region);
}


RegionInstanceGroupsResource_ListMethodPager* ComputeService::RegionInstanceGroupsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<RegionInstanceGroupsResource_ListMethod, RegionInstanceGroupList>(new RegionInstanceGroupsResource_ListMethod(service_, _credential_, project, region));
}


RegionInstanceGroupsResource_ListInstancesMethod* ComputeService::RegionInstanceGroupsResource::NewListInstancesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group, const RegionInstanceGroupsListInstancesRequest& __request_content__) const {
  return new RegionInstanceGroupsResource_ListInstancesMethod(service_, _credential_, project, region, instance_group, __request_content__);
}


RegionInstanceGroupsResource_ListInstancesMethodPager* ComputeService::RegionInstanceGroupsResource::NewListInstancesMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group, const RegionInstanceGroupsListInstancesRequest& __request_content__) const {
  return new client::EncapsulatedServiceRequestPager<RegionInstanceGroupsResource_ListInstancesMethod, RegionInstanceGroupsListInstances>(new RegionInstanceGroupsResource_ListInstancesMethod(service_, _credential_, project, region, instance_group, __request_content__));
}


RegionInstanceGroupsResource_SetNamedPortsMethod* ComputeService::RegionInstanceGroupsResource::NewSetNamedPortsMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& instance_group, const RegionInstanceGroupsSetNamedPortsRequest& __request_content__) const {
  return new RegionInstanceGroupsResource_SetNamedPortsMethod(service_, _credential_, project, region, instance_group, __request_content__);
}

ComputeService::RegionOperationsResource::RegionOperationsResource(ComputeService* service)
  : service_(service) {
}



RegionOperationsResource_DeleteMethod* ComputeService::RegionOperationsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& operation) const {
  return new RegionOperationsResource_DeleteMethod(service_, _credential_, project, region, operation);
}


RegionOperationsResource_GetMethod* ComputeService::RegionOperationsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& operation) const {
  return new RegionOperationsResource_GetMethod(service_, _credential_, project, region, operation);
}


RegionOperationsResource_ListMethod* ComputeService::RegionOperationsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new RegionOperationsResource_ListMethod(service_, _credential_, project, region);
}


RegionOperationsResource_ListMethodPager* ComputeService::RegionOperationsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<RegionOperationsResource_ListMethod, OperationList>(new RegionOperationsResource_ListMethod(service_, _credential_, project, region));
}

ComputeService::RegionsResource::RegionsResource(ComputeService* service)
  : service_(service) {
}



RegionsResource_GetMethod* ComputeService::RegionsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new RegionsResource_GetMethod(service_, _credential_, project, region);
}


RegionsResource_ListMethod* ComputeService::RegionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new RegionsResource_ListMethod(service_, _credential_, project);
}


RegionsResource_ListMethodPager* ComputeService::RegionsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<RegionsResource_ListMethod, RegionList>(new RegionsResource_ListMethod(service_, _credential_, project));
}

ComputeService::RoutersResource::RoutersResource(ComputeService* service)
  : service_(service) {
}



RoutersResource_AggregatedListMethod* ComputeService::RoutersResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new RoutersResource_AggregatedListMethod(service_, _credential_, project);
}


RoutersResource_AggregatedListMethodPager* ComputeService::RoutersResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<RoutersResource_AggregatedListMethod, RouterAggregatedList>(new RoutersResource_AggregatedListMethod(service_, _credential_, project));
}


RoutersResource_DeleteMethod* ComputeService::RoutersResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router) const {
  return new RoutersResource_DeleteMethod(service_, _credential_, project, region, router);
}


RoutersResource_GetMethod* ComputeService::RoutersResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router) const {
  return new RoutersResource_GetMethod(service_, _credential_, project, region, router);
}


RoutersResource_GetRouterStatusMethod* ComputeService::RoutersResource::NewGetRouterStatusMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router) const {
  return new RoutersResource_GetRouterStatusMethod(service_, _credential_, project, region, router);
}


RoutersResource_InsertMethod* ComputeService::RoutersResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Router& __request_content__) const {
  return new RoutersResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


RoutersResource_ListMethod* ComputeService::RoutersResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new RoutersResource_ListMethod(service_, _credential_, project, region);
}


RoutersResource_ListMethodPager* ComputeService::RoutersResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<RoutersResource_ListMethod, RouterList>(new RoutersResource_ListMethod(service_, _credential_, project, region));
}


RoutersResource_PatchMethod* ComputeService::RoutersResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router, const Router& __request_content__) const {
  return new RoutersResource_PatchMethod(service_, _credential_, project, region, router, __request_content__);
}


RoutersResource_PreviewMethod* ComputeService::RoutersResource::NewPreviewMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router, const Router& __request_content__) const {
  return new RoutersResource_PreviewMethod(service_, _credential_, project, region, router, __request_content__);
}


RoutersResource_UpdateMethod* ComputeService::RoutersResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& router, const Router& __request_content__) const {
  return new RoutersResource_UpdateMethod(service_, _credential_, project, region, router, __request_content__);
}

ComputeService::RoutesResource::RoutesResource(ComputeService* service)
  : service_(service) {
}



RoutesResource_DeleteMethod* ComputeService::RoutesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& route) const {
  return new RoutesResource_DeleteMethod(service_, _credential_, project, route);
}


RoutesResource_GetMethod* ComputeService::RoutesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& route) const {
  return new RoutesResource_GetMethod(service_, _credential_, project, route);
}


RoutesResource_InsertMethod* ComputeService::RoutesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const Route& __request_content__) const {
  return new RoutesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


RoutesResource_ListMethod* ComputeService::RoutesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new RoutesResource_ListMethod(service_, _credential_, project);
}


RoutesResource_ListMethodPager* ComputeService::RoutesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<RoutesResource_ListMethod, RouteList>(new RoutesResource_ListMethod(service_, _credential_, project));
}

ComputeService::SnapshotsResource::SnapshotsResource(ComputeService* service)
  : service_(service) {
}



SnapshotsResource_DeleteMethod* ComputeService::SnapshotsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& snapshot) const {
  return new SnapshotsResource_DeleteMethod(service_, _credential_, project, snapshot);
}


SnapshotsResource_GetMethod* ComputeService::SnapshotsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& snapshot) const {
  return new SnapshotsResource_GetMethod(service_, _credential_, project, snapshot);
}


SnapshotsResource_ListMethod* ComputeService::SnapshotsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new SnapshotsResource_ListMethod(service_, _credential_, project);
}


SnapshotsResource_ListMethodPager* ComputeService::SnapshotsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<SnapshotsResource_ListMethod, SnapshotList>(new SnapshotsResource_ListMethod(service_, _credential_, project));
}

ComputeService::SslCertificatesResource::SslCertificatesResource(ComputeService* service)
  : service_(service) {
}



SslCertificatesResource_DeleteMethod* ComputeService::SslCertificatesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& ssl_certificate) const {
  return new SslCertificatesResource_DeleteMethod(service_, _credential_, project, ssl_certificate);
}


SslCertificatesResource_GetMethod* ComputeService::SslCertificatesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& ssl_certificate) const {
  return new SslCertificatesResource_GetMethod(service_, _credential_, project, ssl_certificate);
}


SslCertificatesResource_InsertMethod* ComputeService::SslCertificatesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const SslCertificate& __request_content__) const {
  return new SslCertificatesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


SslCertificatesResource_ListMethod* ComputeService::SslCertificatesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new SslCertificatesResource_ListMethod(service_, _credential_, project);
}


SslCertificatesResource_ListMethodPager* ComputeService::SslCertificatesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<SslCertificatesResource_ListMethod, SslCertificateList>(new SslCertificatesResource_ListMethod(service_, _credential_, project));
}

ComputeService::SubnetworksResource::SubnetworksResource(ComputeService* service)
  : service_(service) {
}



SubnetworksResource_AggregatedListMethod* ComputeService::SubnetworksResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new SubnetworksResource_AggregatedListMethod(service_, _credential_, project);
}


SubnetworksResource_AggregatedListMethodPager* ComputeService::SubnetworksResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<SubnetworksResource_AggregatedListMethod, SubnetworkAggregatedList>(new SubnetworksResource_AggregatedListMethod(service_, _credential_, project));
}


SubnetworksResource_DeleteMethod* ComputeService::SubnetworksResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& subnetwork) const {
  return new SubnetworksResource_DeleteMethod(service_, _credential_, project, region, subnetwork);
}


SubnetworksResource_ExpandIpCidrRangeMethod* ComputeService::SubnetworksResource::NewExpandIpCidrRangeMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& subnetwork, const SubnetworksExpandIpCidrRangeRequest& __request_content__) const {
  return new SubnetworksResource_ExpandIpCidrRangeMethod(service_, _credential_, project, region, subnetwork, __request_content__);
}


SubnetworksResource_GetMethod* ComputeService::SubnetworksResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& subnetwork) const {
  return new SubnetworksResource_GetMethod(service_, _credential_, project, region, subnetwork);
}


SubnetworksResource_InsertMethod* ComputeService::SubnetworksResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const Subnetwork& __request_content__) const {
  return new SubnetworksResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


SubnetworksResource_ListMethod* ComputeService::SubnetworksResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new SubnetworksResource_ListMethod(service_, _credential_, project, region);
}


SubnetworksResource_ListMethodPager* ComputeService::SubnetworksResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<SubnetworksResource_ListMethod, SubnetworkList>(new SubnetworksResource_ListMethod(service_, _credential_, project, region));
}

ComputeService::TargetHttpProxiesResource::TargetHttpProxiesResource(ComputeService* service)
  : service_(service) {
}



TargetHttpProxiesResource_DeleteMethod* ComputeService::TargetHttpProxiesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_http_proxy) const {
  return new TargetHttpProxiesResource_DeleteMethod(service_, _credential_, project, target_http_proxy);
}


TargetHttpProxiesResource_GetMethod* ComputeService::TargetHttpProxiesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_http_proxy) const {
  return new TargetHttpProxiesResource_GetMethod(service_, _credential_, project, target_http_proxy);
}


TargetHttpProxiesResource_InsertMethod* ComputeService::TargetHttpProxiesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const TargetHttpProxy& __request_content__) const {
  return new TargetHttpProxiesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


TargetHttpProxiesResource_ListMethod* ComputeService::TargetHttpProxiesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new TargetHttpProxiesResource_ListMethod(service_, _credential_, project);
}


TargetHttpProxiesResource_ListMethodPager* ComputeService::TargetHttpProxiesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<TargetHttpProxiesResource_ListMethod, TargetHttpProxyList>(new TargetHttpProxiesResource_ListMethod(service_, _credential_, project));
}


TargetHttpProxiesResource_SetUrlMapMethod* ComputeService::TargetHttpProxiesResource::NewSetUrlMapMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_http_proxy, const UrlMapReference& __request_content__) const {
  return new TargetHttpProxiesResource_SetUrlMapMethod(service_, _credential_, project, target_http_proxy, __request_content__);
}

ComputeService::TargetHttpsProxiesResource::TargetHttpsProxiesResource(ComputeService* service)
  : service_(service) {
}



TargetHttpsProxiesResource_DeleteMethod* ComputeService::TargetHttpsProxiesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_https_proxy) const {
  return new TargetHttpsProxiesResource_DeleteMethod(service_, _credential_, project, target_https_proxy);
}


TargetHttpsProxiesResource_GetMethod* ComputeService::TargetHttpsProxiesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_https_proxy) const {
  return new TargetHttpsProxiesResource_GetMethod(service_, _credential_, project, target_https_proxy);
}


TargetHttpsProxiesResource_InsertMethod* ComputeService::TargetHttpsProxiesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const TargetHttpsProxy& __request_content__) const {
  return new TargetHttpsProxiesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


TargetHttpsProxiesResource_ListMethod* ComputeService::TargetHttpsProxiesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new TargetHttpsProxiesResource_ListMethod(service_, _credential_, project);
}


TargetHttpsProxiesResource_ListMethodPager* ComputeService::TargetHttpsProxiesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<TargetHttpsProxiesResource_ListMethod, TargetHttpsProxyList>(new TargetHttpsProxiesResource_ListMethod(service_, _credential_, project));
}


TargetHttpsProxiesResource_SetSslCertificatesMethod* ComputeService::TargetHttpsProxiesResource::NewSetSslCertificatesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_https_proxy, const TargetHttpsProxiesSetSslCertificatesRequest& __request_content__) const {
  return new TargetHttpsProxiesResource_SetSslCertificatesMethod(service_, _credential_, project, target_https_proxy, __request_content__);
}


TargetHttpsProxiesResource_SetUrlMapMethod* ComputeService::TargetHttpsProxiesResource::NewSetUrlMapMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_https_proxy, const UrlMapReference& __request_content__) const {
  return new TargetHttpsProxiesResource_SetUrlMapMethod(service_, _credential_, project, target_https_proxy, __request_content__);
}

ComputeService::TargetInstancesResource::TargetInstancesResource(ComputeService* service)
  : service_(service) {
}



TargetInstancesResource_AggregatedListMethod* ComputeService::TargetInstancesResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new TargetInstancesResource_AggregatedListMethod(service_, _credential_, project);
}


TargetInstancesResource_AggregatedListMethodPager* ComputeService::TargetInstancesResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<TargetInstancesResource_AggregatedListMethod, TargetInstanceAggregatedList>(new TargetInstancesResource_AggregatedListMethod(service_, _credential_, project));
}


TargetInstancesResource_DeleteMethod* ComputeService::TargetInstancesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& target_instance) const {
  return new TargetInstancesResource_DeleteMethod(service_, _credential_, project, zone, target_instance);
}


TargetInstancesResource_GetMethod* ComputeService::TargetInstancesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& target_instance) const {
  return new TargetInstancesResource_GetMethod(service_, _credential_, project, zone, target_instance);
}


TargetInstancesResource_InsertMethod* ComputeService::TargetInstancesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const TargetInstance& __request_content__) const {
  return new TargetInstancesResource_InsertMethod(service_, _credential_, project, zone, __request_content__);
}


TargetInstancesResource_ListMethod* ComputeService::TargetInstancesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new TargetInstancesResource_ListMethod(service_, _credential_, project, zone);
}


TargetInstancesResource_ListMethodPager* ComputeService::TargetInstancesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new client::EncapsulatedServiceRequestPager<TargetInstancesResource_ListMethod, TargetInstanceList>(new TargetInstancesResource_ListMethod(service_, _credential_, project, zone));
}

ComputeService::TargetPoolsResource::TargetPoolsResource(ComputeService* service)
  : service_(service) {
}



TargetPoolsResource_AddHealthCheckMethod* ComputeService::TargetPoolsResource::NewAddHealthCheckMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetPoolsAddHealthCheckRequest& __request_content__) const {
  return new TargetPoolsResource_AddHealthCheckMethod(service_, _credential_, project, region, target_pool, __request_content__);
}


TargetPoolsResource_AddInstanceMethod* ComputeService::TargetPoolsResource::NewAddInstanceMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetPoolsAddInstanceRequest& __request_content__) const {
  return new TargetPoolsResource_AddInstanceMethod(service_, _credential_, project, region, target_pool, __request_content__);
}


TargetPoolsResource_AggregatedListMethod* ComputeService::TargetPoolsResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new TargetPoolsResource_AggregatedListMethod(service_, _credential_, project);
}


TargetPoolsResource_AggregatedListMethodPager* ComputeService::TargetPoolsResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<TargetPoolsResource_AggregatedListMethod, TargetPoolAggregatedList>(new TargetPoolsResource_AggregatedListMethod(service_, _credential_, project));
}


TargetPoolsResource_DeleteMethod* ComputeService::TargetPoolsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool) const {
  return new TargetPoolsResource_DeleteMethod(service_, _credential_, project, region, target_pool);
}


TargetPoolsResource_GetMethod* ComputeService::TargetPoolsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool) const {
  return new TargetPoolsResource_GetMethod(service_, _credential_, project, region, target_pool);
}


TargetPoolsResource_GetHealthMethod* ComputeService::TargetPoolsResource::NewGetHealthMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const InstanceReference& __request_content__) const {
  return new TargetPoolsResource_GetHealthMethod(service_, _credential_, project, region, target_pool, __request_content__);
}


TargetPoolsResource_InsertMethod* ComputeService::TargetPoolsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const TargetPool& __request_content__) const {
  return new TargetPoolsResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


TargetPoolsResource_ListMethod* ComputeService::TargetPoolsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new TargetPoolsResource_ListMethod(service_, _credential_, project, region);
}


TargetPoolsResource_ListMethodPager* ComputeService::TargetPoolsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<TargetPoolsResource_ListMethod, TargetPoolList>(new TargetPoolsResource_ListMethod(service_, _credential_, project, region));
}


TargetPoolsResource_RemoveHealthCheckMethod* ComputeService::TargetPoolsResource::NewRemoveHealthCheckMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetPoolsRemoveHealthCheckRequest& __request_content__) const {
  return new TargetPoolsResource_RemoveHealthCheckMethod(service_, _credential_, project, region, target_pool, __request_content__);
}


TargetPoolsResource_RemoveInstanceMethod* ComputeService::TargetPoolsResource::NewRemoveInstanceMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetPoolsRemoveInstanceRequest& __request_content__) const {
  return new TargetPoolsResource_RemoveInstanceMethod(service_, _credential_, project, region, target_pool, __request_content__);
}


TargetPoolsResource_SetBackupMethod* ComputeService::TargetPoolsResource::NewSetBackupMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_pool, const TargetReference& __request_content__) const {
  return new TargetPoolsResource_SetBackupMethod(service_, _credential_, project, region, target_pool, __request_content__);
}

ComputeService::TargetSslProxiesResource::TargetSslProxiesResource(ComputeService* service)
  : service_(service) {
}



TargetSslProxiesResource_DeleteMethod* ComputeService::TargetSslProxiesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy) const {
  return new TargetSslProxiesResource_DeleteMethod(service_, _credential_, project, target_ssl_proxy);
}


TargetSslProxiesResource_GetMethod* ComputeService::TargetSslProxiesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy) const {
  return new TargetSslProxiesResource_GetMethod(service_, _credential_, project, target_ssl_proxy);
}


TargetSslProxiesResource_InsertMethod* ComputeService::TargetSslProxiesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const TargetSslProxy& __request_content__) const {
  return new TargetSslProxiesResource_InsertMethod(service_, _credential_, project, __request_content__);
}


TargetSslProxiesResource_ListMethod* ComputeService::TargetSslProxiesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new TargetSslProxiesResource_ListMethod(service_, _credential_, project);
}


TargetSslProxiesResource_ListMethodPager* ComputeService::TargetSslProxiesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<TargetSslProxiesResource_ListMethod, TargetSslProxyList>(new TargetSslProxiesResource_ListMethod(service_, _credential_, project));
}


TargetSslProxiesResource_SetBackendServiceMethod* ComputeService::TargetSslProxiesResource::NewSetBackendServiceMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy, const TargetSslProxiesSetBackendServiceRequest& __request_content__) const {
  return new TargetSslProxiesResource_SetBackendServiceMethod(service_, _credential_, project, target_ssl_proxy, __request_content__);
}


TargetSslProxiesResource_SetProxyHeaderMethod* ComputeService::TargetSslProxiesResource::NewSetProxyHeaderMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy, const TargetSslProxiesSetProxyHeaderRequest& __request_content__) const {
  return new TargetSslProxiesResource_SetProxyHeaderMethod(service_, _credential_, project, target_ssl_proxy, __request_content__);
}


TargetSslProxiesResource_SetSslCertificatesMethod* ComputeService::TargetSslProxiesResource::NewSetSslCertificatesMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& target_ssl_proxy, const TargetSslProxiesSetSslCertificatesRequest& __request_content__) const {
  return new TargetSslProxiesResource_SetSslCertificatesMethod(service_, _credential_, project, target_ssl_proxy, __request_content__);
}

ComputeService::TargetVpnGatewaysResource::TargetVpnGatewaysResource(ComputeService* service)
  : service_(service) {
}



TargetVpnGatewaysResource_AggregatedListMethod* ComputeService::TargetVpnGatewaysResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new TargetVpnGatewaysResource_AggregatedListMethod(service_, _credential_, project);
}


TargetVpnGatewaysResource_AggregatedListMethodPager* ComputeService::TargetVpnGatewaysResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<TargetVpnGatewaysResource_AggregatedListMethod, TargetVpnGatewayAggregatedList>(new TargetVpnGatewaysResource_AggregatedListMethod(service_, _credential_, project));
}


TargetVpnGatewaysResource_DeleteMethod* ComputeService::TargetVpnGatewaysResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_vpn_gateway) const {
  return new TargetVpnGatewaysResource_DeleteMethod(service_, _credential_, project, region, target_vpn_gateway);
}


TargetVpnGatewaysResource_GetMethod* ComputeService::TargetVpnGatewaysResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& target_vpn_gateway) const {
  return new TargetVpnGatewaysResource_GetMethod(service_, _credential_, project, region, target_vpn_gateway);
}


TargetVpnGatewaysResource_InsertMethod* ComputeService::TargetVpnGatewaysResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const TargetVpnGateway& __request_content__) const {
  return new TargetVpnGatewaysResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


TargetVpnGatewaysResource_ListMethod* ComputeService::TargetVpnGatewaysResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new TargetVpnGatewaysResource_ListMethod(service_, _credential_, project, region);
}


TargetVpnGatewaysResource_ListMethodPager* ComputeService::TargetVpnGatewaysResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<TargetVpnGatewaysResource_ListMethod, TargetVpnGatewayList>(new TargetVpnGatewaysResource_ListMethod(service_, _credential_, project, region));
}

ComputeService::UrlMapsResource::UrlMapsResource(ComputeService* service)
  : service_(service) {
}



UrlMapsResource_DeleteMethod* ComputeService::UrlMapsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map) const {
  return new UrlMapsResource_DeleteMethod(service_, _credential_, project, url_map);
}


UrlMapsResource_GetMethod* ComputeService::UrlMapsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map) const {
  return new UrlMapsResource_GetMethod(service_, _credential_, project, url_map);
}


UrlMapsResource_InsertMethod* ComputeService::UrlMapsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const UrlMap& __request_content__) const {
  return new UrlMapsResource_InsertMethod(service_, _credential_, project, __request_content__);
}


UrlMapsResource_InvalidateCacheMethod* ComputeService::UrlMapsResource::NewInvalidateCacheMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map, const CacheInvalidationRule& __request_content__) const {
  return new UrlMapsResource_InvalidateCacheMethod(service_, _credential_, project, url_map, __request_content__);
}


UrlMapsResource_ListMethod* ComputeService::UrlMapsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new UrlMapsResource_ListMethod(service_, _credential_, project);
}


UrlMapsResource_ListMethodPager* ComputeService::UrlMapsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<UrlMapsResource_ListMethod, UrlMapList>(new UrlMapsResource_ListMethod(service_, _credential_, project));
}


UrlMapsResource_PatchMethod* ComputeService::UrlMapsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map, const UrlMap& __request_content__) const {
  return new UrlMapsResource_PatchMethod(service_, _credential_, project, url_map, __request_content__);
}


UrlMapsResource_UpdateMethod* ComputeService::UrlMapsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map, const UrlMap& __request_content__) const {
  return new UrlMapsResource_UpdateMethod(service_, _credential_, project, url_map, __request_content__);
}


UrlMapsResource_ValidateMethod* ComputeService::UrlMapsResource::NewValidateMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& url_map, const UrlMapsValidateRequest& __request_content__) const {
  return new UrlMapsResource_ValidateMethod(service_, _credential_, project, url_map, __request_content__);
}

ComputeService::VpnTunnelsResource::VpnTunnelsResource(ComputeService* service)
  : service_(service) {
}



VpnTunnelsResource_AggregatedListMethod* ComputeService::VpnTunnelsResource::NewAggregatedListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new VpnTunnelsResource_AggregatedListMethod(service_, _credential_, project);
}


VpnTunnelsResource_AggregatedListMethodPager* ComputeService::VpnTunnelsResource::NewAggregatedListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<VpnTunnelsResource_AggregatedListMethod, VpnTunnelAggregatedList>(new VpnTunnelsResource_AggregatedListMethod(service_, _credential_, project));
}


VpnTunnelsResource_DeleteMethod* ComputeService::VpnTunnelsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& vpn_tunnel) const {
  return new VpnTunnelsResource_DeleteMethod(service_, _credential_, project, region, vpn_tunnel);
}


VpnTunnelsResource_GetMethod* ComputeService::VpnTunnelsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const StringPiece& vpn_tunnel) const {
  return new VpnTunnelsResource_GetMethod(service_, _credential_, project, region, vpn_tunnel);
}


VpnTunnelsResource_InsertMethod* ComputeService::VpnTunnelsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region, const VpnTunnel& __request_content__) const {
  return new VpnTunnelsResource_InsertMethod(service_, _credential_, project, region, __request_content__);
}


VpnTunnelsResource_ListMethod* ComputeService::VpnTunnelsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new VpnTunnelsResource_ListMethod(service_, _credential_, project, region);
}


VpnTunnelsResource_ListMethodPager* ComputeService::VpnTunnelsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& region) const {
  return new client::EncapsulatedServiceRequestPager<VpnTunnelsResource_ListMethod, VpnTunnelList>(new VpnTunnelsResource_ListMethod(service_, _credential_, project, region));
}

ComputeService::ZoneOperationsResource::ZoneOperationsResource(ComputeService* service)
  : service_(service) {
}



ZoneOperationsResource_DeleteMethod* ComputeService::ZoneOperationsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& operation) const {
  return new ZoneOperationsResource_DeleteMethod(service_, _credential_, project, zone, operation);
}


ZoneOperationsResource_GetMethod* ComputeService::ZoneOperationsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone, const StringPiece& operation) const {
  return new ZoneOperationsResource_GetMethod(service_, _credential_, project, zone, operation);
}


ZoneOperationsResource_ListMethod* ComputeService::ZoneOperationsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new ZoneOperationsResource_ListMethod(service_, _credential_, project, zone);
}


ZoneOperationsResource_ListMethodPager* ComputeService::ZoneOperationsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new client::EncapsulatedServiceRequestPager<ZoneOperationsResource_ListMethod, OperationList>(new ZoneOperationsResource_ListMethod(service_, _credential_, project, zone));
}

ComputeService::ZonesResource::ZonesResource(ComputeService* service)
  : service_(service) {
}



ZonesResource_GetMethod* ComputeService::ZonesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& project, const StringPiece& zone) const {
  return new ZonesResource_GetMethod(service_, _credential_, project, zone);
}


ZonesResource_ListMethod* ComputeService::ZonesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new ZonesResource_ListMethod(service_, _credential_, project);
}


ZonesResource_ListMethodPager* ComputeService::ZonesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<ZonesResource_ListMethod, ZoneList>(new ZonesResource_ListMethod(service_, _credential_, project));
}
}  // namespace google_compute_api
