// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_INSTANCE_H_
#define  GOOGLE_COMPUTE_API_INSTANCE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/attached_disk.h"
#include "google/compute_api/metadata.h"
#include "google/compute_api/network_interface.h"
#include "google/compute_api/scheduling.h"
#include "google/compute_api/service_account.h"
#include "google/compute_api/tags.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * An Instance resource.
 *
 * @ingroup DataObject
 */
class Instance : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Instance* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Instance(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Instance(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Instance();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::Instance</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::Instance");
  }

  /**
   * Determine if the '<code>canIpForward</code>' attribute was set.
   *
   * @return true if the '<code>canIpForward</code>' attribute was set.
   */
  bool has_can_ip_forward() const {
    return Storage().isMember("canIpForward");
  }

  /**
   * Clears the '<code>canIpForward</code>' attribute.
   */
  void clear_can_ip_forward() {
    MutableStorage()->removeMember("canIpForward");
  }


  /**
   * Get the value of the '<code>canIpForward</code>' attribute.
   */
  bool get_can_ip_forward() const {
    const Json::Value& storage = Storage("canIpForward");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>canIpForward</code>' attribute.
   *
   * Allows this instance to send and receive packets with non-matching
   * destination or source IPs. This is required if you plan to use this
   * instance to forward routes. For more information, see Enabling IP
   * Forwarding.
   *
   * @param[in] value The new value.
   */
  void set_can_ip_forward(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("canIpForward"));
  }

  /**
   * Determine if the '<code>cpuPlatform</code>' attribute was set.
   *
   * @return true if the '<code>cpuPlatform</code>' attribute was set.
   */
  bool has_cpu_platform() const {
    return Storage().isMember("cpuPlatform");
  }

  /**
   * Clears the '<code>cpuPlatform</code>' attribute.
   */
  void clear_cpu_platform() {
    MutableStorage()->removeMember("cpuPlatform");
  }


  /**
   * Get the value of the '<code>cpuPlatform</code>' attribute.
   */
  const StringPiece get_cpu_platform() const {
    const Json::Value& v = Storage("cpuPlatform");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cpuPlatform</code>' attribute.
   *
   * [Output Only] The CPU platform used by this instance.
   *
   * @param[in] value The new value.
   */
  void set_cpu_platform(const StringPiece& value) {
    *MutableStorage("cpuPlatform") = value.data();
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>disks</code>' attribute was set.
   *
   * @return true if the '<code>disks</code>' attribute was set.
   */
  bool has_disks() const {
    return Storage().isMember("disks");
  }

  /**
   * Clears the '<code>disks</code>' attribute.
   */
  void clear_disks() {
    MutableStorage()->removeMember("disks");
  }


  /**
   * Get a reference to the value of the '<code>disks</code>' attribute.
   */
  const client::JsonCppArray<AttachedDisk > get_disks() const;

  /**
   * Gets a reference to a mutable value of the '<code>disks</code>' property.
   *
   * Array of disks associated with this instance. Persistent disks must be
   * created before you can assign them.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<AttachedDisk > mutable_disks();

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of the resource. Always compute#instance for instances.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>machineType</code>' attribute was set.
   *
   * @return true if the '<code>machineType</code>' attribute was set.
   */
  bool has_machine_type() const {
    return Storage().isMember("machineType");
  }

  /**
   * Clears the '<code>machineType</code>' attribute.
   */
  void clear_machine_type() {
    MutableStorage()->removeMember("machineType");
  }


  /**
   * Get the value of the '<code>machineType</code>' attribute.
   */
  const StringPiece get_machine_type() const {
    const Json::Value& v = Storage("machineType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>machineType</code>' attribute.
   *
   * Full or partial URL of the machine type resource to use for this instance,
   * in the format: zones/zone/machineTypes/machine-type. This is provided by
   * the client when the instance is created. For example, the following is a
   * valid partial url to a predefined machine type:
   *
   * zones/us-central1-f/machineTypes/n1-standard-1
   *
   * <dl>
   * <dt>MB)
   * <dd>zones/zone/machineTypes/custom-CPUS-MEMORY.
   * <dt>example
   * <dd>zones/us-central1-f/machineTypes/custom-4-5120.
   * </dl>
   *
   *
   * @param[in] value The new value.
   */
  void set_machine_type(const StringPiece& value) {
    *MutableStorage("machineType") = value.data();
  }

  /**
   * Determine if the '<code>metadata</code>' attribute was set.
   *
   * @return true if the '<code>metadata</code>' attribute was set.
   */
  bool has_metadata() const {
    return Storage().isMember("metadata");
  }

  /**
   * Clears the '<code>metadata</code>' attribute.
   */
  void clear_metadata() {
    MutableStorage()->removeMember("metadata");
  }


  /**
   * Get a reference to the value of the '<code>metadata</code>' attribute.
   */
  const Metadata get_metadata() const;

  /**
   * Gets a reference to a mutable value of the '<code>metadata</code>'
   * property.
   *
   * The metadata key/value pairs assigned to this instance. This includes
   * custom metadata and predefined keys.
   *
   * @return The result can be modified to change the attribute value.
   */
  Metadata mutable_metadata();

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * The name of the resource, provided by the client when initially creating
   * the resource. The resource name must be 1-63 characters long, and comply
   * with RFC1035. Specifically, the name must be 1-63 characters long and match
   * the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first
   * character must be a lowercase letter, and all following characters must be
   * a dash, lowercase letter, or digit, except the last character, which cannot
   * be a dash.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>networkInterfaces</code>' attribute was set.
   *
   * @return true if the '<code>networkInterfaces</code>' attribute was set.
   */
  bool has_network_interfaces() const {
    return Storage().isMember("networkInterfaces");
  }

  /**
   * Clears the '<code>networkInterfaces</code>' attribute.
   */
  void clear_network_interfaces() {
    MutableStorage()->removeMember("networkInterfaces");
  }


  /**
   * Get a reference to the value of the '<code>networkInterfaces</code>'
   * attribute.
   */
  const client::JsonCppArray<NetworkInterface > get_network_interfaces() const {
    const Json::Value& storage = Storage("networkInterfaces");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<NetworkInterface>>(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>networkInterfaces</code>'
   * property.
   *
   * An array of configurations for this interface. This specifies how this
   * interface is configured to interact with other network services, such as
   * connecting to the internet. Only one interface is supported per instance.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<NetworkInterface > mutable_networkInterfaces();

  /**
   * Determine if the '<code>scheduling</code>' attribute was set.
   *
   * @return true if the '<code>scheduling</code>' attribute was set.
   */
  bool has_scheduling() const {
    return Storage().isMember("scheduling");
  }

  /**
   * Clears the '<code>scheduling</code>' attribute.
   */
  void clear_scheduling() {
    MutableStorage()->removeMember("scheduling");
  }


  /**
   * Get a reference to the value of the '<code>scheduling</code>' attribute.
   */
  const Scheduling get_scheduling() const;

  /**
   * Gets a reference to a mutable value of the '<code>scheduling</code>'
   * property.
   *
   * Scheduling options for this instance.
   *
   * @return The result can be modified to change the attribute value.
   */
  Scheduling mutable_scheduling();

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for this resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>serviceAccounts</code>' attribute was set.
   *
   * @return true if the '<code>serviceAccounts</code>' attribute was set.
   */
  bool has_service_accounts() const {
    return Storage().isMember("serviceAccounts");
  }

  /**
   * Clears the '<code>serviceAccounts</code>' attribute.
   */
  void clear_service_accounts() {
    MutableStorage()->removeMember("serviceAccounts");
  }


  /**
   * Get a reference to the value of the '<code>serviceAccounts</code>'
   * attribute.
   */
  const client::JsonCppArray<ServiceAccount > get_service_accounts() const;

  /**
   * Gets a reference to a mutable value of the '<code>serviceAccounts</code>'
   * property.
   *
   * A list of service accounts, with their specified scopes, authorized for
   * this instance. Service accounts generate access tokens that can be accessed
   * through the metadata server and used to authenticate applications on the
   * instance. See Service Accounts for more information.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<ServiceAccount > mutable_serviceAccounts();

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * [Output Only] The status of the instance. One of the following values:
   * PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, and
   * TERMINATED.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>statusMessage</code>' attribute was set.
   *
   * @return true if the '<code>statusMessage</code>' attribute was set.
   */
  bool has_status_message() const {
    return Storage().isMember("statusMessage");
  }

  /**
   * Clears the '<code>statusMessage</code>' attribute.
   */
  void clear_status_message() {
    MutableStorage()->removeMember("statusMessage");
  }


  /**
   * Get the value of the '<code>statusMessage</code>' attribute.
   */
  const StringPiece get_status_message() const {
    const Json::Value& v = Storage("statusMessage");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>statusMessage</code>' attribute.
   *
   * [Output Only] An optional, human-readable explanation of the status.
   *
   * @param[in] value The new value.
   */
  void set_status_message(const StringPiece& value) {
    *MutableStorage("statusMessage") = value.data();
  }

  /**
   * Determine if the '<code>tags</code>' attribute was set.
   *
   * @return true if the '<code>tags</code>' attribute was set.
   */
  bool has_tags() const {
    return Storage().isMember("tags");
  }

  /**
   * Clears the '<code>tags</code>' attribute.
   */
  void clear_tags() {
    MutableStorage()->removeMember("tags");
  }


  /**
   * Get a reference to the value of the '<code>tags</code>' attribute.
   */
  const Tags get_tags() const;

  /**
   * Gets a reference to a mutable value of the '<code>tags</code>' property.
   *
   * A list of tags to apply to this instance. Tags are used to identify valid
   * sources or targets for network firewalls and are specified by the client
   * during instance creation. The tags can be later modified by the setTags
   * method. Each tag within the list must comply with RFC1035.
   *
   * @return The result can be modified to change the attribute value.
   */
  Tags mutable_tags();

  /**
   * Determine if the '<code>zone</code>' attribute was set.
   *
   * @return true if the '<code>zone</code>' attribute was set.
   */
  bool has_zone() const {
    return Storage().isMember("zone");
  }

  /**
   * Clears the '<code>zone</code>' attribute.
   */
  void clear_zone() {
    MutableStorage()->removeMember("zone");
  }


  /**
   * Get the value of the '<code>zone</code>' attribute.
   */
  const StringPiece get_zone() const {
    const Json::Value& v = Storage("zone");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>zone</code>' attribute.
   *
   * [Output Only] URL of the zone where the instance resides.
   *
   * @param[in] value The new value.
   */
  void set_zone(const StringPiece& value) {
    *MutableStorage("zone") = value.data();
  }

 private:
  void operator=(const Instance&);
};  // Instance
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_INSTANCE_H_
