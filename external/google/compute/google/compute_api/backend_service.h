// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_BACKEND_SERVICE_H_
#define  GOOGLE_COMPUTE_API_BACKEND_SERVICE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/backend.h"
#include "google/compute_api/connection_draining.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * A BackendService resource. This resource defines a group of backend virtual
 * machines and their serving capacity.
 *
 * @ingroup DataObject
 */
class BackendService : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static BackendService* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit BackendService(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit BackendService(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~BackendService();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::BackendService</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::BackendService");
  }

  /**
   * Determine if the '<code>affinityCookieTtlSec</code>' attribute was set.
   *
   * @return true if the '<code>affinityCookieTtlSec</code>' attribute was set.
   */
  bool has_affinity_cookie_ttl_sec() const {
    return Storage().isMember("affinityCookieTtlSec");
  }

  /**
   * Clears the '<code>affinityCookieTtlSec</code>' attribute.
   */
  void clear_affinity_cookie_ttl_sec() {
    MutableStorage()->removeMember("affinityCookieTtlSec");
  }


  /**
   * Get the value of the '<code>affinityCookieTtlSec</code>' attribute.
   */
  int32 get_affinity_cookie_ttl_sec() const {
    const Json::Value& storage = Storage("affinityCookieTtlSec");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>affinityCookieTtlSec</code>' attribute.
   *
   * Lifetime of cookies in seconds if session_affinity is GENERATED_COOKIE. If
   * set to 0, the cookie is non-persistent and lasts only until the end of the
   * browser session (or equivalent). The maximum allowed value for TTL is one
   * day.
   *
   * When the load balancing scheme is INTERNAL, this field is not used.
   *
   * @param[in] value The new value.
   */
  void set_affinity_cookie_ttl_sec(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("affinityCookieTtlSec"));
  }

  /**
   * Determine if the '<code>backends</code>' attribute was set.
   *
   * @return true if the '<code>backends</code>' attribute was set.
   */
  bool has_backends() const {
    return Storage().isMember("backends");
  }

  /**
   * Clears the '<code>backends</code>' attribute.
   */
  void clear_backends() {
    MutableStorage()->removeMember("backends");
  }


  /**
   * Get a reference to the value of the '<code>backends</code>' attribute.
   */
  const client::JsonCppArray<Backend > get_backends() const;

  /**
   * Gets a reference to a mutable value of the '<code>backends</code>'
   * property.
   *
   * The list of backends that serve this BackendService.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<Backend > mutable_backends();

  /**
   * Determine if the '<code>connectionDraining</code>' attribute was set.
   *
   * @return true if the '<code>connectionDraining</code>' attribute was set.
   */
  bool has_connection_draining() const {
    return Storage().isMember("connectionDraining");
  }

  /**
   * Clears the '<code>connectionDraining</code>' attribute.
   */
  void clear_connection_draining() {
    MutableStorage()->removeMember("connectionDraining");
  }


  /**
   * Get a reference to the value of the '<code>connectionDraining</code>'
   * attribute.
   */
  const ConnectionDraining get_connection_draining() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>connectionDraining</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  ConnectionDraining mutable_connectionDraining();

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>enableCDN</code>' attribute was set.
   *
   * @return true if the '<code>enableCDN</code>' attribute was set.
   */
  bool has_enable_cdn() const {
    return Storage().isMember("enableCDN");
  }

  /**
   * Clears the '<code>enableCDN</code>' attribute.
   */
  void clear_enable_cdn() {
    MutableStorage()->removeMember("enableCDN");
  }


  /**
   * Get the value of the '<code>enableCDN</code>' attribute.
   */
  bool get_enable_cdn() const {
    const Json::Value& storage = Storage("enableCDN");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>enableCDN</code>' attribute.
   *
   * If true, enable Cloud CDN for this BackendService.
   *
   * When the load balancing scheme is INTERNAL, this field is not used.
   *
   * @param[in] value The new value.
   */
  void set_enable_cdn(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("enableCDN"));
  }

  /**
   * Determine if the '<code>fingerprint</code>' attribute was set.
   *
   * @return true if the '<code>fingerprint</code>' attribute was set.
   */
  bool has_fingerprint() const {
    return Storage().isMember("fingerprint");
  }

  /**
   * Clears the '<code>fingerprint</code>' attribute.
   */
  void clear_fingerprint() {
    MutableStorage()->removeMember("fingerprint");
  }


  /**
   * Get the value of the '<code>fingerprint</code>' attribute.
   */
  const StringPiece get_fingerprint() const {
    const Json::Value& v = Storage("fingerprint");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fingerprint</code>' attribute.
   *
   * Fingerprint of this resource. A hash of the contents stored in this object.
   * This field is used in optimistic locking. This field will be ignored when
   * inserting a BackendService. An up-to-date fingerprint must be provided in
   * order to update the BackendService.
   *
   * @param[in] value The new value.
   */
  void set_fingerprint(const StringPiece& value) {
    *MutableStorage("fingerprint") = value.data();
  }

  /**
   * Determine if the '<code>healthChecks</code>' attribute was set.
   *
   * @return true if the '<code>healthChecks</code>' attribute was set.
   */
  bool has_health_checks() const {
    return Storage().isMember("healthChecks");
  }

  /**
   * Clears the '<code>healthChecks</code>' attribute.
   */
  void clear_health_checks() {
    MutableStorage()->removeMember("healthChecks");
  }


  /**
   * Get a reference to the value of the '<code>healthChecks</code>' attribute.
   */
  const client::JsonCppArray<string > get_health_checks() const {
     const Json::Value& storage = Storage("healthChecks");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>healthChecks</code>'
   * property.
   *
   * The list of URLs to the HttpHealthCheck or HttpsHealthCheck resource for
   * health checking this BackendService. Currently at most one health check can
   * be specified, and a health check is required.
   *
   * For internal load balancing, a URL to a HealthCheck resource must be
   * specified instead.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_healthChecks() {
    Json::Value* storage = MutableStorage("healthChecks");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of resource. Always compute#backendService for backend
   * services.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>loadBalancingScheme</code>' attribute was set.
   *
   * @return true if the '<code>loadBalancingScheme</code>' attribute was set.
   */
  bool has_load_balancing_scheme() const {
    return Storage().isMember("loadBalancingScheme");
  }

  /**
   * Clears the '<code>loadBalancingScheme</code>' attribute.
   */
  void clear_load_balancing_scheme() {
    MutableStorage()->removeMember("loadBalancingScheme");
  }


  /**
   * Get the value of the '<code>loadBalancingScheme</code>' attribute.
   */
  const StringPiece get_load_balancing_scheme() const {
    const Json::Value& v = Storage("loadBalancingScheme");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>loadBalancingScheme</code>' attribute.
   * @param[in] value The new value.
   */
  void set_load_balancing_scheme(const StringPiece& value) {
    *MutableStorage("loadBalancingScheme") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of the resource. Provided by the client when the resource is created.
   * The name must be 1-63 characters long, and comply with RFC1035.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must
   * be a lowercase letter, and all following characters must be a dash,
   * lowercase letter, or digit, except the last character, which cannot be a
   * dash.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>port</code>' attribute was set.
   *
   * @return true if the '<code>port</code>' attribute was set.
   */
  bool has_port() const {
    return Storage().isMember("port");
  }

  /**
   * Clears the '<code>port</code>' attribute.
   */
  void clear_port() {
    MutableStorage()->removeMember("port");
  }


  /**
   * Get the value of the '<code>port</code>' attribute.
   */
  int32 get_port() const {
    const Json::Value& storage = Storage("port");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>port</code>' attribute.
   * @deprecated
   *
   *
   * Deprecated in favor of portName. The TCP port to connect on the backend.
   * The default value is 80.
   *
   * This cannot be used for internal load balancing.
   *
   * @param[in] value The new value.
   */
  void set_port(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("port"));
  }

  /**
   * Determine if the '<code>portName</code>' attribute was set.
   *
   * @return true if the '<code>portName</code>' attribute was set.
   */
  bool has_port_name() const {
    return Storage().isMember("portName");
  }

  /**
   * Clears the '<code>portName</code>' attribute.
   */
  void clear_port_name() {
    MutableStorage()->removeMember("portName");
  }


  /**
   * Get the value of the '<code>portName</code>' attribute.
   */
  const StringPiece get_port_name() const {
    const Json::Value& v = Storage("portName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>portName</code>' attribute.
   *
   * Name of backend port. The same name should appear in the instance groups
   * referenced by this service. Required when the load balancing scheme is
   * EXTERNAL.
   *
   * When the load balancing scheme is INTERNAL, this field is not used.
   *
   * @param[in] value The new value.
   */
  void set_port_name(const StringPiece& value) {
    *MutableStorage("portName") = value.data();
  }

  /**
   * Determine if the '<code>protocol</code>' attribute was set.
   *
   * @return true if the '<code>protocol</code>' attribute was set.
   */
  bool has_protocol() const {
    return Storage().isMember("protocol");
  }

  /**
   * Clears the '<code>protocol</code>' attribute.
   */
  void clear_protocol() {
    MutableStorage()->removeMember("protocol");
  }


  /**
   * Get the value of the '<code>protocol</code>' attribute.
   */
  const StringPiece get_protocol() const {
    const Json::Value& v = Storage("protocol");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>protocol</code>' attribute.
   *
   * The protocol this BackendService uses to communicate with backends.
   *
   * Possible values are HTTP, HTTPS, HTTP2, TCP and SSL. The default is HTTP.
   *
   * For internal load balancing, the possible values are TCP and UDP, and the
   * default is TCP.
   *
   * @param[in] value The new value.
   */
  void set_protocol(const StringPiece& value) {
    *MutableStorage("protocol") = value.data();
  }

  /**
   * Determine if the '<code>region</code>' attribute was set.
   *
   * @return true if the '<code>region</code>' attribute was set.
   */
  bool has_region() const {
    return Storage().isMember("region");
  }

  /**
   * Clears the '<code>region</code>' attribute.
   */
  void clear_region() {
    MutableStorage()->removeMember("region");
  }


  /**
   * Get the value of the '<code>region</code>' attribute.
   */
  const StringPiece get_region() const {
    const Json::Value& v = Storage("region");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>region</code>' attribute.
   *
   * [Output Only] URL of the region where the regional backend service resides.
   * This field is not applicable to global backend services.
   *
   * @param[in] value The new value.
   */
  void set_region(const StringPiece& value) {
    *MutableStorage("region") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>sessionAffinity</code>' attribute was set.
   *
   * @return true if the '<code>sessionAffinity</code>' attribute was set.
   */
  bool has_session_affinity() const {
    return Storage().isMember("sessionAffinity");
  }

  /**
   * Clears the '<code>sessionAffinity</code>' attribute.
   */
  void clear_session_affinity() {
    MutableStorage()->removeMember("sessionAffinity");
  }


  /**
   * Get the value of the '<code>sessionAffinity</code>' attribute.
   */
  const StringPiece get_session_affinity() const {
    const Json::Value& v = Storage("sessionAffinity");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sessionAffinity</code>' attribute.
   *
   * Type of session affinity to use. The default is NONE.
   *
   * When the load balancing scheme is EXTERNAL, can be NONE, CLIENT_IP, or
   * GENERATED_COOKIE.
   *
   * When the load balancing scheme is INTERNAL, can be NONE, CLIENT_IP,
   * CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.
   *
   * When the protocol is UDP, this field is not used.
   *
   * @param[in] value The new value.
   */
  void set_session_affinity(const StringPiece& value) {
    *MutableStorage("sessionAffinity") = value.data();
  }

  /**
   * Determine if the '<code>timeoutSec</code>' attribute was set.
   *
   * @return true if the '<code>timeoutSec</code>' attribute was set.
   */
  bool has_timeout_sec() const {
    return Storage().isMember("timeoutSec");
  }

  /**
   * Clears the '<code>timeoutSec</code>' attribute.
   */
  void clear_timeout_sec() {
    MutableStorage()->removeMember("timeoutSec");
  }


  /**
   * Get the value of the '<code>timeoutSec</code>' attribute.
   */
  int32 get_timeout_sec() const {
    const Json::Value& storage = Storage("timeoutSec");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>timeoutSec</code>' attribute.
   *
   * How many seconds to wait for the backend before considering it a failed
   * request. Default is 30 seconds.
   *
   * @param[in] value The new value.
   */
  void set_timeout_sec(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("timeoutSec"));
  }

 private:
  void operator=(const BackendService&);
};  // BackendService
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_BACKEND_SERVICE_H_
