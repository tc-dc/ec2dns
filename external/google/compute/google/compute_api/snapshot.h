// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_SNAPSHOT_H_
#define  GOOGLE_COMPUTE_API_SNAPSHOT_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/customer_encryption_key.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * A persistent disk snapshot resource.
 *
 * @ingroup DataObject
 */
class Snapshot : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Snapshot* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Snapshot(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Snapshot(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Snapshot();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::Snapshot</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::Snapshot");
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>diskSizeGb</code>' attribute was set.
   *
   * @return true if the '<code>diskSizeGb</code>' attribute was set.
   */
  bool has_disk_size_gb() const {
    return Storage().isMember("diskSizeGb");
  }

  /**
   * Clears the '<code>diskSizeGb</code>' attribute.
   */
  void clear_disk_size_gb() {
    MutableStorage()->removeMember("diskSizeGb");
  }


  /**
   * Get the value of the '<code>diskSizeGb</code>' attribute.
   */
  int64 get_disk_size_gb() const {
    const Json::Value& storage = Storage("diskSizeGb");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>diskSizeGb</code>' attribute.
   *
   * [Output Only] Size of the snapshot, specified in GB.
   *
   * @param[in] value The new value.
   */
  void set_disk_size_gb(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("diskSizeGb"));
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of the resource. Always compute#snapshot for Snapshot
   * resources.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>licenses</code>' attribute was set.
   *
   * @return true if the '<code>licenses</code>' attribute was set.
   */
  bool has_licenses() const {
    return Storage().isMember("licenses");
  }

  /**
   * Clears the '<code>licenses</code>' attribute.
   */
  void clear_licenses() {
    MutableStorage()->removeMember("licenses");
  }


  /**
   * Get a reference to the value of the '<code>licenses</code>' attribute.
   */
  const client::JsonCppArray<string > get_licenses() const {
     const Json::Value& storage = Storage("licenses");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>licenses</code>'
   * property.
   *
   * [Output Only] A list of public visible licenses that apply to this
   * snapshot. This can be because the original image had licenses attached
   * (such as a Windows image).
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_licenses() {
    Json::Value* storage = MutableStorage("licenses");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of the resource; provided by the client when the resource is created.
   * The name must be 1-63 characters long, and comply with RFC1035.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must
   * be a lowercase letter, and all following characters must be a dash,
   * lowercase letter, or digit, except the last character, which cannot be a
   * dash.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>snapshotEncryptionKey</code>' attribute was set.
   *
   * @return true if the '<code>snapshotEncryptionKey</code>' attribute was set.
   */
  bool has_snapshot_encryption_key() const {
    return Storage().isMember("snapshotEncryptionKey");
  }

  /**
   * Clears the '<code>snapshotEncryptionKey</code>' attribute.
   */
  void clear_snapshot_encryption_key() {
    MutableStorage()->removeMember("snapshotEncryptionKey");
  }


  /**
   * Get a reference to the value of the '<code>snapshotEncryptionKey</code>'
   * attribute.
   */
  const CustomerEncryptionKey get_snapshot_encryption_key() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>snapshotEncryptionKey</code>' property.
   *
   * Encrypts the snapshot using a customer-supplied encryption key.
   *
   * After you encrypt a snapshot using a customer-supplied key, you must
   * provide the same key if you use the image later For example, you must
   * provide the encryption key when you create a disk from the encrypted
   * snapshot in a future request.
   *
   * Customer-supplied encryption keys do not protect access to metadata of the
   * disk.
   *
   * If you do not provide an encryption key when creating the snapshot, then
   * the snapshot will be encrypted using an automatically generated key and you
   * do not need to provide a key to use the snapshot later.
   *
   * @return The result can be modified to change the attribute value.
   */
  CustomerEncryptionKey mutable_snapshotEncryptionKey();

  /**
   * Determine if the '<code>sourceDisk</code>' attribute was set.
   *
   * @return true if the '<code>sourceDisk</code>' attribute was set.
   */
  bool has_source_disk() const {
    return Storage().isMember("sourceDisk");
  }

  /**
   * Clears the '<code>sourceDisk</code>' attribute.
   */
  void clear_source_disk() {
    MutableStorage()->removeMember("sourceDisk");
  }


  /**
   * Get the value of the '<code>sourceDisk</code>' attribute.
   */
  const StringPiece get_source_disk() const {
    const Json::Value& v = Storage("sourceDisk");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sourceDisk</code>' attribute.
   *
   * [Output Only] The source disk used to create this snapshot.
   *
   * @param[in] value The new value.
   */
  void set_source_disk(const StringPiece& value) {
    *MutableStorage("sourceDisk") = value.data();
  }

  /**
   * Determine if the '<code>sourceDiskEncryptionKey</code>' attribute was set.
   *
   * @return true if the '<code>sourceDiskEncryptionKey</code>' attribute was
   * set.
   */
  bool has_source_disk_encryption_key() const {
    return Storage().isMember("sourceDiskEncryptionKey");
  }

  /**
   * Clears the '<code>sourceDiskEncryptionKey</code>' attribute.
   */
  void clear_source_disk_encryption_key() {
    MutableStorage()->removeMember("sourceDiskEncryptionKey");
  }


  /**
   * Get a reference to the value of the '<code>sourceDiskEncryptionKey</code>'
   * attribute.
   */
  const CustomerEncryptionKey get_source_disk_encryption_key() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>sourceDiskEncryptionKey</code>' property.
   *
   * The customer-supplied encryption key of the source disk. Required if the
   * source disk is protected by a customer-supplied encryption key.
   *
   * @return The result can be modified to change the attribute value.
   */
  CustomerEncryptionKey mutable_sourceDiskEncryptionKey();

  /**
   * Determine if the '<code>sourceDiskId</code>' attribute was set.
   *
   * @return true if the '<code>sourceDiskId</code>' attribute was set.
   */
  bool has_source_disk_id() const {
    return Storage().isMember("sourceDiskId");
  }

  /**
   * Clears the '<code>sourceDiskId</code>' attribute.
   */
  void clear_source_disk_id() {
    MutableStorage()->removeMember("sourceDiskId");
  }


  /**
   * Get the value of the '<code>sourceDiskId</code>' attribute.
   */
  const StringPiece get_source_disk_id() const {
    const Json::Value& v = Storage("sourceDiskId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sourceDiskId</code>' attribute.
   *
   * [Output Only] The ID value of the disk used to create this snapshot. This
   * value may be used to determine whether the snapshot was taken from the
   * current or a previous instance of a given disk name.
   *
   * @param[in] value The new value.
   */
  void set_source_disk_id(const StringPiece& value) {
    *MutableStorage("sourceDiskId") = value.data();
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * [Output Only] The status of the snapshot. This can be CREATING, DELETING,
   * FAILED, READY, or UPLOADING.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>storageBytes</code>' attribute was set.
   *
   * @return true if the '<code>storageBytes</code>' attribute was set.
   */
  bool has_storage_bytes() const {
    return Storage().isMember("storageBytes");
  }

  /**
   * Clears the '<code>storageBytes</code>' attribute.
   */
  void clear_storage_bytes() {
    MutableStorage()->removeMember("storageBytes");
  }


  /**
   * Get the value of the '<code>storageBytes</code>' attribute.
   */
  int64 get_storage_bytes() const {
    const Json::Value& storage = Storage("storageBytes");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>storageBytes</code>' attribute.
   *
   * [Output Only] A size of the the storage used by the snapshot. As snapshots
   * share storage, this number is expected to change with snapshot
   * creation/deletion.
   *
   * @param[in] value The new value.
   */
  void set_storage_bytes(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("storageBytes"));
  }

  /**
   * Determine if the '<code>storageBytesStatus</code>' attribute was set.
   *
   * @return true if the '<code>storageBytesStatus</code>' attribute was set.
   */
  bool has_storage_bytes_status() const {
    return Storage().isMember("storageBytesStatus");
  }

  /**
   * Clears the '<code>storageBytesStatus</code>' attribute.
   */
  void clear_storage_bytes_status() {
    MutableStorage()->removeMember("storageBytesStatus");
  }


  /**
   * Get the value of the '<code>storageBytesStatus</code>' attribute.
   */
  const StringPiece get_storage_bytes_status() const {
    const Json::Value& v = Storage("storageBytesStatus");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>storageBytesStatus</code>' attribute.
   *
   * [Output Only] An indicator whether storageBytes is in a stable state or it
   * is being adjusted as a result of shared storage reallocation. This status
   * can either be UPDATING, meaning the size of the snapshot is being updated,
   * or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
   *
   * @param[in] value The new value.
   */
  void set_storage_bytes_status(const StringPiece& value) {
    *MutableStorage("storageBytesStatus") = value.data();
  }

 private:
  void operator=(const Snapshot&);
};  // Snapshot
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_SNAPSHOT_H_
