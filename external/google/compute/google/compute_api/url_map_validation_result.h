// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_URL_MAP_VALIDATION_RESULT_H_
#define  GOOGLE_COMPUTE_API_URL_MAP_VALIDATION_RESULT_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/test_failure.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * Message representing the validation result for a UrlMap.
 *
 * @ingroup DataObject
 */
class UrlMapValidationResult : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static UrlMapValidationResult* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UrlMapValidationResult(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UrlMapValidationResult(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~UrlMapValidationResult();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::UrlMapValidationResult</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::UrlMapValidationResult");
  }

  /**
   * Determine if the '<code>loadErrors</code>' attribute was set.
   *
   * @return true if the '<code>loadErrors</code>' attribute was set.
   */
  bool has_load_errors() const {
    return Storage().isMember("loadErrors");
  }

  /**
   * Clears the '<code>loadErrors</code>' attribute.
   */
  void clear_load_errors() {
    MutableStorage()->removeMember("loadErrors");
  }


  /**
   * Get a reference to the value of the '<code>loadErrors</code>' attribute.
   */
  const client::JsonCppArray<string > get_load_errors() const {
     const Json::Value& storage = Storage("loadErrors");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>loadErrors</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_loadErrors() {
    Json::Value* storage = MutableStorage("loadErrors");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>loadSucceeded</code>' attribute was set.
   *
   * @return true if the '<code>loadSucceeded</code>' attribute was set.
   */
  bool has_load_succeeded() const {
    return Storage().isMember("loadSucceeded");
  }

  /**
   * Clears the '<code>loadSucceeded</code>' attribute.
   */
  void clear_load_succeeded() {
    MutableStorage()->removeMember("loadSucceeded");
  }


  /**
   * Get the value of the '<code>loadSucceeded</code>' attribute.
   */
  bool get_load_succeeded() const {
    const Json::Value& storage = Storage("loadSucceeded");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>loadSucceeded</code>' attribute.
   *
   * Whether the given UrlMap can be successfully loaded. If false, 'loadErrors'
   * indicates the reasons.
   *
   * @param[in] value The new value.
   */
  void set_load_succeeded(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("loadSucceeded"));
  }

  /**
   * Determine if the '<code>testFailures</code>' attribute was set.
   *
   * @return true if the '<code>testFailures</code>' attribute was set.
   */
  bool has_test_failures() const {
    return Storage().isMember("testFailures");
  }

  /**
   * Clears the '<code>testFailures</code>' attribute.
   */
  void clear_test_failures() {
    MutableStorage()->removeMember("testFailures");
  }


  /**
   * Get a reference to the value of the '<code>testFailures</code>' attribute.
   */
  const client::JsonCppArray<TestFailure > get_test_failures() const;

  /**
   * Gets a reference to a mutable value of the '<code>testFailures</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<TestFailure > mutable_testFailures();

  /**
   * Determine if the '<code>testPassed</code>' attribute was set.
   *
   * @return true if the '<code>testPassed</code>' attribute was set.
   */
  bool has_test_passed() const {
    return Storage().isMember("testPassed");
  }

  /**
   * Clears the '<code>testPassed</code>' attribute.
   */
  void clear_test_passed() {
    MutableStorage()->removeMember("testPassed");
  }


  /**
   * Get the value of the '<code>testPassed</code>' attribute.
   */
  bool get_test_passed() const {
    const Json::Value& storage = Storage("testPassed");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>testPassed</code>' attribute.
   *
   * If successfully loaded, this field indicates whether the test passed. If
   * false, 'testFailures's indicate the reason of failure.
   *
   * @param[in] value The new value.
   */
  void set_test_passed(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("testPassed"));
  }

 private:
  void operator=(const UrlMapValidationResult&);
};  // UrlMapValidationResult
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_URL_MAP_VALIDATION_RESULT_H_
