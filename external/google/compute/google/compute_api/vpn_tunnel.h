// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_VPN_TUNNEL_H_
#define  GOOGLE_COMPUTE_API_VPN_TUNNEL_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class VpnTunnel : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static VpnTunnel* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VpnTunnel(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VpnTunnel(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~VpnTunnel();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::VpnTunnel</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::VpnTunnel");
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>detailedStatus</code>' attribute was set.
   *
   * @return true if the '<code>detailedStatus</code>' attribute was set.
   */
  bool has_detailed_status() const {
    return Storage().isMember("detailedStatus");
  }

  /**
   * Clears the '<code>detailedStatus</code>' attribute.
   */
  void clear_detailed_status() {
    MutableStorage()->removeMember("detailedStatus");
  }


  /**
   * Get the value of the '<code>detailedStatus</code>' attribute.
   */
  const StringPiece get_detailed_status() const {
    const Json::Value& v = Storage("detailedStatus");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>detailedStatus</code>' attribute.
   *
   * [Output Only] Detailed status message for the VPN tunnel.
   *
   * @param[in] value The new value.
   */
  void set_detailed_status(const StringPiece& value) {
    *MutableStorage("detailedStatus") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>ikeVersion</code>' attribute was set.
   *
   * @return true if the '<code>ikeVersion</code>' attribute was set.
   */
  bool has_ike_version() const {
    return Storage().isMember("ikeVersion");
  }

  /**
   * Clears the '<code>ikeVersion</code>' attribute.
   */
  void clear_ike_version() {
    MutableStorage()->removeMember("ikeVersion");
  }


  /**
   * Get the value of the '<code>ikeVersion</code>' attribute.
   */
  int32 get_ike_version() const {
    const Json::Value& storage = Storage("ikeVersion");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>ikeVersion</code>' attribute.
   *
   * IKE protocol version to use when establishing the VPN tunnel with peer VPN
   * gateway. Acceptable IKE versions are 1 or 2. Default version is 2.
   *
   * @param[in] value The new value.
   */
  void set_ike_version(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("ikeVersion"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>localTrafficSelector</code>' attribute was set.
   *
   * @return true if the '<code>localTrafficSelector</code>' attribute was set.
   */
  bool has_local_traffic_selector() const {
    return Storage().isMember("localTrafficSelector");
  }

  /**
   * Clears the '<code>localTrafficSelector</code>' attribute.
   */
  void clear_local_traffic_selector() {
    MutableStorage()->removeMember("localTrafficSelector");
  }


  /**
   * Get a reference to the value of the '<code>localTrafficSelector</code>'
   * attribute.
   */
  const client::JsonCppArray<string > get_local_traffic_selector() const {
     const Json::Value& storage = Storage("localTrafficSelector");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>localTrafficSelector</code>' property.
   *
   * Local traffic selector to use when establishing the VPN tunnel with peer
   * VPN gateway. The value should be a CIDR formatted string, for example:
   * 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_localTrafficSelector() {
    Json::Value* storage = MutableStorage("localTrafficSelector");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of the resource. Provided by the client when the resource is created.
   * The name must be 1-63 characters long, and comply with RFC1035.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must
   * be a lowercase letter, and all following characters must be a dash,
   * lowercase letter, or digit, except the last character, which cannot be a
   * dash.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>peerIp</code>' attribute was set.
   *
   * @return true if the '<code>peerIp</code>' attribute was set.
   */
  bool has_peer_ip() const {
    return Storage().isMember("peerIp");
  }

  /**
   * Clears the '<code>peerIp</code>' attribute.
   */
  void clear_peer_ip() {
    MutableStorage()->removeMember("peerIp");
  }


  /**
   * Get the value of the '<code>peerIp</code>' attribute.
   */
  const StringPiece get_peer_ip() const {
    const Json::Value& v = Storage("peerIp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>peerIp</code>' attribute.
   *
   * IP address of the peer VPN gateway. Only IPv4 is supported.
   *
   * @param[in] value The new value.
   */
  void set_peer_ip(const StringPiece& value) {
    *MutableStorage("peerIp") = value.data();
  }

  /**
   * Determine if the '<code>region</code>' attribute was set.
   *
   * @return true if the '<code>region</code>' attribute was set.
   */
  bool has_region() const {
    return Storage().isMember("region");
  }

  /**
   * Clears the '<code>region</code>' attribute.
   */
  void clear_region() {
    MutableStorage()->removeMember("region");
  }


  /**
   * Get the value of the '<code>region</code>' attribute.
   */
  const StringPiece get_region() const {
    const Json::Value& v = Storage("region");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>region</code>' attribute.
   *
   * [Output Only] URL of the region where the VPN tunnel resides.
   *
   * @param[in] value The new value.
   */
  void set_region(const StringPiece& value) {
    *MutableStorage("region") = value.data();
  }

  /**
   * Determine if the '<code>remoteTrafficSelector</code>' attribute was set.
   *
   * @return true if the '<code>remoteTrafficSelector</code>' attribute was set.
   */
  bool has_remote_traffic_selector() const {
    return Storage().isMember("remoteTrafficSelector");
  }

  /**
   * Clears the '<code>remoteTrafficSelector</code>' attribute.
   */
  void clear_remote_traffic_selector() {
    MutableStorage()->removeMember("remoteTrafficSelector");
  }


  /**
   * Get a reference to the value of the '<code>remoteTrafficSelector</code>'
   * attribute.
   */
  const client::JsonCppArray<string > get_remote_traffic_selector() const {
     const Json::Value& storage = Storage("remoteTrafficSelector");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>remoteTrafficSelector</code>' property.
   *
   * Remote traffic selectors to use when establishing the VPN tunnel with peer
   * VPN gateway. The value should be a CIDR formatted string, for example:
   * 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_remoteTrafficSelector() {
    Json::Value* storage = MutableStorage("remoteTrafficSelector");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>router</code>' attribute was set.
   *
   * @return true if the '<code>router</code>' attribute was set.
   */
  bool has_router() const {
    return Storage().isMember("router");
  }

  /**
   * Clears the '<code>router</code>' attribute.
   */
  void clear_router() {
    MutableStorage()->removeMember("router");
  }


  /**
   * Get the value of the '<code>router</code>' attribute.
   */
  const StringPiece get_router() const {
    const Json::Value& v = Storage("router");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>router</code>' attribute.
   *
   * URL of router resource to be used for dynamic routing.
   *
   * @param[in] value The new value.
   */
  void set_router(const StringPiece& value) {
    *MutableStorage("router") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>sharedSecret</code>' attribute was set.
   *
   * @return true if the '<code>sharedSecret</code>' attribute was set.
   */
  bool has_shared_secret() const {
    return Storage().isMember("sharedSecret");
  }

  /**
   * Clears the '<code>sharedSecret</code>' attribute.
   */
  void clear_shared_secret() {
    MutableStorage()->removeMember("sharedSecret");
  }


  /**
   * Get the value of the '<code>sharedSecret</code>' attribute.
   */
  const StringPiece get_shared_secret() const {
    const Json::Value& v = Storage("sharedSecret");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sharedSecret</code>' attribute.
   *
   * Shared secret used to set the secure session between the Cloud VPN gateway
   * and the peer VPN gateway.
   *
   * @param[in] value The new value.
   */
  void set_shared_secret(const StringPiece& value) {
    *MutableStorage("sharedSecret") = value.data();
  }

  /**
   * Determine if the '<code>sharedSecretHash</code>' attribute was set.
   *
   * @return true if the '<code>sharedSecretHash</code>' attribute was set.
   */
  bool has_shared_secret_hash() const {
    return Storage().isMember("sharedSecretHash");
  }

  /**
   * Clears the '<code>sharedSecretHash</code>' attribute.
   */
  void clear_shared_secret_hash() {
    MutableStorage()->removeMember("sharedSecretHash");
  }


  /**
   * Get the value of the '<code>sharedSecretHash</code>' attribute.
   */
  const StringPiece get_shared_secret_hash() const {
    const Json::Value& v = Storage("sharedSecretHash");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sharedSecretHash</code>' attribute.
   *
   * Hash of the shared secret.
   *
   * @param[in] value The new value.
   */
  void set_shared_secret_hash(const StringPiece& value) {
    *MutableStorage("sharedSecretHash") = value.data();
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * [Output Only] The status of the VPN tunnel.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>targetVpnGateway</code>' attribute was set.
   *
   * @return true if the '<code>targetVpnGateway</code>' attribute was set.
   */
  bool has_target_vpn_gateway() const {
    return Storage().isMember("targetVpnGateway");
  }

  /**
   * Clears the '<code>targetVpnGateway</code>' attribute.
   */
  void clear_target_vpn_gateway() {
    MutableStorage()->removeMember("targetVpnGateway");
  }


  /**
   * Get the value of the '<code>targetVpnGateway</code>' attribute.
   */
  const StringPiece get_target_vpn_gateway() const {
    const Json::Value& v = Storage("targetVpnGateway");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>targetVpnGateway</code>' attribute.
   *
   * URL of the VPN gateway with which this VPN tunnel is associated. Provided
   * by the client when the VPN tunnel is created.
   *
   * @param[in] value The new value.
   */
  void set_target_vpn_gateway(const StringPiece& value) {
    *MutableStorage("targetVpnGateway") = value.data();
  }

 private:
  void operator=(const VpnTunnel&);
};  // VpnTunnel
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_VPN_TUNNEL_H_
