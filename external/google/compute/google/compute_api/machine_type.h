// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_MACHINE_TYPE_H_
#define  GOOGLE_COMPUTE_API_MACHINE_TYPE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/deprecation_status.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * A Machine Type resource.
 *
 * @ingroup DataObject
 */
class MachineType : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class MachineTypeScratchDisks : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static MachineTypeScratchDisks* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit MachineTypeScratchDisks(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit MachineTypeScratchDisks(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~MachineTypeScratchDisks();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_compute_api::MachineTypeScratchDisks</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_compute_api::MachineTypeScratchDisks");
    }

    /**
     * Determine if the '<code>diskGb</code>' attribute was set.
     *
     * @return true if the '<code>diskGb</code>' attribute was set.
     */
    bool has_disk_gb() const {
      return Storage().isMember("diskGb");
    }

    /**
     * Clears the '<code>diskGb</code>' attribute.
     */
    void clear_disk_gb() {
      MutableStorage()->removeMember("diskGb");
    }


    /**
     * Get the value of the '<code>diskGb</code>' attribute.
     */
    int32 get_disk_gb() const {
      const Json::Value& storage = Storage("diskGb");
      return client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>diskGb</code>' attribute.
     *
     * Size of the scratch disk, defined in GB.
     *
     * @param[in] value The new value.
     */
    void set_disk_gb(int32 value) {
      client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("diskGb"));
    }

   private:
    void operator=(const MachineTypeScratchDisks&);
  };  // MachineTypeScratchDisks
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static MachineType* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit MachineType(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit MachineType(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~MachineType();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::MachineType</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::MachineType");
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>deprecated</code>' attribute was set.
   *
   * @return true if the '<code>deprecated</code>' attribute was set.
   */
  bool has_deprecated() const {
    return Storage().isMember("deprecated");
  }

  /**
   * Clears the '<code>deprecated</code>' attribute.
   */
  void clear_deprecated() {
    MutableStorage()->removeMember("deprecated");
  }


  /**
   * Get a reference to the value of the '<code>deprecated</code>' attribute.
   */
  const DeprecationStatus get_deprecated() const;

  /**
   * Gets a reference to a mutable value of the '<code>deprecated</code>'
   * property.
   *
   * [Output Only] The deprecation status associated with this machine type.
   *
   * @return The result can be modified to change the attribute value.
   */
  DeprecationStatus mutable_deprecated();

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * [Output Only] An optional textual description of the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>guestCpus</code>' attribute was set.
   *
   * @return true if the '<code>guestCpus</code>' attribute was set.
   */
  bool has_guest_cpus() const {
    return Storage().isMember("guestCpus");
  }

  /**
   * Clears the '<code>guestCpus</code>' attribute.
   */
  void clear_guest_cpus() {
    MutableStorage()->removeMember("guestCpus");
  }


  /**
   * Get the value of the '<code>guestCpus</code>' attribute.
   */
  int32 get_guest_cpus() const {
    const Json::Value& storage = Storage("guestCpus");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>guestCpus</code>' attribute.
   *
   * [Output Only] The number of virtual CPUs that are available to the
   * instance.
   *
   * @param[in] value The new value.
   */
  void set_guest_cpus(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("guestCpus"));
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>imageSpaceGb</code>' attribute was set.
   *
   * @return true if the '<code>imageSpaceGb</code>' attribute was set.
   */
  bool has_image_space_gb() const {
    return Storage().isMember("imageSpaceGb");
  }

  /**
   * Clears the '<code>imageSpaceGb</code>' attribute.
   */
  void clear_image_space_gb() {
    MutableStorage()->removeMember("imageSpaceGb");
  }


  /**
   * Get the value of the '<code>imageSpaceGb</code>' attribute.
   */
  int32 get_image_space_gb() const {
    const Json::Value& storage = Storage("imageSpaceGb");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>imageSpaceGb</code>' attribute.
   * @deprecated
   *
   *
   * [Deprecated] This property is deprecated and will never be populated with
   * any relevant values.
   *
   * @param[in] value The new value.
   */
  void set_image_space_gb(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("imageSpaceGb"));
  }

  /**
   * Determine if the '<code>isSharedCpu</code>' attribute was set.
   *
   * @return true if the '<code>isSharedCpu</code>' attribute was set.
   */
  bool has_is_shared_cpu() const {
    return Storage().isMember("isSharedCpu");
  }

  /**
   * Clears the '<code>isSharedCpu</code>' attribute.
   */
  void clear_is_shared_cpu() {
    MutableStorage()->removeMember("isSharedCpu");
  }


  /**
   * Get the value of the '<code>isSharedCpu</code>' attribute.
   */
  bool get_is_shared_cpu() const {
    const Json::Value& storage = Storage("isSharedCpu");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>isSharedCpu</code>' attribute.
   *
   * [Output Only] Whether this machine type has a shared CPU. See Shared-core
   * machine types for more information.
   *
   * @param[in] value The new value.
   */
  void set_is_shared_cpu(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("isSharedCpu"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] The type of the resource. Always compute#machineType for
   * machine types.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>maximumPersistentDisks</code>' attribute was set.
   *
   * @return true if the '<code>maximumPersistentDisks</code>' attribute was
   * set.
   */
  bool has_maximum_persistent_disks() const {
    return Storage().isMember("maximumPersistentDisks");
  }

  /**
   * Clears the '<code>maximumPersistentDisks</code>' attribute.
   */
  void clear_maximum_persistent_disks() {
    MutableStorage()->removeMember("maximumPersistentDisks");
  }


  /**
   * Get the value of the '<code>maximumPersistentDisks</code>' attribute.
   */
  int32 get_maximum_persistent_disks() const {
    const Json::Value& storage = Storage("maximumPersistentDisks");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>maximumPersistentDisks</code>' attribute.
   *
   * [Output Only] Maximum persistent disks allowed.
   *
   * @param[in] value The new value.
   */
  void set_maximum_persistent_disks(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("maximumPersistentDisks"));
  }

  /**
   * Determine if the '<code>maximumPersistentDisksSizeGb</code>' attribute was
   * set.
   *
   * @return true if the '<code>maximumPersistentDisksSizeGb</code>' attribute
   * was set.
   */
  bool has_maximum_persistent_disks_size_gb() const {
    return Storage().isMember("maximumPersistentDisksSizeGb");
  }

  /**
   * Clears the '<code>maximumPersistentDisksSizeGb</code>' attribute.
   */
  void clear_maximum_persistent_disks_size_gb() {
    MutableStorage()->removeMember("maximumPersistentDisksSizeGb");
  }


  /**
   * Get the value of the '<code>maximumPersistentDisksSizeGb</code>' attribute.
   */
  int64 get_maximum_persistent_disks_size_gb() const {
    const Json::Value& storage = Storage("maximumPersistentDisksSizeGb");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>maximumPersistentDisksSizeGb</code>' attribute.
   *
   * [Output Only] Maximum total persistent disks size (GB) allowed.
   *
   * @param[in] value The new value.
   */
  void set_maximum_persistent_disks_size_gb(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("maximumPersistentDisksSizeGb"));
  }

  /**
   * Determine if the '<code>memoryMb</code>' attribute was set.
   *
   * @return true if the '<code>memoryMb</code>' attribute was set.
   */
  bool has_memory_mb() const {
    return Storage().isMember("memoryMb");
  }

  /**
   * Clears the '<code>memoryMb</code>' attribute.
   */
  void clear_memory_mb() {
    MutableStorage()->removeMember("memoryMb");
  }


  /**
   * Get the value of the '<code>memoryMb</code>' attribute.
   */
  int32 get_memory_mb() const {
    const Json::Value& storage = Storage("memoryMb");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>memoryMb</code>' attribute.
   *
   * [Output Only] The amount of physical memory available to the instance,
   * defined in MB.
   *
   * @param[in] value The new value.
   */
  void set_memory_mb(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("memoryMb"));
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * [Output Only] Name of the resource.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>scratchDisks</code>' attribute was set.
   *
   * @return true if the '<code>scratchDisks</code>' attribute was set.
   */
  bool has_scratch_disks() const {
    return Storage().isMember("scratchDisks");
  }

  /**
   * Clears the '<code>scratchDisks</code>' attribute.
   */
  void clear_scratch_disks() {
    MutableStorage()->removeMember("scratchDisks");
  }


  /**
   * Get a reference to the value of the '<code>scratchDisks</code>' attribute.
   */
  const client::JsonCppArray<MachineTypeScratchDisks > get_scratch_disks() const {
     const Json::Value& storage = Storage("scratchDisks");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<MachineTypeScratchDisks > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>scratchDisks</code>'
   * property.
   *
   * [Output Only] List of extended scratch disks assigned to the instance.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<MachineTypeScratchDisks > mutable_scratchDisks() {
    Json::Value* storage = MutableStorage("scratchDisks");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<MachineTypeScratchDisks > >(storage);
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>zone</code>' attribute was set.
   *
   * @return true if the '<code>zone</code>' attribute was set.
   */
  bool has_zone() const {
    return Storage().isMember("zone");
  }

  /**
   * Clears the '<code>zone</code>' attribute.
   */
  void clear_zone() {
    MutableStorage()->removeMember("zone");
  }


  /**
   * Get the value of the '<code>zone</code>' attribute.
   */
  const StringPiece get_zone() const {
    const Json::Value& v = Storage("zone");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>zone</code>' attribute.
   *
   * [Output Only] The name of the zone where the machine type resides, such as
   * us-central1-a.
   *
   * @param[in] value The new value.
   */
  void set_zone(const StringPiece& value) {
    *MutableStorage("zone") = value.data();
  }

 private:
  void operator=(const MachineType&);
};  // MachineType
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_MACHINE_TYPE_H_
