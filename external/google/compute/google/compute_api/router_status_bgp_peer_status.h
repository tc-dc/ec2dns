// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_ROUTER_STATUS_BGP_PEER_STATUS_H_
#define  GOOGLE_COMPUTE_API_ROUTER_STATUS_BGP_PEER_STATUS_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/route.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class RouterStatusBgpPeerStatus : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static RouterStatusBgpPeerStatus* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit RouterStatusBgpPeerStatus(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit RouterStatusBgpPeerStatus(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~RouterStatusBgpPeerStatus();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::RouterStatusBgpPeerStatus</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::RouterStatusBgpPeerStatus");
  }

  /**
   * Determine if the '<code>advertisedRoutes</code>' attribute was set.
   *
   * @return true if the '<code>advertisedRoutes</code>' attribute was set.
   */
  bool has_advertised_routes() const {
    return Storage().isMember("advertisedRoutes");
  }

  /**
   * Clears the '<code>advertisedRoutes</code>' attribute.
   */
  void clear_advertised_routes() {
    MutableStorage()->removeMember("advertisedRoutes");
  }


  /**
   * Get a reference to the value of the '<code>advertisedRoutes</code>'
   * attribute.
   */
  const client::JsonCppArray<Route > get_advertised_routes() const;

  /**
   * Gets a reference to a mutable value of the '<code>advertisedRoutes</code>'
   * property.
   *
   * Routes that were advertised to the remote BGP peer.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<Route > mutable_advertisedRoutes();

  /**
   * Determine if the '<code>ipAddress</code>' attribute was set.
   *
   * @return true if the '<code>ipAddress</code>' attribute was set.
   */
  bool has_ip_address() const {
    return Storage().isMember("ipAddress");
  }

  /**
   * Clears the '<code>ipAddress</code>' attribute.
   */
  void clear_ip_address() {
    MutableStorage()->removeMember("ipAddress");
  }


  /**
   * Get the value of the '<code>ipAddress</code>' attribute.
   */
  const StringPiece get_ip_address() const {
    const Json::Value& v = Storage("ipAddress");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>ipAddress</code>' attribute.
   *
   * IP address of the local BGP interface.
   *
   * @param[in] value The new value.
   */
  void set_ip_address(const StringPiece& value) {
    *MutableStorage("ipAddress") = value.data();
  }

  /**
   * Determine if the '<code>linkedVpnTunnel</code>' attribute was set.
   *
   * @return true if the '<code>linkedVpnTunnel</code>' attribute was set.
   */
  bool has_linked_vpn_tunnel() const {
    return Storage().isMember("linkedVpnTunnel");
  }

  /**
   * Clears the '<code>linkedVpnTunnel</code>' attribute.
   */
  void clear_linked_vpn_tunnel() {
    MutableStorage()->removeMember("linkedVpnTunnel");
  }


  /**
   * Get the value of the '<code>linkedVpnTunnel</code>' attribute.
   */
  const StringPiece get_linked_vpn_tunnel() const {
    const Json::Value& v = Storage("linkedVpnTunnel");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>linkedVpnTunnel</code>' attribute.
   *
   * URL of the VPN tunnel that this BGP peer controls.
   *
   * @param[in] value The new value.
   */
  void set_linked_vpn_tunnel(const StringPiece& value) {
    *MutableStorage("linkedVpnTunnel") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of this BGP peer. Unique within the Routers resource.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>numLearnedRoutes</code>' attribute was set.
   *
   * @return true if the '<code>numLearnedRoutes</code>' attribute was set.
   */
  bool has_num_learned_routes() const {
    return Storage().isMember("numLearnedRoutes");
  }

  /**
   * Clears the '<code>numLearnedRoutes</code>' attribute.
   */
  void clear_num_learned_routes() {
    MutableStorage()->removeMember("numLearnedRoutes");
  }


  /**
   * Get the value of the '<code>numLearnedRoutes</code>' attribute.
   */
  uint32 get_num_learned_routes() const {
    const Json::Value& storage = Storage("numLearnedRoutes");
    return client::JsonValueToCppValueHelper<uint32 >(storage);
  }

  /**
   * Change the '<code>numLearnedRoutes</code>' attribute.
   *
   * Number of routes learned from the remote BGP Peer.
   *
   * @param[in] value The new value.
   */
  void set_num_learned_routes(uint32 value) {
    client::SetJsonValueFromCppValueHelper<uint32 >(
      value, MutableStorage("numLearnedRoutes"));
  }

  /**
   * Determine if the '<code>peerIpAddress</code>' attribute was set.
   *
   * @return true if the '<code>peerIpAddress</code>' attribute was set.
   */
  bool has_peer_ip_address() const {
    return Storage().isMember("peerIpAddress");
  }

  /**
   * Clears the '<code>peerIpAddress</code>' attribute.
   */
  void clear_peer_ip_address() {
    MutableStorage()->removeMember("peerIpAddress");
  }


  /**
   * Get the value of the '<code>peerIpAddress</code>' attribute.
   */
  const StringPiece get_peer_ip_address() const {
    const Json::Value& v = Storage("peerIpAddress");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>peerIpAddress</code>' attribute.
   *
   * IP address of the remote BGP interface.
   *
   * @param[in] value The new value.
   */
  void set_peer_ip_address(const StringPiece& value) {
    *MutableStorage("peerIpAddress") = value.data();
  }

  /**
   * Determine if the '<code>state</code>' attribute was set.
   *
   * @return true if the '<code>state</code>' attribute was set.
   */
  bool has_state() const {
    return Storage().isMember("state");
  }

  /**
   * Clears the '<code>state</code>' attribute.
   */
  void clear_state() {
    MutableStorage()->removeMember("state");
  }


  /**
   * Get the value of the '<code>state</code>' attribute.
   */
  const StringPiece get_state() const {
    const Json::Value& v = Storage("state");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>state</code>' attribute.
   *
   * BGP state as specified in RFC1771.
   *
   * @param[in] value The new value.
   */
  void set_state(const StringPiece& value) {
    *MutableStorage("state") = value.data();
  }

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get the value of the '<code>status</code>' attribute.
   */
  const StringPiece get_status() const {
    const Json::Value& v = Storage("status");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>status</code>' attribute.
   *
   * Status of the BGP peer: {UP, DOWN}.
   *
   * @param[in] value The new value.
   */
  void set_status(const StringPiece& value) {
    *MutableStorage("status") = value.data();
  }

  /**
   * Determine if the '<code>uptime</code>' attribute was set.
   *
   * @return true if the '<code>uptime</code>' attribute was set.
   */
  bool has_uptime() const {
    return Storage().isMember("uptime");
  }

  /**
   * Clears the '<code>uptime</code>' attribute.
   */
  void clear_uptime() {
    MutableStorage()->removeMember("uptime");
  }


  /**
   * Get the value of the '<code>uptime</code>' attribute.
   */
  const StringPiece get_uptime() const {
    const Json::Value& v = Storage("uptime");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>uptime</code>' attribute.
   *
   * Time this session has been up. Format: 14 years, 51 weeks, 6 days, 23
   * hours, 59 minutes, 59 seconds.
   *
   * @param[in] value The new value.
   */
  void set_uptime(const StringPiece& value) {
    *MutableStorage("uptime") = value.data();
  }

  /**
   * Determine if the '<code>uptimeSeconds</code>' attribute was set.
   *
   * @return true if the '<code>uptimeSeconds</code>' attribute was set.
   */
  bool has_uptime_seconds() const {
    return Storage().isMember("uptimeSeconds");
  }

  /**
   * Clears the '<code>uptimeSeconds</code>' attribute.
   */
  void clear_uptime_seconds() {
    MutableStorage()->removeMember("uptimeSeconds");
  }


  /**
   * Get the value of the '<code>uptimeSeconds</code>' attribute.
   */
  const StringPiece get_uptime_seconds() const {
    const Json::Value& v = Storage("uptimeSeconds");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>uptimeSeconds</code>' attribute.
   *
   * Time this session has been up, in seconds. Format: 145.
   *
   * @param[in] value The new value.
   */
  void set_uptime_seconds(const StringPiece& value) {
    *MutableStorage("uptimeSeconds") = value.data();
  }

 private:
  void operator=(const RouterStatusBgpPeerStatus&);
};  // RouterStatusBgpPeerStatus
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_ROUTER_STATUS_BGP_PEER_STATUS_H_
