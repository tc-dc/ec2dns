// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_INSTANCE_GROUP_MANAGER_H_
#define  GOOGLE_COMPUTE_API_INSTANCE_GROUP_MANAGER_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/instance_group_manager_actions_summary.h"
#include "google/compute_api/named_port.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * An Instance Group Manager resource.
 *
 * @ingroup DataObject
 */
class InstanceGroupManager : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static InstanceGroupManager* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit InstanceGroupManager(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit InstanceGroupManager(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManager();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::InstanceGroupManager</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::InstanceGroupManager");
  }

  /**
   * Determine if the '<code>baseInstanceName</code>' attribute was set.
   *
   * @return true if the '<code>baseInstanceName</code>' attribute was set.
   */
  bool has_base_instance_name() const {
    return Storage().isMember("baseInstanceName");
  }

  /**
   * Clears the '<code>baseInstanceName</code>' attribute.
   */
  void clear_base_instance_name() {
    MutableStorage()->removeMember("baseInstanceName");
  }


  /**
   * Get the value of the '<code>baseInstanceName</code>' attribute.
   */
  const StringPiece get_base_instance_name() const {
    const Json::Value& v = Storage("baseInstanceName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>baseInstanceName</code>' attribute.
   *
   * The base instance name to use for instances in this group. The value must
   * be 1-58 characters long. Instances are named by appending a hyphen and a
   * random four-character string to the base instance name. The base instance
   * name must comply with RFC1035.
   *
   * @param[in] value The new value.
   */
  void set_base_instance_name(const StringPiece& value) {
    *MutableStorage("baseInstanceName") = value.data();
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] The creation timestamp for this managed instance group in
   * RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>currentActions</code>' attribute was set.
   *
   * @return true if the '<code>currentActions</code>' attribute was set.
   */
  bool has_current_actions() const {
    return Storage().isMember("currentActions");
  }

  /**
   * Clears the '<code>currentActions</code>' attribute.
   */
  void clear_current_actions() {
    MutableStorage()->removeMember("currentActions");
  }


  /**
   * Get a reference to the value of the '<code>currentActions</code>'
   * attribute.
   */
  const InstanceGroupManagerActionsSummary get_current_actions() const;

  /**
   * Gets a reference to a mutable value of the '<code>currentActions</code>'
   * property.
   *
   * [Output Only] The list of instance actions and the number of instances in
   * this managed instance group that are scheduled for each of those actions.
   *
   * @return The result can be modified to change the attribute value.
   */
  InstanceGroupManagerActionsSummary mutable_currentActions();

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>fingerprint</code>' attribute was set.
   *
   * @return true if the '<code>fingerprint</code>' attribute was set.
   */
  bool has_fingerprint() const {
    return Storage().isMember("fingerprint");
  }

  /**
   * Clears the '<code>fingerprint</code>' attribute.
   */
  void clear_fingerprint() {
    MutableStorage()->removeMember("fingerprint");
  }


  /**
   * Get the value of the '<code>fingerprint</code>' attribute.
   */
  const StringPiece get_fingerprint() const {
    const Json::Value& v = Storage("fingerprint");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fingerprint</code>' attribute.
   *
   * [Output Only] The fingerprint of the resource data. You can use this
   * optional field for optimistic locking when you update the resource.
   *
   * @param[in] value The new value.
   */
  void set_fingerprint(const StringPiece& value) {
    *MutableStorage("fingerprint") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] A unique identifier for this resource type. The server
   * generates this identifier.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>instanceGroup</code>' attribute was set.
   *
   * @return true if the '<code>instanceGroup</code>' attribute was set.
   */
  bool has_instance_group() const {
    return Storage().isMember("instanceGroup");
  }

  /**
   * Clears the '<code>instanceGroup</code>' attribute.
   */
  void clear_instance_group() {
    MutableStorage()->removeMember("instanceGroup");
  }


  /**
   * Get the value of the '<code>instanceGroup</code>' attribute.
   */
  const StringPiece get_instance_group() const {
    const Json::Value& v = Storage("instanceGroup");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>instanceGroup</code>' attribute.
   *
   * [Output Only] The URL of the Instance Group resource.
   *
   * @param[in] value The new value.
   */
  void set_instance_group(const StringPiece& value) {
    *MutableStorage("instanceGroup") = value.data();
  }

  /**
   * Determine if the '<code>instanceTemplate</code>' attribute was set.
   *
   * @return true if the '<code>instanceTemplate</code>' attribute was set.
   */
  bool has_instance_template() const {
    return Storage().isMember("instanceTemplate");
  }

  /**
   * Clears the '<code>instanceTemplate</code>' attribute.
   */
  void clear_instance_template() {
    MutableStorage()->removeMember("instanceTemplate");
  }


  /**
   * Get the value of the '<code>instanceTemplate</code>' attribute.
   */
  const StringPiece get_instance_template() const {
    const Json::Value& v = Storage("instanceTemplate");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>instanceTemplate</code>' attribute.
   *
   * The URL of the instance template that is specified for this managed
   * instance group. The group uses this template to create all new instances in
   * the managed instance group.
   *
   * @param[in] value The new value.
   */
  void set_instance_template(const StringPiece& value) {
    *MutableStorage("instanceTemplate") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] The resource type, which is always
   * compute#instanceGroupManager for managed instance groups.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * The name of the managed instance group. The name must be 1-63 characters
   * long, and comply with RFC1035.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>namedPorts</code>' attribute was set.
   *
   * @return true if the '<code>namedPorts</code>' attribute was set.
   */
  bool has_named_ports() const {
    return Storage().isMember("namedPorts");
  }

  /**
   * Clears the '<code>namedPorts</code>' attribute.
   */
  void clear_named_ports() {
    MutableStorage()->removeMember("namedPorts");
  }


  /**
   * Get a reference to the value of the '<code>namedPorts</code>' attribute.
   */
  const client::JsonCppArray<NamedPort > get_named_ports() const;

  /**
   * Gets a reference to a mutable value of the '<code>namedPorts</code>'
   * property.
   *
   * Named ports configured for the Instance Groups complementary to this
   * Instance Group Manager.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<NamedPort > mutable_namedPorts();

  /**
   * Determine if the '<code>region</code>' attribute was set.
   *
   * @return true if the '<code>region</code>' attribute was set.
   */
  bool has_region() const {
    return Storage().isMember("region");
  }

  /**
   * Clears the '<code>region</code>' attribute.
   */
  void clear_region() {
    MutableStorage()->removeMember("region");
  }


  /**
   * Get the value of the '<code>region</code>' attribute.
   */
  const StringPiece get_region() const {
    const Json::Value& v = Storage("region");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>region</code>' attribute.
   *
   * [Output Only] The URL of the region where the managed instance group
   * resides (for regional resources).
   *
   * @param[in] value The new value.
   */
  void set_region(const StringPiece& value) {
    *MutableStorage("region") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] The URL for this managed instance group. The server defines
   * this URL.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>targetPools</code>' attribute was set.
   *
   * @return true if the '<code>targetPools</code>' attribute was set.
   */
  bool has_target_pools() const {
    return Storage().isMember("targetPools");
  }

  /**
   * Clears the '<code>targetPools</code>' attribute.
   */
  void clear_target_pools() {
    MutableStorage()->removeMember("targetPools");
  }


  /**
   * Get a reference to the value of the '<code>targetPools</code>' attribute.
   */
  const client::JsonCppArray<string > get_target_pools() const {
     const Json::Value& storage = Storage("targetPools");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>targetPools</code>'
   * property.
   *
   * The URLs for all TargetPool resources to which instances in the
   * instanceGroup field are added. The target pools automatically apply to all
   * of the instances in the managed instance group.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_targetPools() {
    Json::Value* storage = MutableStorage("targetPools");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>targetSize</code>' attribute was set.
   *
   * @return true if the '<code>targetSize</code>' attribute was set.
   */
  bool has_target_size() const {
    return Storage().isMember("targetSize");
  }

  /**
   * Clears the '<code>targetSize</code>' attribute.
   */
  void clear_target_size() {
    MutableStorage()->removeMember("targetSize");
  }


  /**
   * Get the value of the '<code>targetSize</code>' attribute.
   */
  int32 get_target_size() const {
    const Json::Value& storage = Storage("targetSize");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>targetSize</code>' attribute.
   *
   * The target number of running instances for this managed instance group.
   * Deleting or abandoning instances reduces this number. Resizing the group
   * changes this number.
   *
   * @param[in] value The new value.
   */
  void set_target_size(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("targetSize"));
  }

  /**
   * Determine if the '<code>zone</code>' attribute was set.
   *
   * @return true if the '<code>zone</code>' attribute was set.
   */
  bool has_zone() const {
    return Storage().isMember("zone");
  }

  /**
   * Clears the '<code>zone</code>' attribute.
   */
  void clear_zone() {
    MutableStorage()->removeMember("zone");
  }


  /**
   * Get the value of the '<code>zone</code>' attribute.
   */
  const StringPiece get_zone() const {
    const Json::Value& v = Storage("zone");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>zone</code>' attribute.
   *
   * [Output Only] The URL of the zone where the managed instance group is
   * located (for zonal resources).
   *
   * @param[in] value The new value.
   */
  void set_zone(const StringPiece& value) {
    *MutableStorage("zone") = value.data();
  }

 private:
  void operator=(const InstanceGroupManager&);
};  // InstanceGroupManager
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_INSTANCE_GROUP_MANAGER_H_
