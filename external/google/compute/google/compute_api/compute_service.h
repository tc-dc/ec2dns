// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_COMPUTE_API_COMPUTE_SERVICE_H_
#define  GOOGLE_COMPUTE_API_COMPUTE_SERVICE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/compute_api/access_config.h"
#include "google/compute_api/address.h"
#include "google/compute_api/address_aggregated_list.h"
#include "google/compute_api/address_list.h"
#include "google/compute_api/attached_disk.h"
#include "google/compute_api/autoscaler.h"
#include "google/compute_api/autoscaler_aggregated_list.h"
#include "google/compute_api/autoscaler_list.h"
#include "google/compute_api/backend_service.h"
#include "google/compute_api/backend_service_aggregated_list.h"
#include "google/compute_api/backend_service_group_health.h"
#include "google/compute_api/backend_service_list.h"
#include "google/compute_api/cache_invalidation_rule.h"
#include "google/compute_api/deprecation_status.h"
#include "google/compute_api/disk.h"
#include "google/compute_api/disk_aggregated_list.h"
#include "google/compute_api/disk_list.h"
#include "google/compute_api/disk_move_request.h"
#include "google/compute_api/disk_type.h"
#include "google/compute_api/disk_type_aggregated_list.h"
#include "google/compute_api/disk_type_list.h"
#include "google/compute_api/disks_resize_request.h"
#include "google/compute_api/firewall.h"
#include "google/compute_api/firewall_list.h"
#include "google/compute_api/forwarding_rule.h"
#include "google/compute_api/forwarding_rule_aggregated_list.h"
#include "google/compute_api/forwarding_rule_list.h"
#include "google/compute_api/health_check.h"
#include "google/compute_api/health_check_list.h"
#include "google/compute_api/http_health_check.h"
#include "google/compute_api/http_health_check_list.h"
#include "google/compute_api/https_health_check.h"
#include "google/compute_api/https_health_check_list.h"
#include "google/compute_api/image.h"
#include "google/compute_api/image_list.h"
#include "google/compute_api/instance.h"
#include "google/compute_api/instance_aggregated_list.h"
#include "google/compute_api/instance_group.h"
#include "google/compute_api/instance_group_aggregated_list.h"
#include "google/compute_api/instance_group_list.h"
#include "google/compute_api/instance_group_manager.h"
#include "google/compute_api/instance_group_manager_aggregated_list.h"
#include "google/compute_api/instance_group_manager_list.h"
#include "google/compute_api/instance_group_managers_abandon_instances_request.h"
#include "google/compute_api/instance_group_managers_delete_instances_request.h"
#include "google/compute_api/instance_group_managers_list_managed_instances_response.h"
#include "google/compute_api/instance_group_managers_recreate_instances_request.h"
#include "google/compute_api/instance_group_managers_set_instance_template_request.h"
#include "google/compute_api/instance_group_managers_set_target_pools_request.h"
#include "google/compute_api/instance_groups_add_instances_request.h"
#include "google/compute_api/instance_groups_list_instances.h"
#include "google/compute_api/instance_groups_list_instances_request.h"
#include "google/compute_api/instance_groups_remove_instances_request.h"
#include "google/compute_api/instance_groups_set_named_ports_request.h"
#include "google/compute_api/instance_list.h"
#include "google/compute_api/instance_move_request.h"
#include "google/compute_api/instance_reference.h"
#include "google/compute_api/instance_template.h"
#include "google/compute_api/instance_template_list.h"
#include "google/compute_api/instances_set_machine_type_request.h"
#include "google/compute_api/instances_set_service_account_request.h"
#include "google/compute_api/instances_start_with_encryption_key_request.h"
#include "google/compute_api/license.h"
#include "google/compute_api/machine_type.h"
#include "google/compute_api/machine_type_aggregated_list.h"
#include "google/compute_api/machine_type_list.h"
#include "google/compute_api/metadata.h"
#include "google/compute_api/network.h"
#include "google/compute_api/network_list.h"
#include "google/compute_api/operation.h"
#include "google/compute_api/operation_aggregated_list.h"
#include "google/compute_api/operation_list.h"
#include "google/compute_api/project.h"
#include "google/compute_api/region.h"
#include "google/compute_api/region_autoscaler_list.h"
#include "google/compute_api/region_instance_group_list.h"
#include "google/compute_api/region_instance_group_manager_list.h"
#include "google/compute_api/region_instance_group_managers_abandon_instances_request.h"
#include "google/compute_api/region_instance_group_managers_delete_instances_request.h"
#include "google/compute_api/region_instance_group_managers_list_instances_response.h"
#include "google/compute_api/region_instance_group_managers_recreate_request.h"
#include "google/compute_api/region_instance_group_managers_set_target_pools_request.h"
#include "google/compute_api/region_instance_group_managers_set_template_request.h"
#include "google/compute_api/region_instance_groups_list_instances.h"
#include "google/compute_api/region_instance_groups_list_instances_request.h"
#include "google/compute_api/region_instance_groups_set_named_ports_request.h"
#include "google/compute_api/region_list.h"
#include "google/compute_api/resource_group_reference.h"
#include "google/compute_api/route.h"
#include "google/compute_api/route_list.h"
#include "google/compute_api/router.h"
#include "google/compute_api/router_aggregated_list.h"
#include "google/compute_api/router_list.h"
#include "google/compute_api/router_status_response.h"
#include "google/compute_api/routers_preview_response.h"
#include "google/compute_api/scheduling.h"
#include "google/compute_api/serial_port_output.h"
#include "google/compute_api/snapshot.h"
#include "google/compute_api/snapshot_list.h"
#include "google/compute_api/ssl_certificate.h"
#include "google/compute_api/ssl_certificate_list.h"
#include "google/compute_api/subnetwork.h"
#include "google/compute_api/subnetwork_aggregated_list.h"
#include "google/compute_api/subnetwork_list.h"
#include "google/compute_api/subnetworks_expand_ip_cidr_range_request.h"
#include "google/compute_api/tags.h"
#include "google/compute_api/target_http_proxy.h"
#include "google/compute_api/target_http_proxy_list.h"
#include "google/compute_api/target_https_proxies_set_ssl_certificates_request.h"
#include "google/compute_api/target_https_proxy.h"
#include "google/compute_api/target_https_proxy_list.h"
#include "google/compute_api/target_instance.h"
#include "google/compute_api/target_instance_aggregated_list.h"
#include "google/compute_api/target_instance_list.h"
#include "google/compute_api/target_pool.h"
#include "google/compute_api/target_pool_aggregated_list.h"
#include "google/compute_api/target_pool_instance_health.h"
#include "google/compute_api/target_pool_list.h"
#include "google/compute_api/target_pools_add_health_check_request.h"
#include "google/compute_api/target_pools_add_instance_request.h"
#include "google/compute_api/target_pools_remove_health_check_request.h"
#include "google/compute_api/target_pools_remove_instance_request.h"
#include "google/compute_api/target_reference.h"
#include "google/compute_api/target_ssl_proxies_set_backend_service_request.h"
#include "google/compute_api/target_ssl_proxies_set_proxy_header_request.h"
#include "google/compute_api/target_ssl_proxies_set_ssl_certificates_request.h"
#include "google/compute_api/target_ssl_proxy.h"
#include "google/compute_api/target_ssl_proxy_list.h"
#include "google/compute_api/target_vpn_gateway.h"
#include "google/compute_api/target_vpn_gateway_aggregated_list.h"
#include "google/compute_api/target_vpn_gateway_list.h"
#include "google/compute_api/url_map.h"
#include "google/compute_api/url_map_list.h"
#include "google/compute_api/url_map_reference.h"
#include "google/compute_api/url_maps_validate_request.h"
#include "google/compute_api/url_maps_validate_response.h"
#include "google/compute_api/usage_export_location.h"
#include "google/compute_api/vpn_tunnel.h"
#include "google/compute_api/vpn_tunnel_aggregated_list.h"
#include "google/compute_api/vpn_tunnel_list.h"
#include "google/compute_api/zone.h"
#include "google/compute_api/zone_list.h"


namespace google_compute_api {
using namespace googleapis;
/**
 * \mainpage
 *   Compute Engine API Version v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/compute/docs/reference/latest/'>Compute Engine API</a>
 *      <tr><th>API Version<td>v1
 *      <tr><th>API Rev<td>133
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/compute/docs/reference/latest/'>
 *              https://developers.google.com/compute/docs/reference/latest/</a>
 *      <tr><th>Discovery Name<td>compute
 *      <tr><th>Generated At<td>2017-01-18 05:15:31 UTC
 *      <tr><th>C++ Generator<td>google-apis-code-generator
 *      <tr><th>Generator Version
 *          <td>1.5.1 / c++=0.1.4
 *      <tr><th>Generator Build<td>2017-01-11 18:31:16 UTC
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Compute Engine API can be found at
 * <a href='https://developers.google.com/compute/docs/reference/latest/'>https://developers.google.com/compute/docs/reference/latest/</a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class ComputeService;

/**
 * Implements a common base method for all methods within the ComputeService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class ComputeServiceBaseRequest
      : public client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  ComputeServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~ComputeServiceBaseRequest();


  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    client::ClearCppValueHelper(&alt_);
  }


  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }


  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value Data format for the response.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }



  /**
   * Clears the '<code>fields</code>' attribute so it is no longer set.
   */
  void clear_fields() {
    _have_fields_ = false;
    client::ClearCppValueHelper(&fields_);
  }


  /**
   * Gets the optional '<code>fields</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_fields() const { return fields_; }

  /**
   * Gets a modifiable pointer to the optional <code>fields</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_fields() {
    _have_fields_ = true;
    return &fields_;
  }


  /**
   * Sets the '<code>fields</code>' attribute.
   *
   * @param[in] value Selector specifying which fields to include in a partial
   * response.
   */
  void set_fields(const string& value) {
    _have_fields_ = true;
    fields_ = value;
  }



  /**
   * Clears the '<code>key</code>' attribute so it is no longer set.
   */
  void clear_key() {
    _have_key_ = false;
    client::ClearCppValueHelper(&key_);
  }


  /**
   * Gets the optional '<code>key</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_key() const { return key_; }

  /**
   * Gets a modifiable pointer to the optional <code>key</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_key() {
    _have_key_ = true;
    return &key_;
  }


  /**
   * Sets the '<code>key</code>' attribute.
   *
   * @param[in] value API key. Your API key identifies your project and provides
   * you with API access, quota, and reports. Required unless you provide an
   * OAuth 2.0 token.
   */
  void set_key(const string& value) {
    _have_key_ = true;
    key_ = value;
  }



  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauth_token() {
    _have_oauth_token_ = false;
    client::ClearCppValueHelper(&oauth_token_);
  }


  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauth_token() const { return oauth_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauth_token_ = true;
    return &oauth_token_;
  }


  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value OAuth 2.0 token for the current user.
   */
  void set_oauth_token(const string& value) {
    _have_oauth_token_ = true;
    oauth_token_ = value;
  }



  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_pretty_print() {
    _have_pretty_print_ = false;
    client::ClearCppValueHelper(&pretty_print_);
  }


  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_pretty_print() const { return pretty_print_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value Returns response with indentations and line breaks.
   */
  void set_pretty_print(bool value) {
    _have_pretty_print_ = true;
    pretty_print_ = value;
  }

  /**
   * Clears the '<code>quotaUser</code>' attribute so it is no longer set.
   */
  void clear_quota_user() {
    _have_quota_user_ = false;
    client::ClearCppValueHelper(&quota_user_);
  }


  /**
   * Gets the optional '<code>quotaUser</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_quota_user() const { return quota_user_; }

  /**
   * Gets a modifiable pointer to the optional <code>quotaUser</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_quotaUser() {
    _have_quota_user_ = true;
    return &quota_user_;
  }


  /**
   * Sets the '<code>quotaUser</code>' attribute.
   *
   * @param[in] value Available to use for quota purposes for server-side
   * applications. Can be any arbitrary string assigned to a user, but should
   * not exceed 40 characters. Overrides userIp if both are provided.
   */
  void set_quota_user(const string& value) {
    _have_quota_user_ = true;
    quota_user_ = value;
  }



  /**
   * Clears the '<code>userIp</code>' attribute so it is no longer set.
   */
  void clear_user_ip() {
    _have_user_ip_ = false;
    client::ClearCppValueHelper(&user_ip_);
  }


  /**
   * Gets the optional '<code>userIp</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_user_ip() const { return user_ip_; }

  /**
   * Gets a modifiable pointer to the optional <code>userIp</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_userIp() {
    _have_user_ip_ = true;
    return &user_ip_;
  }


  /**
   * Sets the '<code>userIp</code>' attribute.
   *
   * @param[in] value IP address of the site where the request originates. Use
   * this if you want to enforce per-user limits.
   */
  void set_user_ip(const string& value) {
    _have_user_ip_ = true;
    user_ip_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
      const StringPiece& variable_name,
      const client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 protected:
  /**
   * Prepares the method's HTTP request to send body content as JSON.
   *
   * Only to be used for method constructors.
   */
  void AddJsonContentToRequest(const client::JsonCppData *content);

 private:
  string alt_;
  string fields_;
  string key_;
  string oauth_token_;
  bool pretty_print_;
  string quota_user_;
  string user_ip_;
  bool _have_alt_ : 1;
  bool _have_fields_ : 1;
  bool _have_key_ : 1;
  bool _have_oauth_token_ : 1;
  bool _have_pretty_print_ : 1;
  bool _have_quota_user_ : 1;
  bool _have_user_ip_ : 1;

  DISALLOW_COPY_AND_ASSIGN(ComputeServiceBaseRequest);
};



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class AddressesResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  AddressesResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~AddressesResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AddressAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(AddressesResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            AddressesResource_AggregatedListMethod,
            AddressAggregatedList>
        AddressesResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class AddressesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] address Name of the address resource to delete.
   */
  AddressesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& address);

  /**
   * Standard destructor.
   */
  virtual ~AddressesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string address_;
  DISALLOW_COPY_AND_ASSIGN(AddressesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class AddressesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] address Name of the address resource to return.
   */
  AddressesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& address);

  /**
   * Standard destructor.
   */
  virtual ~AddressesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Address* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string address_;
  DISALLOW_COPY_AND_ASSIGN(AddressesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class AddressesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] _content_ The data object to insert.
   */
  AddressesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const Address& _content_);

  /**
   * Standard destructor.
   */
  virtual ~AddressesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(AddressesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class AddressesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   */
  AddressesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~AddressesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AddressList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(AddressesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            AddressesResource_ListMethod,
            AddressList>
        AddressesResource_ListMethodPager;



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class AutoscalersResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  AutoscalersResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~AutoscalersResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AutoscalerAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(AutoscalersResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            AutoscalersResource_AggregatedListMethod,
            AutoscalerAggregatedList>
        AutoscalersResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class AutoscalersResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone for this request.
   * @param[in] autoscaler Name of the autoscaler to delete.
   */
  AutoscalersResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& autoscaler);

  /**
   * Standard destructor.
   */
  virtual ~AutoscalersResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string autoscaler_;
  DISALLOW_COPY_AND_ASSIGN(AutoscalersResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class AutoscalersResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone for this request.
   * @param[in] autoscaler Name of the autoscaler to return.
   */
  AutoscalersResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& autoscaler);

  /**
   * Standard destructor.
   */
  virtual ~AutoscalersResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Autoscaler* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string autoscaler_;
  DISALLOW_COPY_AND_ASSIGN(AutoscalersResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class AutoscalersResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone for this request.
   * @param[in] _content_ The data object to insert.
   */
  AutoscalersResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const Autoscaler& _content_);

  /**
   * Standard destructor.
   */
  virtual ~AutoscalersResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(AutoscalersResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class AutoscalersResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone for this request.
   */
  AutoscalersResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~AutoscalersResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AutoscalerList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(AutoscalersResource_ListMethod);
};

typedef client::ServiceRequestPager<
            AutoscalersResource_ListMethod,
            AutoscalerList>
        AutoscalersResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class AutoscalersResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone for this request.
   * @param[in] autoscaler Name of the autoscaler to update.
   * @param[in] _content_ The data object to patch.
   */
  AutoscalersResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& autoscaler,
      const Autoscaler& _content_);

  /**
   * Standard destructor.
   */
  virtual ~AutoscalersResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string autoscaler_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(AutoscalersResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class AutoscalersResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone for this request.
   * @param[in] _content_ The data object to update.
   */
  AutoscalersResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const Autoscaler& _content_);

  /**
   * Standard destructor.
   */
  virtual ~AutoscalersResource_UpdateMethod();


    /**
     * Clears the '<code>autoscaler</code>' attribute so it is no longer set.
     */
    void clear_autoscaler() {
      _have_autoscaler_ = false;
      client::ClearCppValueHelper(&autoscaler_);
    }


    /**
     * Gets the optional '<code>autoscaler</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_autoscaler() const { return autoscaler_; }

    /**
     * Gets a modifiable pointer to the optional <code>autoscaler</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_autoscaler() {
      _have_autoscaler_ = true;
      return &autoscaler_;
    }


    /**
     * Sets the '<code>autoscaler</code>' attribute.
     *
     * @param[in] value Name of the autoscaler to update.
     */
    void set_autoscaler(const string& value) {
      _have_autoscaler_ = true;
      autoscaler_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string autoscaler_;
  bool _have_autoscaler_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(AutoscalersResource_UpdateMethod);
};



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class BackendServicesResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Name of the project scoping this request.
   */
  BackendServicesResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~BackendServicesResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      BackendServiceAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(BackendServicesResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            BackendServicesResource_AggregatedListMethod,
            BackendServiceAggregatedList>
        BackendServicesResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class BackendServicesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] backend_service Name of the BackendService resource to delete.
   */
  BackendServicesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& backend_service);

  /**
   * Standard destructor.
   */
  virtual ~BackendServicesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string backend_service_;
  DISALLOW_COPY_AND_ASSIGN(BackendServicesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class BackendServicesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] backend_service Name of the BackendService resource to return.
   */
  BackendServicesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& backend_service);

  /**
   * Standard destructor.
   */
  virtual ~BackendServicesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      BackendService* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string backend_service_;
  DISALLOW_COPY_AND_ASSIGN(BackendServicesResource_GetMethod);
};

/**
 * Implements the getHealth method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class BackendServicesResource_GetHealthMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project
   * @param[in] backend_service Name of the BackendService resource to which the
   * queried instance belongs.
   * @param[in] _content_ The data object to getHealth.
   */
  BackendServicesResource_GetHealthMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& backend_service,
      const ResourceGroupReference& _content_);

  /**
   * Standard destructor.
   */
  virtual ~BackendServicesResource_GetHealthMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      BackendServiceGroupHealth* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string backend_service_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(BackendServicesResource_GetHealthMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class BackendServicesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  BackendServicesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const BackendService& _content_);

  /**
   * Standard destructor.
   */
  virtual ~BackendServicesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(BackendServicesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class BackendServicesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  BackendServicesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~BackendServicesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      BackendServiceList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(BackendServicesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            BackendServicesResource_ListMethod,
            BackendServiceList>
        BackendServicesResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class BackendServicesResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] backend_service Name of the BackendService resource to update.
   * @param[in] _content_ The data object to patch.
   */
  BackendServicesResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& backend_service,
      const BackendService& _content_);

  /**
   * Standard destructor.
   */
  virtual ~BackendServicesResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string backend_service_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(BackendServicesResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class BackendServicesResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] backend_service Name of the BackendService resource to update.
   * @param[in] _content_ The data object to update.
   */
  BackendServicesResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& backend_service,
      const BackendService& _content_);

  /**
   * Standard destructor.
   */
  virtual ~BackendServicesResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string backend_service_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(BackendServicesResource_UpdateMethod);
};



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class DiskTypesResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  DiskTypesResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~DiskTypesResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      DiskTypeAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(DiskTypesResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            DiskTypesResource_AggregatedListMethod,
            DiskTypeAggregatedList>
        DiskTypesResource_AggregatedListMethodPager;

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class DiskTypesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] disk_type Name of the disk type to return.
   */
  DiskTypesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& disk_type);

  /**
   * Standard destructor.
   */
  virtual ~DiskTypesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      DiskType* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string disk_type_;
  DISALLOW_COPY_AND_ASSIGN(DiskTypesResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class DiskTypesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   */
  DiskTypesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~DiskTypesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      DiskTypeList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(DiskTypesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            DiskTypesResource_ListMethod,
            DiskTypeList>
        DiskTypesResource_ListMethodPager;



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class DisksResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  DisksResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~DisksResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      DiskAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(DisksResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            DisksResource_AggregatedListMethod,
            DiskAggregatedList>
        DisksResource_AggregatedListMethodPager;

/**
 * Implements the createSnapshot method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class DisksResource_CreateSnapshotMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] disk Name of the persistent disk to snapshot.
   * @param[in] _content_ The data object to createSnapshot.
   */
  DisksResource_CreateSnapshotMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& disk,
      const Snapshot& _content_);

  /**
   * Standard destructor.
   */
  virtual ~DisksResource_CreateSnapshotMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string disk_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(DisksResource_CreateSnapshotMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class DisksResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] disk Name of the persistent disk to delete.
   */
  DisksResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& disk);

  /**
   * Standard destructor.
   */
  virtual ~DisksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string disk_;
  DISALLOW_COPY_AND_ASSIGN(DisksResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class DisksResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] disk Name of the persistent disk to return.
   */
  DisksResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& disk);

  /**
   * Standard destructor.
   */
  virtual ~DisksResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Disk* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string disk_;
  DISALLOW_COPY_AND_ASSIGN(DisksResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class DisksResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] _content_ The data object to insert.
   */
  DisksResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const Disk& _content_);

  /**
   * Standard destructor.
   */
  virtual ~DisksResource_InsertMethod();


    /**
     * Clears the '<code>sourceImage</code>' attribute so it is no longer set.
     */
    void clear_source_image() {
      _have_source_image_ = false;
      client::ClearCppValueHelper(&source_image_);
    }


    /**
     * Gets the optional '<code>sourceImage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_source_image() const { return source_image_; }

    /**
     * Gets a modifiable pointer to the optional <code>sourceImage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_sourceImage() {
      _have_source_image_ = true;
      return &source_image_;
    }


    /**
     * Sets the '<code>sourceImage</code>' attribute.
     *
     * @param[in] value Optional. Source image to restore onto a disk.
     */
    void set_source_image(const string& value) {
      _have_source_image_ = true;
      source_image_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string source_image_;
  bool _have_source_image_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(DisksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class DisksResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   */
  DisksResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~DisksResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      DiskList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(DisksResource_ListMethod);
};

typedef client::ServiceRequestPager<
            DisksResource_ListMethod,
            DiskList>
        DisksResource_ListMethodPager;

/**
 * Implements the resize method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class DisksResource_ResizeMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] disk The name of the persistent disk.
   * @param[in] _content_ The data object to resize.
   */
  DisksResource_ResizeMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& disk,
      const DisksResizeRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~DisksResource_ResizeMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string disk_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(DisksResource_ResizeMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class FirewallsResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] firewall Name of the firewall rule to delete.
   */
  FirewallsResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& firewall);

  /**
   * Standard destructor.
   */
  virtual ~FirewallsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string firewall_;
  DISALLOW_COPY_AND_ASSIGN(FirewallsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class FirewallsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] firewall Name of the firewall rule to return.
   */
  FirewallsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& firewall);

  /**
   * Standard destructor.
   */
  virtual ~FirewallsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Firewall* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string firewall_;
  DISALLOW_COPY_AND_ASSIGN(FirewallsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class FirewallsResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  FirewallsResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const Firewall& _content_);

  /**
   * Standard destructor.
   */
  virtual ~FirewallsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(FirewallsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class FirewallsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  FirewallsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~FirewallsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      FirewallList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(FirewallsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            FirewallsResource_ListMethod,
            FirewallList>
        FirewallsResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class FirewallsResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] firewall Name of the firewall rule to update.
   * @param[in] _content_ The data object to patch.
   */
  FirewallsResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& firewall,
      const Firewall& _content_);

  /**
   * Standard destructor.
   */
  virtual ~FirewallsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string firewall_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(FirewallsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class FirewallsResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] firewall Name of the firewall rule to update.
   * @param[in] _content_ The data object to update.
   */
  FirewallsResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& firewall,
      const Firewall& _content_);

  /**
   * Standard destructor.
   */
  virtual ~FirewallsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string firewall_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(FirewallsResource_UpdateMethod);
};



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ForwardingRulesResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  ForwardingRulesResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~ForwardingRulesResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ForwardingRuleAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ForwardingRulesResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            ForwardingRulesResource_AggregatedListMethod,
            ForwardingRuleAggregatedList>
        ForwardingRulesResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class ForwardingRulesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] forwarding_rule Name of the ForwardingRule resource to delete.
   */
  ForwardingRulesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& forwarding_rule);

  /**
   * Standard destructor.
   */
  virtual ~ForwardingRulesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string forwarding_rule_;
  DISALLOW_COPY_AND_ASSIGN(ForwardingRulesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ForwardingRulesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] forwarding_rule Name of the ForwardingRule resource to return.
   */
  ForwardingRulesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& forwarding_rule);

  /**
   * Standard destructor.
   */
  virtual ~ForwardingRulesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ForwardingRule* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string forwarding_rule_;
  DISALLOW_COPY_AND_ASSIGN(ForwardingRulesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class ForwardingRulesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] _content_ The data object to insert.
   */
  ForwardingRulesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const ForwardingRule& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ForwardingRulesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ForwardingRulesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ForwardingRulesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   */
  ForwardingRulesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~ForwardingRulesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ForwardingRuleList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ForwardingRulesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ForwardingRulesResource_ListMethod,
            ForwardingRuleList>
        ForwardingRulesResource_ListMethodPager;

/**
 * Implements the setTarget method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class ForwardingRulesResource_SetTargetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] forwarding_rule Name of the ForwardingRule resource in which
   * target is to be set.
   * @param[in] _content_ The data object to setTarget.
   */
  ForwardingRulesResource_SetTargetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& forwarding_rule,
      const TargetReference& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ForwardingRulesResource_SetTargetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string forwarding_rule_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ForwardingRulesResource_SetTargetMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class GlobalAddressesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] address Name of the address resource to delete.
   */
  GlobalAddressesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& address);

  /**
   * Standard destructor.
   */
  virtual ~GlobalAddressesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string address_;
  DISALLOW_COPY_AND_ASSIGN(GlobalAddressesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class GlobalAddressesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] address Name of the address resource to return.
   */
  GlobalAddressesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& address);

  /**
   * Standard destructor.
   */
  virtual ~GlobalAddressesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Address* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string address_;
  DISALLOW_COPY_AND_ASSIGN(GlobalAddressesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class GlobalAddressesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  GlobalAddressesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const Address& _content_);

  /**
   * Standard destructor.
   */
  virtual ~GlobalAddressesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(GlobalAddressesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class GlobalAddressesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  GlobalAddressesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~GlobalAddressesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AddressList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(GlobalAddressesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            GlobalAddressesResource_ListMethod,
            AddressList>
        GlobalAddressesResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class GlobalForwardingRulesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] forwarding_rule Name of the ForwardingRule resource to delete.
   */
  GlobalForwardingRulesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& forwarding_rule);

  /**
   * Standard destructor.
   */
  virtual ~GlobalForwardingRulesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string forwarding_rule_;
  DISALLOW_COPY_AND_ASSIGN(GlobalForwardingRulesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class GlobalForwardingRulesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] forwarding_rule Name of the ForwardingRule resource to return.
   */
  GlobalForwardingRulesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& forwarding_rule);

  /**
   * Standard destructor.
   */
  virtual ~GlobalForwardingRulesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ForwardingRule* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string forwarding_rule_;
  DISALLOW_COPY_AND_ASSIGN(GlobalForwardingRulesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class GlobalForwardingRulesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  GlobalForwardingRulesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const ForwardingRule& _content_);

  /**
   * Standard destructor.
   */
  virtual ~GlobalForwardingRulesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(GlobalForwardingRulesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class GlobalForwardingRulesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  GlobalForwardingRulesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~GlobalForwardingRulesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ForwardingRuleList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(GlobalForwardingRulesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            GlobalForwardingRulesResource_ListMethod,
            ForwardingRuleList>
        GlobalForwardingRulesResource_ListMethodPager;

/**
 * Implements the setTarget method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class GlobalForwardingRulesResource_SetTargetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] forwarding_rule Name of the ForwardingRule resource in which
   * target is to be set.
   * @param[in] _content_ The data object to setTarget.
   */
  GlobalForwardingRulesResource_SetTargetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& forwarding_rule,
      const TargetReference& _content_);

  /**
   * Standard destructor.
   */
  virtual ~GlobalForwardingRulesResource_SetTargetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string forwarding_rule_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(GlobalForwardingRulesResource_SetTargetMethod);
};



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class GlobalOperationsResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  GlobalOperationsResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~GlobalOperationsResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      OperationAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(GlobalOperationsResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            GlobalOperationsResource_AggregatedListMethod,
            OperationAggregatedList>
        GlobalOperationsResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class GlobalOperationsResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] operation Name of the Operations resource to delete.
   */
  GlobalOperationsResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& operation);

  /**
   * Standard destructor.
   */
  virtual ~GlobalOperationsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string project_;
  string operation_;
  DISALLOW_COPY_AND_ASSIGN(GlobalOperationsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class GlobalOperationsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] operation Name of the Operations resource to return.
   */
  GlobalOperationsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& operation);

  /**
   * Standard destructor.
   */
  virtual ~GlobalOperationsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string operation_;
  DISALLOW_COPY_AND_ASSIGN(GlobalOperationsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class GlobalOperationsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  GlobalOperationsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~GlobalOperationsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      OperationList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(GlobalOperationsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            GlobalOperationsResource_ListMethod,
            OperationList>
        GlobalOperationsResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HealthChecksResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] health_check Name of the HealthCheck resource to delete.
   */
  HealthChecksResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& health_check);

  /**
   * Standard destructor.
   */
  virtual ~HealthChecksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string health_check_;
  DISALLOW_COPY_AND_ASSIGN(HealthChecksResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class HealthChecksResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] health_check Name of the HealthCheck resource to return.
   */
  HealthChecksResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& health_check);

  /**
   * Standard destructor.
   */
  virtual ~HealthChecksResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      HealthCheck* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string health_check_;
  DISALLOW_COPY_AND_ASSIGN(HealthChecksResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HealthChecksResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  HealthChecksResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const HealthCheck& _content_);

  /**
   * Standard destructor.
   */
  virtual ~HealthChecksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(HealthChecksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class HealthChecksResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  HealthChecksResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~HealthChecksResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      HealthCheckList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(HealthChecksResource_ListMethod);
};

typedef client::ServiceRequestPager<
            HealthChecksResource_ListMethod,
            HealthCheckList>
        HealthChecksResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HealthChecksResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] health_check Name of the HealthCheck resource to update.
   * @param[in] _content_ The data object to patch.
   */
  HealthChecksResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& health_check,
      const HealthCheck& _content_);

  /**
   * Standard destructor.
   */
  virtual ~HealthChecksResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string health_check_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(HealthChecksResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HealthChecksResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] health_check Name of the HealthCheck resource to update.
   * @param[in] _content_ The data object to update.
   */
  HealthChecksResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& health_check,
      const HealthCheck& _content_);

  /**
   * Standard destructor.
   */
  virtual ~HealthChecksResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string health_check_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(HealthChecksResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HttpHealthChecksResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] http_health_check Name of the HttpHealthCheck resource to
   * delete.
   */
  HttpHealthChecksResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& http_health_check);

  /**
   * Standard destructor.
   */
  virtual ~HttpHealthChecksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string http_health_check_;
  DISALLOW_COPY_AND_ASSIGN(HttpHealthChecksResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class HttpHealthChecksResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] http_health_check Name of the HttpHealthCheck resource to
   * return.
   */
  HttpHealthChecksResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& http_health_check);

  /**
   * Standard destructor.
   */
  virtual ~HttpHealthChecksResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      HttpHealthCheck* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string http_health_check_;
  DISALLOW_COPY_AND_ASSIGN(HttpHealthChecksResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HttpHealthChecksResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  HttpHealthChecksResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const HttpHealthCheck& _content_);

  /**
   * Standard destructor.
   */
  virtual ~HttpHealthChecksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(HttpHealthChecksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class HttpHealthChecksResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  HttpHealthChecksResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~HttpHealthChecksResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      HttpHealthCheckList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(HttpHealthChecksResource_ListMethod);
};

typedef client::ServiceRequestPager<
            HttpHealthChecksResource_ListMethod,
            HttpHealthCheckList>
        HttpHealthChecksResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HttpHealthChecksResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] http_health_check Name of the HttpHealthCheck resource to
   * update.
   * @param[in] _content_ The data object to patch.
   */
  HttpHealthChecksResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& http_health_check,
      const HttpHealthCheck& _content_);

  /**
   * Standard destructor.
   */
  virtual ~HttpHealthChecksResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string http_health_check_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(HttpHealthChecksResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HttpHealthChecksResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] http_health_check Name of the HttpHealthCheck resource to
   * update.
   * @param[in] _content_ The data object to update.
   */
  HttpHealthChecksResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& http_health_check,
      const HttpHealthCheck& _content_);

  /**
   * Standard destructor.
   */
  virtual ~HttpHealthChecksResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string http_health_check_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(HttpHealthChecksResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HttpsHealthChecksResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] https_health_check Name of the HttpsHealthCheck resource to
   * delete.
   */
  HttpsHealthChecksResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& https_health_check);

  /**
   * Standard destructor.
   */
  virtual ~HttpsHealthChecksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string https_health_check_;
  DISALLOW_COPY_AND_ASSIGN(HttpsHealthChecksResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class HttpsHealthChecksResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] https_health_check Name of the HttpsHealthCheck resource to
   * return.
   */
  HttpsHealthChecksResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& https_health_check);

  /**
   * Standard destructor.
   */
  virtual ~HttpsHealthChecksResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      HttpsHealthCheck* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string https_health_check_;
  DISALLOW_COPY_AND_ASSIGN(HttpsHealthChecksResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HttpsHealthChecksResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  HttpsHealthChecksResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const HttpsHealthCheck& _content_);

  /**
   * Standard destructor.
   */
  virtual ~HttpsHealthChecksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(HttpsHealthChecksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class HttpsHealthChecksResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  HttpsHealthChecksResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~HttpsHealthChecksResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      HttpsHealthCheckList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(HttpsHealthChecksResource_ListMethod);
};

typedef client::ServiceRequestPager<
            HttpsHealthChecksResource_ListMethod,
            HttpsHealthCheckList>
        HttpsHealthChecksResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HttpsHealthChecksResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] https_health_check Name of the HttpsHealthCheck resource to
   * update.
   * @param[in] _content_ The data object to patch.
   */
  HttpsHealthChecksResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& https_health_check,
      const HttpsHealthCheck& _content_);

  /**
   * Standard destructor.
   */
  virtual ~HttpsHealthChecksResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string https_health_check_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(HttpsHealthChecksResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class HttpsHealthChecksResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] https_health_check Name of the HttpsHealthCheck resource to
   * update.
   * @param[in] _content_ The data object to update.
   */
  HttpsHealthChecksResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& https_health_check,
      const HttpsHealthCheck& _content_);

  /**
   * Standard destructor.
   */
  virtual ~HttpsHealthChecksResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string https_health_check_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(HttpsHealthChecksResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class ImagesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] image Name of the image resource to delete.
   */
  ImagesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& image);

  /**
   * Standard destructor.
   */
  virtual ~ImagesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string image_;
  DISALLOW_COPY_AND_ASSIGN(ImagesResource_DeleteMethod);
};

/**
 * Implements the deprecate method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class ImagesResource_DeprecateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] image Image name.
   * @param[in] _content_ The data object to deprecate.
   */
  ImagesResource_DeprecateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& image,
      const DeprecationStatus& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ImagesResource_DeprecateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string image_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ImagesResource_DeprecateMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ImagesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] image Name of the image resource to return.
   */
  ImagesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& image);

  /**
   * Standard destructor.
   */
  virtual ~ImagesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Image* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string image_;
  DISALLOW_COPY_AND_ASSIGN(ImagesResource_GetMethod);
};

/**
 * Implements the getFromFamily method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ImagesResource_GetFromFamilyMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] family Name of the image family to search for.
   */
  ImagesResource_GetFromFamilyMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& family);

  /**
   * Standard destructor.
   */
  virtual ~ImagesResource_GetFromFamilyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Image* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string family_;
  DISALLOW_COPY_AND_ASSIGN(ImagesResource_GetFromFamilyMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/devstorage.full_control
 * https://www.googleapis.com/auth/devstorage.read_only
 * https://www.googleapis.com/auth/devstorage.read_write
 */
class ImagesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  ImagesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const Image& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ImagesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ImagesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ImagesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  ImagesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~ImagesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ImageList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ImagesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ImagesResource_ListMethod,
            ImageList>
        ImagesResource_ListMethodPager;



/**
 * Implements the abandonInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupManagersResource_AbandonInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   * @param[in] instance_group_manager The name of the managed instance group.
   * @param[in] _content_ The data object to abandonInstances.
   */
  InstanceGroupManagersResource_AbandonInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group_manager,
      const InstanceGroupManagersAbandonInstancesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_AbandonInstancesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_AbandonInstancesMethod);
};

/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceGroupManagersResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  InstanceGroupManagersResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroupManagerAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            InstanceGroupManagersResource_AggregatedListMethod,
            InstanceGroupManagerAggregatedList>
        InstanceGroupManagersResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupManagersResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   * @param[in] instance_group_manager The name of the managed instance group to
   * delete.
   */
  InstanceGroupManagersResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group_manager);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_manager_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_DeleteMethod);
};

/**
 * Implements the deleteInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupManagersResource_DeleteInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   * @param[in] instance_group_manager The name of the managed instance group.
   * @param[in] _content_ The data object to deleteInstances.
   */
  InstanceGroupManagersResource_DeleteInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group_manager,
      const InstanceGroupManagersDeleteInstancesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_DeleteInstancesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_DeleteInstancesMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceGroupManagersResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   * @param[in] instance_group_manager The name of the managed instance group.
   */
  InstanceGroupManagersResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group_manager);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroupManager* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_manager_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupManagersResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where you want to create the managed
   * instance group.
   * @param[in] _content_ The data object to insert.
   */
  InstanceGroupManagersResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const InstanceGroupManager& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceGroupManagersResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   */
  InstanceGroupManagersResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroupManagerList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_ListMethod);
};

typedef client::ServiceRequestPager<
            InstanceGroupManagersResource_ListMethod,
            InstanceGroupManagerList>
        InstanceGroupManagersResource_ListMethodPager;

/**
 * Implements the listManagedInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceGroupManagersResource_ListManagedInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   * @param[in] instance_group_manager The name of the managed instance group.
   */
  InstanceGroupManagersResource_ListManagedInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group_manager);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_ListManagedInstancesMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>order_by</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>order_by</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>order_by</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>order_by</code>' attribute.
     *
     * @param[in] value
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroupManagersListManagedInstancesResponse* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_manager_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_ListManagedInstancesMethod);
};

/**
 * Implements the recreateInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupManagersResource_RecreateInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   * @param[in] instance_group_manager The name of the managed instance group.
   * @param[in] _content_ The data object to recreateInstances.
   */
  InstanceGroupManagersResource_RecreateInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group_manager,
      const InstanceGroupManagersRecreateInstancesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_RecreateInstancesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_RecreateInstancesMethod);
};

/**
 * Implements the resize method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupManagersResource_ResizeMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   * @param[in] instance_group_manager The name of the managed instance group.
   * @param[in] size The number of running instances that the managed instance
   * group should maintain at any given time. The group automatically adds or
   * removes instances to maintain the number of instances specified by this
   * parameter.
   */
  InstanceGroupManagersResource_ResizeMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group_manager,
      const int32& size);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_ResizeMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_manager_;
  int32 size_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_ResizeMethod);
};

/**
 * Implements the setInstanceTemplate method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupManagersResource_SetInstanceTemplateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   * @param[in] instance_group_manager The name of the managed instance group.
   * @param[in] _content_ The data object to setInstanceTemplate.
   */
  InstanceGroupManagersResource_SetInstanceTemplateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group_manager,
      const InstanceGroupManagersSetInstanceTemplateRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_SetInstanceTemplateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_SetInstanceTemplateMethod);
};

/**
 * Implements the setTargetPools method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupManagersResource_SetTargetPoolsMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the managed instance group is
   * located.
   * @param[in] instance_group_manager The name of the managed instance group.
   * @param[in] _content_ The data object to setTargetPools.
   */
  InstanceGroupManagersResource_SetTargetPoolsMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group_manager,
      const InstanceGroupManagersSetTargetPoolsRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupManagersResource_SetTargetPoolsMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource_SetTargetPoolsMethod);
};



/**
 * Implements the addInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupsResource_AddInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the instance group is located.
   * @param[in] instance_group The name of the instance group where you are
   * adding instances.
   * @param[in] _content_ The data object to addInstances.
   */
  InstanceGroupsResource_AddInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group,
      const InstanceGroupsAddInstancesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupsResource_AddInstancesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource_AddInstancesMethod);
};

/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceGroupsResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  InstanceGroupsResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupsResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroupAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            InstanceGroupsResource_AggregatedListMethod,
            InstanceGroupAggregatedList>
        InstanceGroupsResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupsResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the instance group is located.
   * @param[in] instance_group The name of the instance group to delete.
   */
  InstanceGroupsResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceGroupsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the instance group is located.
   * @param[in] instance_group The name of the instance group.
   */
  InstanceGroupsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroup* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupsResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where you want to create the instance
   * group.
   * @param[in] _content_ The data object to insert.
   */
  InstanceGroupsResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const InstanceGroup& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceGroupsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the instance group is located.
   */
  InstanceGroupsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroupList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            InstanceGroupsResource_ListMethod,
            InstanceGroupList>
        InstanceGroupsResource_ListMethodPager;

/**
 * Implements the listInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceGroupsResource_ListInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the instance group is located.
   * @param[in] instance_group The name of the instance group from which you
   * want to generate a list of included instances.
   * @param[in] _content_ The data object to listInstances.
   */
  InstanceGroupsResource_ListInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group,
      const InstanceGroupsListInstancesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupsResource_ListInstancesMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroupsListInstances* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource_ListInstancesMethod);
};

typedef client::ServiceRequestPager<
            InstanceGroupsResource_ListInstancesMethod,
            InstanceGroupsListInstances>
        InstanceGroupsResource_ListInstancesMethodPager;

/**
 * Implements the removeInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupsResource_RemoveInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the instance group is located.
   * @param[in] instance_group The name of the instance group where the
   * specified instances will be removed.
   * @param[in] _content_ The data object to removeInstances.
   */
  InstanceGroupsResource_RemoveInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group,
      const InstanceGroupsRemoveInstancesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupsResource_RemoveInstancesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource_RemoveInstancesMethod);
};

/**
 * Implements the setNamedPorts method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceGroupsResource_SetNamedPortsMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone where the instance group is located.
   * @param[in] instance_group The name of the instance group where the named
   * ports are updated.
   * @param[in] _content_ The data object to setNamedPorts.
   */
  InstanceGroupsResource_SetNamedPortsMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance_group,
      const InstanceGroupsSetNamedPortsRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceGroupsResource_SetNamedPortsMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_group_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource_SetNamedPortsMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceTemplatesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] instance_template The name of the instance template to delete.
   */
  InstanceTemplatesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& instance_template);

  /**
   * Standard destructor.
   */
  virtual ~InstanceTemplatesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string instance_template_;
  DISALLOW_COPY_AND_ASSIGN(InstanceTemplatesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceTemplatesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] instance_template The name of the instance template.
   */
  InstanceTemplatesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& instance_template);

  /**
   * Standard destructor.
   */
  virtual ~InstanceTemplatesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceTemplate* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string instance_template_;
  DISALLOW_COPY_AND_ASSIGN(InstanceTemplatesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstanceTemplatesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  InstanceTemplatesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const InstanceTemplate& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstanceTemplatesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstanceTemplatesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstanceTemplatesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  InstanceTemplatesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~InstanceTemplatesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceTemplateList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(InstanceTemplatesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            InstanceTemplatesResource_ListMethod,
            InstanceTemplateList>
        InstanceTemplatesResource_ListMethodPager;



/**
 * Implements the addAccessConfig method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_AddAccessConfigMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance The instance name for this request.
   * @param[in] network_interface The name of the network interface to add to
   * this instance.
   * @param[in] _content_ The data object to addAccessConfig.
   */
  InstancesResource_AddAccessConfigMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const StringPiece& network_interface,
      const AccessConfig& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_AddAccessConfigMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  string network_interface_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_AddAccessConfigMethod);
};

/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstancesResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  InstancesResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            InstancesResource_AggregatedListMethod,
            InstanceAggregatedList>
        InstancesResource_AggregatedListMethodPager;

/**
 * Implements the attachDisk method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_AttachDiskMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance The instance name for this request.
   * @param[in] _content_ The data object to attachDisk.
   */
  InstancesResource_AttachDiskMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const AttachedDisk& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_AttachDiskMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_AttachDiskMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance resource to delete.
   */
  InstancesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_DeleteMethod);
};

/**
 * Implements the deleteAccessConfig method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_DeleteAccessConfigMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance The instance name for this request.
   * @param[in] access_config The name of the access config to delete.
   * @param[in] network_interface The name of the network interface.
   */
  InstancesResource_DeleteAccessConfigMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const StringPiece& access_config,
      const StringPiece& network_interface);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_DeleteAccessConfigMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  string access_config_;
  string network_interface_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_DeleteAccessConfigMethod);
};

/**
 * Implements the detachDisk method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_DetachDiskMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Instance name.
   * @param[in] device_name Disk device name to detach.
   */
  InstancesResource_DetachDiskMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const StringPiece& device_name);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_DetachDiskMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  string device_name_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_DetachDiskMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstancesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance resource to return.
   */
  InstancesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Instance* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_GetMethod);
};

/**
 * Implements the getSerialPortOutput method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstancesResource_GetSerialPortOutputMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance scoping this request.
   */
  InstancesResource_GetSerialPortOutputMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_GetSerialPortOutputMethod();


    /**
     * Clears the '<code>port</code>' attribute so it is no longer set.
     */
    void clear_port() {
      _have_port_ = false;
      client::ClearCppValueHelper(&port_);
    }


    /**
     * Gets the optional '<code>port</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_port() const { return port_; }

    /**
     * Sets the '<code>port</code>' attribute.
     *
     * @param[in] value Specifies which COM or serial port to retrieve data
     * from.
     */
    void set_port(int32 value) {
      _have_port_ = true;
      port_ = value;
    }

    /**
     * Clears the '<code>start</code>' attribute so it is no longer set.
     */
    void clear_start() {
      _have_start_ = false;
      client::ClearCppValueHelper(&start_);
    }


    /**
     * Gets the optional '<code>start</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int64 get_start() const { return start_; }

    /**
     * Sets the '<code>start</code>' attribute.
     *
     * @param[in] value For the initial request, leave this field unspecified.
     * For subsequent calls, this field should be set to the next value that was
     * returned in the previous call.
     */
    void set_start(int64 value) {
      _have_start_ = true;
      start_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SerialPortOutput* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  int32 port_;
  int64 start_;
  bool _have_port_ : 1;
  bool _have_start_ : 1;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_GetSerialPortOutputMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] _content_ The data object to insert.
   */
  InstancesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const Instance& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class InstancesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   */
  InstancesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            InstancesResource_ListMethod,
            InstanceList>
        InstancesResource_ListMethodPager;

/**
 * Implements the reset method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_ResetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance scoping this request.
   */
  InstancesResource_ResetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_ResetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_ResetMethod);
};

/**
 * Implements the setDiskAutoDelete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_SetDiskAutoDeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance The instance name.
   * @param[in] auto_delete Whether to auto-delete the disk when the instance is
   * deleted.
   * @param[in] device_name The device name of the disk to modify.
   */
  InstancesResource_SetDiskAutoDeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const bool& auto_delete,
      const StringPiece& device_name);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_SetDiskAutoDeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  bool auto_delete_;
  string device_name_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_SetDiskAutoDeleteMethod);
};

/**
 * Implements the setMachineType method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_SetMachineTypeMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance scoping this request.
   * @param[in] _content_ The data object to setMachineType.
   */
  InstancesResource_SetMachineTypeMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const InstancesSetMachineTypeRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_SetMachineTypeMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_SetMachineTypeMethod);
};

/**
 * Implements the setMetadata method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_SetMetadataMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance scoping this request.
   * @param[in] _content_ The data object to setMetadata.
   */
  InstancesResource_SetMetadataMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const Metadata& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_SetMetadataMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_SetMetadataMethod);
};

/**
 * Implements the setScheduling method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_SetSchedulingMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Instance name.
   * @param[in] _content_ The data object to setScheduling.
   */
  InstancesResource_SetSchedulingMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const Scheduling& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_SetSchedulingMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_SetSchedulingMethod);
};

/**
 * Implements the setServiceAccount method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_SetServiceAccountMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance resource to start.
   * @param[in] _content_ The data object to setServiceAccount.
   */
  InstancesResource_SetServiceAccountMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const InstancesSetServiceAccountRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_SetServiceAccountMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_SetServiceAccountMethod);
};

/**
 * Implements the setTags method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_SetTagsMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance scoping this request.
   * @param[in] _content_ The data object to setTags.
   */
  InstancesResource_SetTagsMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const Tags& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_SetTagsMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_SetTagsMethod);
};

/**
 * Implements the start method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_StartMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance resource to start.
   */
  InstancesResource_StartMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_StartMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_StartMethod);
};

/**
 * Implements the startWithEncryptionKey method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_StartWithEncryptionKeyMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance resource to start.
   * @param[in] _content_ The data object to startWithEncryptionKey.
   */
  InstancesResource_StartWithEncryptionKeyMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance,
      const InstancesStartWithEncryptionKeyRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_StartWithEncryptionKeyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_StartWithEncryptionKeyMethod);
};

/**
 * Implements the stop method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class InstancesResource_StopMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] instance Name of the instance resource to stop.
   */
  InstancesResource_StopMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& instance);

  /**
   * Standard destructor.
   */
  virtual ~InstancesResource_StopMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string instance_;
  DISALLOW_COPY_AND_ASSIGN(InstancesResource_StopMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class LicensesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] license Name of the License resource to return.
   */
  LicensesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& license);

  /**
   * Standard destructor.
   */
  virtual ~LicensesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      License* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string license_;
  DISALLOW_COPY_AND_ASSIGN(LicensesResource_GetMethod);
};



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class MachineTypesResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  MachineTypesResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~MachineTypesResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      MachineTypeAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(MachineTypesResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            MachineTypesResource_AggregatedListMethod,
            MachineTypeAggregatedList>
        MachineTypesResource_AggregatedListMethodPager;

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class MachineTypesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   * @param[in] machine_type Name of the machine type to return.
   */
  MachineTypesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& machine_type);

  /**
   * Standard destructor.
   */
  virtual ~MachineTypesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      MachineType* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string machine_type_;
  DISALLOW_COPY_AND_ASSIGN(MachineTypesResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class MachineTypesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone The name of the zone for this request.
   */
  MachineTypesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~MachineTypesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      MachineTypeList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(MachineTypesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            MachineTypesResource_ListMethod,
            MachineTypeList>
        MachineTypesResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class NetworksResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] network Name of the network to delete.
   */
  NetworksResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& network);

  /**
   * Standard destructor.
   */
  virtual ~NetworksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string network_;
  DISALLOW_COPY_AND_ASSIGN(NetworksResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class NetworksResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] network Name of the network to return.
   */
  NetworksResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& network);

  /**
   * Standard destructor.
   */
  virtual ~NetworksResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Network* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string network_;
  DISALLOW_COPY_AND_ASSIGN(NetworksResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class NetworksResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  NetworksResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const Network& _content_);

  /**
   * Standard destructor.
   */
  virtual ~NetworksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(NetworksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class NetworksResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  NetworksResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~NetworksResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      NetworkList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(NetworksResource_ListMethod);
};

typedef client::ServiceRequestPager<
            NetworksResource_ListMethod,
            NetworkList>
        NetworksResource_ListMethodPager;

/**
 * Implements the switchToCustomMode method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class NetworksResource_SwitchToCustomModeMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] network Name of the network to be updated.
   */
  NetworksResource_SwitchToCustomModeMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& network);

  /**
   * Standard destructor.
   */
  virtual ~NetworksResource_SwitchToCustomModeMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string network_;
  DISALLOW_COPY_AND_ASSIGN(NetworksResource_SwitchToCustomModeMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ProjectsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  ProjectsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Project* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_GetMethod);
};

/**
 * Implements the moveDisk method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class ProjectsResource_MoveDiskMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to moveDisk.
   */
  ProjectsResource_MoveDiskMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const DiskMoveRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_MoveDiskMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_MoveDiskMethod);
};

/**
 * Implements the moveInstance method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class ProjectsResource_MoveInstanceMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to moveInstance.
   */
  ProjectsResource_MoveInstanceMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const InstanceMoveRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_MoveInstanceMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_MoveInstanceMethod);
};

/**
 * Implements the setCommonInstanceMetadata method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class ProjectsResource_SetCommonInstanceMetadataMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to setCommonInstanceMetadata.
   */
  ProjectsResource_SetCommonInstanceMetadataMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const Metadata& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SetCommonInstanceMetadataMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SetCommonInstanceMetadataMethod);
};

/**
 * Implements the setUsageExportBucket method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/devstorage.full_control
 * https://www.googleapis.com/auth/devstorage.read_only
 * https://www.googleapis.com/auth/devstorage.read_write
 */
class ProjectsResource_SetUsageExportBucketMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to setUsageExportBucket.
   */
  ProjectsResource_SetUsageExportBucketMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const UsageExportLocation& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SetUsageExportBucketMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SetUsageExportBucketMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionAutoscalersResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] autoscaler Name of the autoscaler to delete.
   */
  RegionAutoscalersResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& autoscaler);

  /**
   * Standard destructor.
   */
  virtual ~RegionAutoscalersResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string autoscaler_;
  DISALLOW_COPY_AND_ASSIGN(RegionAutoscalersResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionAutoscalersResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] autoscaler Name of the autoscaler to return.
   */
  RegionAutoscalersResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& autoscaler);

  /**
   * Standard destructor.
   */
  virtual ~RegionAutoscalersResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Autoscaler* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string autoscaler_;
  DISALLOW_COPY_AND_ASSIGN(RegionAutoscalersResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionAutoscalersResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] _content_ The data object to insert.
   */
  RegionAutoscalersResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const Autoscaler& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionAutoscalersResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionAutoscalersResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionAutoscalersResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   */
  RegionAutoscalersResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~RegionAutoscalersResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RegionAutoscalerList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RegionAutoscalersResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RegionAutoscalersResource_ListMethod,
            RegionAutoscalerList>
        RegionAutoscalersResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionAutoscalersResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] autoscaler Name of the autoscaler to update.
   * @param[in] _content_ The data object to patch.
   */
  RegionAutoscalersResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& autoscaler,
      const Autoscaler& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionAutoscalersResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string autoscaler_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionAutoscalersResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionAutoscalersResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] _content_ The data object to update.
   */
  RegionAutoscalersResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const Autoscaler& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionAutoscalersResource_UpdateMethod();


    /**
     * Clears the '<code>autoscaler</code>' attribute so it is no longer set.
     */
    void clear_autoscaler() {
      _have_autoscaler_ = false;
      client::ClearCppValueHelper(&autoscaler_);
    }


    /**
     * Gets the optional '<code>autoscaler</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_autoscaler() const { return autoscaler_; }

    /**
     * Gets a modifiable pointer to the optional <code>autoscaler</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_autoscaler() {
      _have_autoscaler_ = true;
      return &autoscaler_;
    }


    /**
     * Sets the '<code>autoscaler</code>' attribute.
     *
     * @param[in] value Name of the autoscaler to update.
     */
    void set_autoscaler(const string& value) {
      _have_autoscaler_ = true;
      autoscaler_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string autoscaler_;
  bool _have_autoscaler_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionAutoscalersResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionBackendServicesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] backend_service Name of the BackendService resource to delete.
   */
  RegionBackendServicesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& backend_service);

  /**
   * Standard destructor.
   */
  virtual ~RegionBackendServicesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string backend_service_;
  DISALLOW_COPY_AND_ASSIGN(RegionBackendServicesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionBackendServicesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] backend_service Name of the BackendService resource to return.
   */
  RegionBackendServicesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& backend_service);

  /**
   * Standard destructor.
   */
  virtual ~RegionBackendServicesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      BackendService* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string backend_service_;
  DISALLOW_COPY_AND_ASSIGN(RegionBackendServicesResource_GetMethod);
};

/**
 * Implements the getHealth method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionBackendServicesResource_GetHealthMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project
   * @param[in] region Name of the region scoping this request.
   * @param[in] backend_service Name of the BackendService resource to which the
   * queried instance belongs.
   * @param[in] _content_ The data object to getHealth.
   */
  RegionBackendServicesResource_GetHealthMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& backend_service,
      const ResourceGroupReference& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionBackendServicesResource_GetHealthMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      BackendServiceGroupHealth* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string backend_service_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionBackendServicesResource_GetHealthMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionBackendServicesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] _content_ The data object to insert.
   */
  RegionBackendServicesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const BackendService& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionBackendServicesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionBackendServicesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionBackendServicesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   */
  RegionBackendServicesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~RegionBackendServicesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      BackendServiceList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RegionBackendServicesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RegionBackendServicesResource_ListMethod,
            BackendServiceList>
        RegionBackendServicesResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionBackendServicesResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] backend_service Name of the BackendService resource to update.
   * @param[in] _content_ The data object to patch.
   */
  RegionBackendServicesResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& backend_service,
      const BackendService& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionBackendServicesResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string backend_service_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionBackendServicesResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionBackendServicesResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] backend_service Name of the BackendService resource to update.
   * @param[in] _content_ The data object to update.
   */
  RegionBackendServicesResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& backend_service,
      const BackendService& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionBackendServicesResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string backend_service_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionBackendServicesResource_UpdateMethod);
};



/**
 * Implements the abandonInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionInstanceGroupManagersResource_AbandonInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group_manager Name of the managed instance group.
   * @param[in] _content_ The data object to abandonInstances.
   */
  RegionInstanceGroupManagersResource_AbandonInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group_manager,
      const RegionInstanceGroupManagersAbandonInstancesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_AbandonInstancesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_AbandonInstancesMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionInstanceGroupManagersResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group_manager Name of the managed instance group to
   * delete.
   */
  RegionInstanceGroupManagersResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group_manager);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_manager_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_DeleteMethod);
};

/**
 * Implements the deleteInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionInstanceGroupManagersResource_DeleteInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group_manager Name of the managed instance group.
   * @param[in] _content_ The data object to deleteInstances.
   */
  RegionInstanceGroupManagersResource_DeleteInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group_manager,
      const RegionInstanceGroupManagersDeleteInstancesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_DeleteInstancesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_DeleteInstancesMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionInstanceGroupManagersResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group_manager Name of the managed instance group to
   * return.
   */
  RegionInstanceGroupManagersResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group_manager);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroupManager* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_manager_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionInstanceGroupManagersResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] _content_ The data object to insert.
   */
  RegionInstanceGroupManagersResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const InstanceGroupManager& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionInstanceGroupManagersResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   */
  RegionInstanceGroupManagersResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RegionInstanceGroupManagerList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RegionInstanceGroupManagersResource_ListMethod,
            RegionInstanceGroupManagerList>
        RegionInstanceGroupManagersResource_ListMethodPager;

/**
 * Implements the listManagedInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionInstanceGroupManagersResource_ListManagedInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group_manager The name of the managed instance group.
   */
  RegionInstanceGroupManagersResource_ListManagedInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group_manager);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_ListManagedInstancesMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>order_by</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>order_by</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>order_by</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>order_by</code>' attribute.
     *
     * @param[in] value
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RegionInstanceGroupManagersListInstancesResponse* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_manager_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_ListManagedInstancesMethod);
};

/**
 * Implements the recreateInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionInstanceGroupManagersResource_RecreateInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group_manager Name of the managed instance group.
   * @param[in] _content_ The data object to recreateInstances.
   */
  RegionInstanceGroupManagersResource_RecreateInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group_manager,
      const RegionInstanceGroupManagersRecreateRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_RecreateInstancesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_RecreateInstancesMethod);
};

/**
 * Implements the resize method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionInstanceGroupManagersResource_ResizeMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group_manager Name of the managed instance group.
   * @param[in] size Number of instances that should exist in this instance
   * group manager.
   */
  RegionInstanceGroupManagersResource_ResizeMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group_manager,
      const int32& size);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_ResizeMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_manager_;
  int32 size_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_ResizeMethod);
};

/**
 * Implements the setInstanceTemplate method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionInstanceGroupManagersResource_SetInstanceTemplateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group_manager The name of the managed instance group.
   * @param[in] _content_ The data object to setInstanceTemplate.
   */
  RegionInstanceGroupManagersResource_SetInstanceTemplateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group_manager,
      const RegionInstanceGroupManagersSetTemplateRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_SetInstanceTemplateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_SetInstanceTemplateMethod);
};

/**
 * Implements the setTargetPools method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionInstanceGroupManagersResource_SetTargetPoolsMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group_manager Name of the managed instance group.
   * @param[in] _content_ The data object to setTargetPools.
   */
  RegionInstanceGroupManagersResource_SetTargetPoolsMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group_manager,
      const RegionInstanceGroupManagersSetTargetPoolsRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupManagersResource_SetTargetPoolsMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_manager_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource_SetTargetPoolsMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionInstanceGroupsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group Name of the instance group resource to return.
   */
  RegionInstanceGroupsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      InstanceGroup* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionInstanceGroupsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   */
  RegionInstanceGroupsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RegionInstanceGroupList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RegionInstanceGroupsResource_ListMethod,
            RegionInstanceGroupList>
        RegionInstanceGroupsResource_ListMethodPager;

/**
 * Implements the listInstances method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionInstanceGroupsResource_ListInstancesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group Name of the regional instance group for which we
   * want to list the instances.
   * @param[in] _content_ The data object to listInstances.
   */
  RegionInstanceGroupsResource_ListInstancesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group,
      const RegionInstanceGroupsListInstancesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupsResource_ListInstancesMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RegionInstanceGroupsListInstances* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupsResource_ListInstancesMethod);
};

typedef client::ServiceRequestPager<
            RegionInstanceGroupsResource_ListInstancesMethod,
            RegionInstanceGroupsListInstances>
        RegionInstanceGroupsResource_ListInstancesMethodPager;

/**
 * Implements the setNamedPorts method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionInstanceGroupsResource_SetNamedPortsMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] instance_group The name of the regional instance group where the
   * named ports are updated.
   * @param[in] _content_ The data object to setNamedPorts.
   */
  RegionInstanceGroupsResource_SetNamedPortsMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& instance_group,
      const RegionInstanceGroupsSetNamedPortsRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RegionInstanceGroupsResource_SetNamedPortsMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string instance_group_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupsResource_SetNamedPortsMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RegionOperationsResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] operation Name of the Operations resource to delete.
   */
  RegionOperationsResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& operation);

  /**
   * Standard destructor.
   */
  virtual ~RegionOperationsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string project_;
  string region_;
  string operation_;
  DISALLOW_COPY_AND_ASSIGN(RegionOperationsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionOperationsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] operation Name of the Operations resource to return.
   */
  RegionOperationsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& operation);

  /**
   * Standard destructor.
   */
  virtual ~RegionOperationsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string operation_;
  DISALLOW_COPY_AND_ASSIGN(RegionOperationsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionOperationsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   */
  RegionOperationsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~RegionOperationsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      OperationList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RegionOperationsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RegionOperationsResource_ListMethod,
            OperationList>
        RegionOperationsResource_ListMethodPager;



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region resource to return.
   */
  RegionsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~RegionsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Region* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  DISALLOW_COPY_AND_ASSIGN(RegionsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RegionsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  RegionsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~RegionsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RegionList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RegionsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RegionsResource_ListMethod,
            RegionList>
        RegionsResource_ListMethodPager;



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RoutersResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  RoutersResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~RoutersResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RouterAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RoutersResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            RoutersResource_AggregatedListMethod,
            RouterAggregatedList>
        RoutersResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RoutersResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] router Name of the Router resource to delete.
   */
  RoutersResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& router);

  /**
   * Standard destructor.
   */
  virtual ~RoutersResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string router_;
  DISALLOW_COPY_AND_ASSIGN(RoutersResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RoutersResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] router Name of the Router resource to return.
   */
  RoutersResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& router);

  /**
   * Standard destructor.
   */
  virtual ~RoutersResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Router* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string router_;
  DISALLOW_COPY_AND_ASSIGN(RoutersResource_GetMethod);
};

/**
 * Implements the getRouterStatus method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RoutersResource_GetRouterStatusMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] router Name of the Router resource to query.
   */
  RoutersResource_GetRouterStatusMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& router);

  /**
   * Standard destructor.
   */
  virtual ~RoutersResource_GetRouterStatusMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RouterStatusResponse* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string router_;
  DISALLOW_COPY_AND_ASSIGN(RoutersResource_GetRouterStatusMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RoutersResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] _content_ The data object to insert.
   */
  RoutersResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const Router& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RoutersResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RoutersResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RoutersResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   */
  RoutersResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~RoutersResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RouterList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RoutersResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RoutersResource_ListMethod,
            RouterList>
        RoutersResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RoutersResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] router Name of the Router resource to update.
   * @param[in] _content_ The data object to patch.
   */
  RoutersResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& router,
      const Router& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RoutersResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string router_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RoutersResource_PatchMethod);
};

/**
 * Implements the preview method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RoutersResource_PreviewMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] router Name of the Router resource to query.
   * @param[in] _content_ The data object to preview.
   */
  RoutersResource_PreviewMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& router,
      const Router& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RoutersResource_PreviewMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RoutersPreviewResponse* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string router_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RoutersResource_PreviewMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RoutersResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] router Name of the Router resource to update.
   * @param[in] _content_ The data object to update.
   */
  RoutersResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& router,
      const Router& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RoutersResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string router_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RoutersResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RoutesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] route Name of the Route resource to delete.
   */
  RoutesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& route);

  /**
   * Standard destructor.
   */
  virtual ~RoutesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string route_;
  DISALLOW_COPY_AND_ASSIGN(RoutesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RoutesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] route Name of the Route resource to return.
   */
  RoutesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& route);

  /**
   * Standard destructor.
   */
  virtual ~RoutesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Route* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string route_;
  DISALLOW_COPY_AND_ASSIGN(RoutesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class RoutesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  RoutesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const Route& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RoutesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RoutesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class RoutesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  RoutesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~RoutesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RouteList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RoutesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RoutesResource_ListMethod,
            RouteList>
        RoutesResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class SnapshotsResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] snapshot Name of the Snapshot resource to delete.
   */
  SnapshotsResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& snapshot);

  /**
   * Standard destructor.
   */
  virtual ~SnapshotsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string snapshot_;
  DISALLOW_COPY_AND_ASSIGN(SnapshotsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class SnapshotsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] snapshot Name of the Snapshot resource to return.
   */
  SnapshotsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& snapshot);

  /**
   * Standard destructor.
   */
  virtual ~SnapshotsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Snapshot* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string snapshot_;
  DISALLOW_COPY_AND_ASSIGN(SnapshotsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class SnapshotsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  SnapshotsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~SnapshotsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SnapshotList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SnapshotsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            SnapshotsResource_ListMethod,
            SnapshotList>
        SnapshotsResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class SslCertificatesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] ssl_certificate Name of the SslCertificate resource to delete.
   */
  SslCertificatesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& ssl_certificate);

  /**
   * Standard destructor.
   */
  virtual ~SslCertificatesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string ssl_certificate_;
  DISALLOW_COPY_AND_ASSIGN(SslCertificatesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class SslCertificatesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] ssl_certificate Name of the SslCertificate resource to return.
   */
  SslCertificatesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& ssl_certificate);

  /**
   * Standard destructor.
   */
  virtual ~SslCertificatesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SslCertificate* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string ssl_certificate_;
  DISALLOW_COPY_AND_ASSIGN(SslCertificatesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class SslCertificatesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  SslCertificatesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const SslCertificate& _content_);

  /**
   * Standard destructor.
   */
  virtual ~SslCertificatesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(SslCertificatesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class SslCertificatesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  SslCertificatesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~SslCertificatesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SslCertificateList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SslCertificatesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            SslCertificatesResource_ListMethod,
            SslCertificateList>
        SslCertificatesResource_ListMethodPager;



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class SubnetworksResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  SubnetworksResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~SubnetworksResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SubnetworkAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SubnetworksResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            SubnetworksResource_AggregatedListMethod,
            SubnetworkAggregatedList>
        SubnetworksResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class SubnetworksResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] subnetwork Name of the Subnetwork resource to delete.
   */
  SubnetworksResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& subnetwork);

  /**
   * Standard destructor.
   */
  virtual ~SubnetworksResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string subnetwork_;
  DISALLOW_COPY_AND_ASSIGN(SubnetworksResource_DeleteMethod);
};

/**
 * Implements the expandIpCidrRange method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class SubnetworksResource_ExpandIpCidrRangeMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] subnetwork Name of the Subnetwork resource to update.
   * @param[in] _content_ The data object to expandIpCidrRange.
   */
  SubnetworksResource_ExpandIpCidrRangeMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& subnetwork,
      const SubnetworksExpandIpCidrRangeRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~SubnetworksResource_ExpandIpCidrRangeMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string subnetwork_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(SubnetworksResource_ExpandIpCidrRangeMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class SubnetworksResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] subnetwork Name of the Subnetwork resource to return.
   */
  SubnetworksResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& subnetwork);

  /**
   * Standard destructor.
   */
  virtual ~SubnetworksResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Subnetwork* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string subnetwork_;
  DISALLOW_COPY_AND_ASSIGN(SubnetworksResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class SubnetworksResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] _content_ The data object to insert.
   */
  SubnetworksResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const Subnetwork& _content_);

  /**
   * Standard destructor.
   */
  virtual ~SubnetworksResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(SubnetworksResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class SubnetworksResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   */
  SubnetworksResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~SubnetworksResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SubnetworkList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SubnetworksResource_ListMethod);
};

typedef client::ServiceRequestPager<
            SubnetworksResource_ListMethod,
            SubnetworkList>
        SubnetworksResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetHttpProxiesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_http_proxy Name of the TargetHttpProxy resource to
   * delete.
   */
  TargetHttpProxiesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_http_proxy);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpProxiesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_http_proxy_;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpProxiesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetHttpProxiesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_http_proxy Name of the TargetHttpProxy resource to
   * return.
   */
  TargetHttpProxiesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_http_proxy);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpProxiesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetHttpProxy* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_http_proxy_;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpProxiesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetHttpProxiesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  TargetHttpProxiesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const TargetHttpProxy& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpProxiesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpProxiesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetHttpProxiesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  TargetHttpProxiesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpProxiesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetHttpProxyList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpProxiesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            TargetHttpProxiesResource_ListMethod,
            TargetHttpProxyList>
        TargetHttpProxiesResource_ListMethodPager;

/**
 * Implements the setUrlMap method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetHttpProxiesResource_SetUrlMapMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_http_proxy Name of the TargetHttpProxy to set a URL map
   * for.
   * @param[in] _content_ The data object to setUrlMap.
   */
  TargetHttpProxiesResource_SetUrlMapMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_http_proxy,
      const UrlMapReference& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpProxiesResource_SetUrlMapMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_http_proxy_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpProxiesResource_SetUrlMapMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetHttpsProxiesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_https_proxy Name of the TargetHttpsProxy resource to
   * delete.
   */
  TargetHttpsProxiesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_https_proxy);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpsProxiesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_https_proxy_;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpsProxiesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetHttpsProxiesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_https_proxy Name of the TargetHttpsProxy resource to
   * return.
   */
  TargetHttpsProxiesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_https_proxy);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpsProxiesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetHttpsProxy* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_https_proxy_;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpsProxiesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetHttpsProxiesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  TargetHttpsProxiesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const TargetHttpsProxy& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpsProxiesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpsProxiesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetHttpsProxiesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  TargetHttpsProxiesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpsProxiesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetHttpsProxyList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpsProxiesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            TargetHttpsProxiesResource_ListMethod,
            TargetHttpsProxyList>
        TargetHttpsProxiesResource_ListMethodPager;

/**
 * Implements the setSslCertificates method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetHttpsProxiesResource_SetSslCertificatesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_https_proxy Name of the TargetHttpsProxy resource to set
   * an SslCertificates resource for.
   * @param[in] _content_ The data object to setSslCertificates.
   */
  TargetHttpsProxiesResource_SetSslCertificatesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_https_proxy,
      const TargetHttpsProxiesSetSslCertificatesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpsProxiesResource_SetSslCertificatesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_https_proxy_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpsProxiesResource_SetSslCertificatesMethod);
};

/**
 * Implements the setUrlMap method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetHttpsProxiesResource_SetUrlMapMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_https_proxy Name of the TargetHttpsProxy resource whose
   * URL map is to be set.
   * @param[in] _content_ The data object to setUrlMap.
   */
  TargetHttpsProxiesResource_SetUrlMapMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_https_proxy,
      const UrlMapReference& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetHttpsProxiesResource_SetUrlMapMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_https_proxy_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetHttpsProxiesResource_SetUrlMapMethod);
};



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetInstancesResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  TargetInstancesResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~TargetInstancesResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetInstanceAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TargetInstancesResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            TargetInstancesResource_AggregatedListMethod,
            TargetInstanceAggregatedList>
        TargetInstancesResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetInstancesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone scoping this request.
   * @param[in] target_instance Name of the TargetInstance resource to delete.
   */
  TargetInstancesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& target_instance);

  /**
   * Standard destructor.
   */
  virtual ~TargetInstancesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string target_instance_;
  DISALLOW_COPY_AND_ASSIGN(TargetInstancesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetInstancesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone scoping this request.
   * @param[in] target_instance Name of the TargetInstance resource to return.
   */
  TargetInstancesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& target_instance);

  /**
   * Standard destructor.
   */
  virtual ~TargetInstancesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetInstance* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string target_instance_;
  DISALLOW_COPY_AND_ASSIGN(TargetInstancesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetInstancesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone scoping this request.
   * @param[in] _content_ The data object to insert.
   */
  TargetInstancesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const TargetInstance& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetInstancesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetInstancesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetInstancesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone scoping this request.
   */
  TargetInstancesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~TargetInstancesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetInstanceList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TargetInstancesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            TargetInstancesResource_ListMethod,
            TargetInstanceList>
        TargetInstancesResource_ListMethodPager;



/**
 * Implements the addHealthCheck method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetPoolsResource_AddHealthCheckMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] target_pool Name of the target pool to add a health check to.
   * @param[in] _content_ The data object to addHealthCheck.
   */
  TargetPoolsResource_AddHealthCheckMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_pool,
      const TargetPoolsAddHealthCheckRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_AddHealthCheckMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_pool_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_AddHealthCheckMethod);
};

/**
 * Implements the addInstance method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetPoolsResource_AddInstanceMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] target_pool Name of the TargetPool resource to add instances to.
   * @param[in] _content_ The data object to addInstance.
   */
  TargetPoolsResource_AddInstanceMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_pool,
      const TargetPoolsAddInstanceRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_AddInstanceMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_pool_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_AddInstanceMethod);
};

/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetPoolsResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  TargetPoolsResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetPoolAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            TargetPoolsResource_AggregatedListMethod,
            TargetPoolAggregatedList>
        TargetPoolsResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetPoolsResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] target_pool Name of the TargetPool resource to delete.
   */
  TargetPoolsResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_pool);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_pool_;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetPoolsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] target_pool Name of the TargetPool resource to return.
   */
  TargetPoolsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_pool);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetPool* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_pool_;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_GetMethod);
};

/**
 * Implements the getHealth method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetPoolsResource_GetHealthMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] target_pool Name of the TargetPool resource to which the queried
   * instance belongs.
   * @param[in] _content_ The data object to getHealth.
   */
  TargetPoolsResource_GetHealthMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_pool,
      const InstanceReference& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_GetHealthMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetPoolInstanceHealth* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_pool_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_GetHealthMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetPoolsResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] _content_ The data object to insert.
   */
  TargetPoolsResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const TargetPool& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetPoolsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   */
  TargetPoolsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetPoolList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            TargetPoolsResource_ListMethod,
            TargetPoolList>
        TargetPoolsResource_ListMethodPager;

/**
 * Implements the removeHealthCheck method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetPoolsResource_RemoveHealthCheckMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] target_pool Name of the target pool to remove health checks
   * from.
   * @param[in] _content_ The data object to removeHealthCheck.
   */
  TargetPoolsResource_RemoveHealthCheckMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_pool,
      const TargetPoolsRemoveHealthCheckRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_RemoveHealthCheckMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_pool_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_RemoveHealthCheckMethod);
};

/**
 * Implements the removeInstance method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetPoolsResource_RemoveInstanceMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] target_pool Name of the TargetPool resource to remove instances
   * from.
   * @param[in] _content_ The data object to removeInstance.
   */
  TargetPoolsResource_RemoveInstanceMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_pool,
      const TargetPoolsRemoveInstanceRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_RemoveInstanceMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_pool_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_RemoveInstanceMethod);
};

/**
 * Implements the setBackup method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetPoolsResource_SetBackupMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region scoping this request.
   * @param[in] target_pool Name of the TargetPool resource to set a backup pool
   * for.
   * @param[in] _content_ The data object to setBackup.
   */
  TargetPoolsResource_SetBackupMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_pool,
      const TargetReference& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetPoolsResource_SetBackupMethod();


    /**
     * Clears the '<code>failoverRatio</code>' attribute so it is no longer set.
     */
    void clear_failover_ratio() {
      _have_failover_ratio_ = false;
      client::ClearCppValueHelper(&failover_ratio_);
    }


    /**
     * Gets the optional '<code>failoverRatio</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    float get_failover_ratio() const { return failover_ratio_; }

    /**
     * Sets the '<code>failoverRatio</code>' attribute.
     *
     * @param[in] value New failoverRatio value for the target pool.
     */
    void set_failover_ratio(float value) {
      _have_failover_ratio_ = true;
      failover_ratio_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_pool_;
  float failover_ratio_;
  bool _have_failover_ratio_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource_SetBackupMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetSslProxiesResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_ssl_proxy Name of the TargetSslProxy resource to delete.
   */
  TargetSslProxiesResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_ssl_proxy);

  /**
   * Standard destructor.
   */
  virtual ~TargetSslProxiesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_ssl_proxy_;
  DISALLOW_COPY_AND_ASSIGN(TargetSslProxiesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetSslProxiesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_ssl_proxy Name of the TargetSslProxy resource to return.
   */
  TargetSslProxiesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_ssl_proxy);

  /**
   * Standard destructor.
   */
  virtual ~TargetSslProxiesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetSslProxy* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_ssl_proxy_;
  DISALLOW_COPY_AND_ASSIGN(TargetSslProxiesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetSslProxiesResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  TargetSslProxiesResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const TargetSslProxy& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetSslProxiesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetSslProxiesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetSslProxiesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  TargetSslProxiesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~TargetSslProxiesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetSslProxyList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TargetSslProxiesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            TargetSslProxiesResource_ListMethod,
            TargetSslProxyList>
        TargetSslProxiesResource_ListMethodPager;

/**
 * Implements the setBackendService method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetSslProxiesResource_SetBackendServiceMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_ssl_proxy Name of the TargetSslProxy resource whose
   * BackendService resource is to be set.
   * @param[in] _content_ The data object to setBackendService.
   */
  TargetSslProxiesResource_SetBackendServiceMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_ssl_proxy,
      const TargetSslProxiesSetBackendServiceRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetSslProxiesResource_SetBackendServiceMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_ssl_proxy_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetSslProxiesResource_SetBackendServiceMethod);
};

/**
 * Implements the setProxyHeader method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetSslProxiesResource_SetProxyHeaderMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_ssl_proxy Name of the TargetSslProxy resource whose
   * ProxyHeader is to be set.
   * @param[in] _content_ The data object to setProxyHeader.
   */
  TargetSslProxiesResource_SetProxyHeaderMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_ssl_proxy,
      const TargetSslProxiesSetProxyHeaderRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetSslProxiesResource_SetProxyHeaderMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_ssl_proxy_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetSslProxiesResource_SetProxyHeaderMethod);
};

/**
 * Implements the setSslCertificates method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetSslProxiesResource_SetSslCertificatesMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] target_ssl_proxy Name of the TargetSslProxy resource whose
   * SslCertificate resource is to be set.
   * @param[in] _content_ The data object to setSslCertificates.
   */
  TargetSslProxiesResource_SetSslCertificatesMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& target_ssl_proxy,
      const TargetSslProxiesSetSslCertificatesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetSslProxiesResource_SetSslCertificatesMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string target_ssl_proxy_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetSslProxiesResource_SetSslCertificatesMethod);
};



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetVpnGatewaysResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  TargetVpnGatewaysResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~TargetVpnGatewaysResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetVpnGatewayAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TargetVpnGatewaysResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            TargetVpnGatewaysResource_AggregatedListMethod,
            TargetVpnGatewayAggregatedList>
        TargetVpnGatewaysResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetVpnGatewaysResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] target_vpn_gateway Name of the target VPN gateway to delete.
   */
  TargetVpnGatewaysResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_vpn_gateway);

  /**
   * Standard destructor.
   */
  virtual ~TargetVpnGatewaysResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_vpn_gateway_;
  DISALLOW_COPY_AND_ASSIGN(TargetVpnGatewaysResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetVpnGatewaysResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] target_vpn_gateway Name of the target VPN gateway to return.
   */
  TargetVpnGatewaysResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& target_vpn_gateway);

  /**
   * Standard destructor.
   */
  virtual ~TargetVpnGatewaysResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetVpnGateway* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string target_vpn_gateway_;
  DISALLOW_COPY_AND_ASSIGN(TargetVpnGatewaysResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class TargetVpnGatewaysResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] _content_ The data object to insert.
   */
  TargetVpnGatewaysResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const TargetVpnGateway& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TargetVpnGatewaysResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TargetVpnGatewaysResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class TargetVpnGatewaysResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   */
  TargetVpnGatewaysResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~TargetVpnGatewaysResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TargetVpnGatewayList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TargetVpnGatewaysResource_ListMethod);
};

typedef client::ServiceRequestPager<
            TargetVpnGatewaysResource_ListMethod,
            TargetVpnGatewayList>
        TargetVpnGatewaysResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class UrlMapsResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] url_map Name of the UrlMap resource to delete.
   */
  UrlMapsResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& url_map);

  /**
   * Standard destructor.
   */
  virtual ~UrlMapsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string url_map_;
  DISALLOW_COPY_AND_ASSIGN(UrlMapsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class UrlMapsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] url_map Name of the UrlMap resource to return.
   */
  UrlMapsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& url_map);

  /**
   * Standard destructor.
   */
  virtual ~UrlMapsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      UrlMap* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string url_map_;
  DISALLOW_COPY_AND_ASSIGN(UrlMapsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class UrlMapsResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] _content_ The data object to insert.
   */
  UrlMapsResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const UrlMap& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UrlMapsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UrlMapsResource_InsertMethod);
};

/**
 * Implements the invalidateCache method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class UrlMapsResource_InvalidateCacheMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] url_map Name of the UrlMap scoping this request.
   * @param[in] _content_ The data object to invalidateCache.
   */
  UrlMapsResource_InvalidateCacheMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& url_map,
      const CacheInvalidationRule& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UrlMapsResource_InvalidateCacheMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string url_map_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UrlMapsResource_InvalidateCacheMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class UrlMapsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  UrlMapsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~UrlMapsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      UrlMapList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UrlMapsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            UrlMapsResource_ListMethod,
            UrlMapList>
        UrlMapsResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class UrlMapsResource_PatchMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] url_map Name of the UrlMap resource to update.
   * @param[in] _content_ The data object to patch.
   */
  UrlMapsResource_PatchMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& url_map,
      const UrlMap& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UrlMapsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string url_map_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UrlMapsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class UrlMapsResource_UpdateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] url_map Name of the UrlMap resource to update.
   * @param[in] _content_ The data object to update.
   */
  UrlMapsResource_UpdateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& url_map,
      const UrlMap& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UrlMapsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string url_map_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UrlMapsResource_UpdateMethod);
};

/**
 * Implements the validate method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class UrlMapsResource_ValidateMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] url_map Name of the UrlMap resource to be validated as.
   * @param[in] _content_ The data object to validate.
   */
  UrlMapsResource_ValidateMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& url_map,
      const UrlMapsValidateRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UrlMapsResource_ValidateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      UrlMapsValidateResponse* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string url_map_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UrlMapsResource_ValidateMethod);
};



/**
 * Implements the aggregatedList method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class VpnTunnelsResource_AggregatedListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  VpnTunnelsResource_AggregatedListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~VpnTunnelsResource_AggregatedListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      VpnTunnelAggregatedList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(VpnTunnelsResource_AggregatedListMethod);
};

typedef client::ServiceRequestPager<
            VpnTunnelsResource_AggregatedListMethod,
            VpnTunnelAggregatedList>
        VpnTunnelsResource_AggregatedListMethodPager;

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class VpnTunnelsResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] vpn_tunnel Name of the VpnTunnel resource to delete.
   */
  VpnTunnelsResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& vpn_tunnel);

  /**
   * Standard destructor.
   */
  virtual ~VpnTunnelsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string vpn_tunnel_;
  DISALLOW_COPY_AND_ASSIGN(VpnTunnelsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class VpnTunnelsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] vpn_tunnel Name of the VpnTunnel resource to return.
   */
  VpnTunnelsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const StringPiece& vpn_tunnel);

  /**
   * Standard destructor.
   */
  virtual ~VpnTunnelsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      VpnTunnel* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string vpn_tunnel_;
  DISALLOW_COPY_AND_ASSIGN(VpnTunnelsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class VpnTunnelsResource_InsertMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   * @param[in] _content_ The data object to insert.
   */
  VpnTunnelsResource_InsertMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region,
      const VpnTunnel& _content_);

  /**
   * Standard destructor.
   */
  virtual ~VpnTunnelsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(VpnTunnelsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class VpnTunnelsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] region Name of the region for this request.
   */
  VpnTunnelsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& region);

  /**
   * Standard destructor.
   */
  virtual ~VpnTunnelsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      VpnTunnelList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string region_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(VpnTunnelsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            VpnTunnelsResource_ListMethod,
            VpnTunnelList>
        VpnTunnelsResource_ListMethodPager;



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 */
class ZoneOperationsResource_DeleteMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone for this request.
   * @param[in] operation Name of the Operations resource to delete.
   */
  ZoneOperationsResource_DeleteMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& operation);

  /**
   * Standard destructor.
   */
  virtual ~ZoneOperationsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string project_;
  string zone_;
  string operation_;
  DISALLOW_COPY_AND_ASSIGN(ZoneOperationsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ZoneOperationsResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone for this request.
   * @param[in] operation Name of the Operations resource to return.
   */
  ZoneOperationsResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone,
      const StringPiece& operation);

  /**
   * Standard destructor.
   */
  virtual ~ZoneOperationsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Operation* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string operation_;
  DISALLOW_COPY_AND_ASSIGN(ZoneOperationsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ZoneOperationsResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone for request.
   */
  ZoneOperationsResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~ZoneOperationsResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      OperationList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ZoneOperationsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ZoneOperationsResource_ListMethod,
            OperationList>
        ZoneOperationsResource_ListMethodPager;



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ZonesResource_GetMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   * @param[in] zone Name of the zone resource to return.
   */
  ZonesResource_GetMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project,
      const StringPiece& zone);

  /**
   * Standard destructor.
   */
  virtual ~ZonesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Zone* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string zone_;
  DISALLOW_COPY_AND_ASSIGN(ZonesResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/compute
 * https://www.googleapis.com/auth/compute.readonly
 */
class ZonesResource_ListMethod : public ComputeServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project Project ID for this request.
   */
  ZonesResource_ListMethod(
      const ComputeService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~ZonesResource_ListMethod();


    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value Sets a filter expression for filtering listed resources,
     * in the form filter={expression}. Your {expression} must be in the format:
     * field_name comparison_string literal_string.
     *
     * The field_name is the name of the field you want to compare. Only atomic
     * field types are supported (string, number, boolean). The
     * comparison_string must be either eq (equals) or ne (not equals). The
     * literal_string is the string value to filter to. The literal value must
     * be valid for the type of field you are filtering by (string, number,
     * boolean). For string fields, the literal value is interpreted as a
     * regular expression using RE2 syntax. The literal value must match the
     * entire field.
     *
     * For example, to filter for instances that do not have a name of example-
     * instance, you would use filter=name ne example-instance.
     *
     * You can filter on nested fields. For example, you could filter on
     * instances that have set the scheduling.automaticRestart field to true.
     * Use filtering on nested fields to take advantage of labels to organize
     * and search for results based on label values.
     *
     * To filter on multiple expressions, provide each separate expression
     * within parentheses. For example, (scheduling.automaticRestart eq true)
     * (zone eq us-central1-f). Multiple expressions are treated as AND
     * expressions, meaning that resources must match all expressions to pass
     * the filters.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results per page that should be
     * returned. If the number of available results is larger than maxResults,
     * Compute Engine returns a nextPageToken that can be used to get the next
     * page of results in subsequent list requests.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value Sorts list results by a certain order. By default,
     * results are returned in alphanumerical order based on the resource name.
     *
     * You can also sort results in descending order based on the creation
     * timestamp using orderBy="creationTimestamp desc". This sorts results
     * based on the creationTimestamp field in reverse chronological order
     * (newest result first). Use this to sort resources like operations so that
     * the newest operation is returned first.
     *
     * Currently, only sorting by name or creationTimestamp desc is supported.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Specifies a page token to use. Set pageToken to the
     * nextPageToken returned by a previous list request to get the next page of
     * results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ZoneList* data) {
    return ComputeServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string filter_;
  uint32 max_results_;
  string order_by_;
  string page_token_;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ZonesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ZonesResource_ListMethod,
            ZoneList>
        ZonesResource_ListMethodPager;



/**
 * Service definition for ComputeService (v1).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href='https://developers.google.com/compute/docs/reference/latest/'>'https://developers.google.com/compute/docs/reference/latest/</a>
 */
class ComputeService : public client::ClientService {
 public:
  /**
   * The name of the API that this was generated from.
   */
  static const char googleapis_API_NAME[];

  /**
   * The version of the API that this interface was generated from.
   */
  static const char googleapis_API_VERSION[];

  /**
   * The code generator used to generate this API.
   */
  static const char googleapis_API_GENERATOR[];


  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class AddressesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit AddressesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~AddressesResource() {}


    /**
     * Creates a new AddressesResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AddressesResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    AddressesResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new AddressesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] address Name of the address resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AddressesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& address) const;

    /**
     * Creates a new AddressesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] address Name of the address resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AddressesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& address) const;

    /**
     * Creates a new AddressesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AddressesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const Address& _content_) const;

    /**
     * Creates a new AddressesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AddressesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    AddressesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(AddressesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class AutoscalersResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit AutoscalersResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~AutoscalersResource() {}


    /**
     * Creates a new AutoscalersResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AutoscalersResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    AutoscalersResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new AutoscalersResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone for this request.
     * @param[in] autoscaler Name of the autoscaler to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AutoscalersResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& autoscaler) const;

    /**
     * Creates a new AutoscalersResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone for this request.
     * @param[in] autoscaler Name of the autoscaler to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AutoscalersResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& autoscaler) const;

    /**
     * Creates a new AutoscalersResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AutoscalersResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const Autoscaler& _content_) const;

    /**
     * Creates a new AutoscalersResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AutoscalersResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone Name of the zone for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    AutoscalersResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a new AutoscalersResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone for this request.
     * @param[in] autoscaler Name of the autoscaler to update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AutoscalersResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& autoscaler,
        const Autoscaler& _content_) const;

    /**
     * Creates a new AutoscalersResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone for this request.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AutoscalersResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const Autoscaler& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(AutoscalersResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class BackendServicesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit BackendServicesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~BackendServicesResource() {}


    /**
     * Creates a new BackendServicesResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Name of the project scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    BackendServicesResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Name of the project scoping this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    BackendServicesResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new BackendServicesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] backend_service Name of the BackendService resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    BackendServicesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& backend_service) const;

    /**
     * Creates a new BackendServicesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] backend_service Name of the BackendService resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    BackendServicesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& backend_service) const;

    /**
     * Creates a new BackendServicesResource_GetHealthMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project
     * @param[in] backend_service Name of the BackendService resource to which
     * the queried instance belongs.
     * @param[in] _content_ The data object to getHealth.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    BackendServicesResource_GetHealthMethod* NewGetHealthMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& backend_service,
        const ResourceGroupReference& _content_) const;

    /**
     * Creates a new BackendServicesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    BackendServicesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const BackendService& _content_) const;

    /**
     * Creates a new BackendServicesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    BackendServicesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    BackendServicesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new BackendServicesResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] backend_service Name of the BackendService resource to update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    BackendServicesResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& backend_service,
        const BackendService& _content_) const;

    /**
     * Creates a new BackendServicesResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] backend_service Name of the BackendService resource to update.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    BackendServicesResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& backend_service,
        const BackendService& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(BackendServicesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class DiskTypesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit DiskTypesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~DiskTypesResource() {}


    /**
     * Creates a new DiskTypesResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DiskTypesResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    DiskTypesResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new DiskTypesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] disk_type Name of the disk type to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DiskTypesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& disk_type) const;

    /**
     * Creates a new DiskTypesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DiskTypesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone The name of the zone for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    DiskTypesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(DiskTypesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class DisksResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit DisksResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~DisksResource() {}


    /**
     * Creates a new DisksResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DisksResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    DisksResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new DisksResource_CreateSnapshotMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] disk Name of the persistent disk to snapshot.
     * @param[in] _content_ The data object to createSnapshot.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DisksResource_CreateSnapshotMethod* NewCreateSnapshotMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& disk,
        const Snapshot& _content_) const;

    /**
     * Creates a new DisksResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] disk Name of the persistent disk to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DisksResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& disk) const;

    /**
     * Creates a new DisksResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] disk Name of the persistent disk to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DisksResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& disk) const;

    /**
     * Creates a new DisksResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DisksResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const Disk& _content_) const;

    /**
     * Creates a new DisksResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DisksResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone The name of the zone for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    DisksResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a new DisksResource_ResizeMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] disk The name of the persistent disk.
     * @param[in] _content_ The data object to resize.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DisksResource_ResizeMethod* NewResizeMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& disk,
        const DisksResizeRequest& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(DisksResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class FirewallsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit FirewallsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~FirewallsResource() {}


    /**
     * Creates a new FirewallsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] firewall Name of the firewall rule to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FirewallsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& firewall) const;

    /**
     * Creates a new FirewallsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] firewall Name of the firewall rule to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FirewallsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& firewall) const;

    /**
     * Creates a new FirewallsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FirewallsResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const Firewall& _content_) const;

    /**
     * Creates a new FirewallsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FirewallsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    FirewallsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new FirewallsResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] firewall Name of the firewall rule to update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FirewallsResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& firewall,
        const Firewall& _content_) const;

    /**
     * Creates a new FirewallsResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] firewall Name of the firewall rule to update.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FirewallsResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& firewall,
        const Firewall& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(FirewallsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ForwardingRulesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ForwardingRulesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~ForwardingRulesResource() {}


    /**
     * Creates a new ForwardingRulesResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ForwardingRulesResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    ForwardingRulesResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new ForwardingRulesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] forwarding_rule Name of the ForwardingRule resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ForwardingRulesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& forwarding_rule) const;

    /**
     * Creates a new ForwardingRulesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] forwarding_rule Name of the ForwardingRule resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ForwardingRulesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& forwarding_rule) const;

    /**
     * Creates a new ForwardingRulesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ForwardingRulesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const ForwardingRule& _content_) const;

    /**
     * Creates a new ForwardingRulesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ForwardingRulesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region scoping this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    ForwardingRulesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a new ForwardingRulesResource_SetTargetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] forwarding_rule Name of the ForwardingRule resource in which
     * target is to be set.
     * @param[in] _content_ The data object to setTarget.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ForwardingRulesResource_SetTargetMethod* NewSetTargetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& forwarding_rule,
        const TargetReference& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(ForwardingRulesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class GlobalAddressesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit GlobalAddressesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~GlobalAddressesResource() {}


    /**
     * Creates a new GlobalAddressesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] address Name of the address resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalAddressesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& address) const;

    /**
     * Creates a new GlobalAddressesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] address Name of the address resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalAddressesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& address) const;

    /**
     * Creates a new GlobalAddressesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalAddressesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const Address& _content_) const;

    /**
     * Creates a new GlobalAddressesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalAddressesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    GlobalAddressesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(GlobalAddressesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class GlobalForwardingRulesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit GlobalForwardingRulesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~GlobalForwardingRulesResource() {}


    /**
     * Creates a new GlobalForwardingRulesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] forwarding_rule Name of the ForwardingRule resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalForwardingRulesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& forwarding_rule) const;

    /**
     * Creates a new GlobalForwardingRulesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] forwarding_rule Name of the ForwardingRule resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalForwardingRulesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& forwarding_rule) const;

    /**
     * Creates a new GlobalForwardingRulesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalForwardingRulesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const ForwardingRule& _content_) const;

    /**
     * Creates a new GlobalForwardingRulesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalForwardingRulesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    GlobalForwardingRulesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new GlobalForwardingRulesResource_SetTargetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] forwarding_rule Name of the ForwardingRule resource in which
     * target is to be set.
     * @param[in] _content_ The data object to setTarget.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalForwardingRulesResource_SetTargetMethod* NewSetTargetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& forwarding_rule,
        const TargetReference& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(GlobalForwardingRulesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class GlobalOperationsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit GlobalOperationsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~GlobalOperationsResource() {}


    /**
     * Creates a new GlobalOperationsResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalOperationsResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    GlobalOperationsResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new GlobalOperationsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] operation Name of the Operations resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalOperationsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& operation) const;

    /**
     * Creates a new GlobalOperationsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] operation Name of the Operations resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalOperationsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& operation) const;

    /**
     * Creates a new GlobalOperationsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    GlobalOperationsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    GlobalOperationsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(GlobalOperationsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class HealthChecksResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit HealthChecksResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~HealthChecksResource() {}


    /**
     * Creates a new HealthChecksResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] health_check Name of the HealthCheck resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HealthChecksResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& health_check) const;

    /**
     * Creates a new HealthChecksResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] health_check Name of the HealthCheck resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HealthChecksResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& health_check) const;

    /**
     * Creates a new HealthChecksResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HealthChecksResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const HealthCheck& _content_) const;

    /**
     * Creates a new HealthChecksResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HealthChecksResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    HealthChecksResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new HealthChecksResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] health_check Name of the HealthCheck resource to update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HealthChecksResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& health_check,
        const HealthCheck& _content_) const;

    /**
     * Creates a new HealthChecksResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] health_check Name of the HealthCheck resource to update.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HealthChecksResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& health_check,
        const HealthCheck& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(HealthChecksResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class HttpHealthChecksResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit HttpHealthChecksResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~HttpHealthChecksResource() {}


    /**
     * Creates a new HttpHealthChecksResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] http_health_check Name of the HttpHealthCheck resource to
     * delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpHealthChecksResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& http_health_check) const;

    /**
     * Creates a new HttpHealthChecksResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] http_health_check Name of the HttpHealthCheck resource to
     * return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpHealthChecksResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& http_health_check) const;

    /**
     * Creates a new HttpHealthChecksResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpHealthChecksResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const HttpHealthCheck& _content_) const;

    /**
     * Creates a new HttpHealthChecksResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpHealthChecksResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    HttpHealthChecksResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new HttpHealthChecksResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] http_health_check Name of the HttpHealthCheck resource to
     * update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpHealthChecksResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& http_health_check,
        const HttpHealthCheck& _content_) const;

    /**
     * Creates a new HttpHealthChecksResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] http_health_check Name of the HttpHealthCheck resource to
     * update.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpHealthChecksResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& http_health_check,
        const HttpHealthCheck& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(HttpHealthChecksResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class HttpsHealthChecksResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit HttpsHealthChecksResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~HttpsHealthChecksResource() {}


    /**
     * Creates a new HttpsHealthChecksResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] https_health_check Name of the HttpsHealthCheck resource to
     * delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpsHealthChecksResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& https_health_check) const;

    /**
     * Creates a new HttpsHealthChecksResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] https_health_check Name of the HttpsHealthCheck resource to
     * return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpsHealthChecksResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& https_health_check) const;

    /**
     * Creates a new HttpsHealthChecksResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpsHealthChecksResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const HttpsHealthCheck& _content_) const;

    /**
     * Creates a new HttpsHealthChecksResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpsHealthChecksResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    HttpsHealthChecksResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new HttpsHealthChecksResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] https_health_check Name of the HttpsHealthCheck resource to
     * update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpsHealthChecksResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& https_health_check,
        const HttpsHealthCheck& _content_) const;

    /**
     * Creates a new HttpsHealthChecksResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] https_health_check Name of the HttpsHealthCheck resource to
     * update.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    HttpsHealthChecksResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& https_health_check,
        const HttpsHealthCheck& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(HttpsHealthChecksResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ImagesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ImagesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~ImagesResource() {}


    /**
     * Creates a new ImagesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] image Name of the image resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ImagesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& image) const;

    /**
     * Creates a new ImagesResource_DeprecateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] image Image name.
     * @param[in] _content_ The data object to deprecate.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ImagesResource_DeprecateMethod* NewDeprecateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& image,
        const DeprecationStatus& _content_) const;

    /**
     * Creates a new ImagesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] image Name of the image resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ImagesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& image) const;

    /**
     * Creates a new ImagesResource_GetFromFamilyMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] family Name of the image family to search for.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ImagesResource_GetFromFamilyMethod* NewGetFromFamilyMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& family) const;

    /**
     * Creates a new ImagesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ImagesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const Image& _content_) const;

    /**
     * Creates a new ImagesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ImagesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    ImagesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(ImagesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class InstanceGroupManagersResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit InstanceGroupManagersResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~InstanceGroupManagersResource() {}


    /**
     * Creates a new InstanceGroupManagersResource_AbandonInstancesMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @param[in] _content_ The data object to abandonInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_AbandonInstancesMethod* NewAbandonInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group_manager,
        const InstanceGroupManagersAbandonInstancesRequest& _content_) const;

    /**
     * Creates a new InstanceGroupManagersResource_AggregatedListMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    InstanceGroupManagersResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new InstanceGroupManagersResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @param[in] instance_group_manager The name of the managed instance group
     * to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group_manager) const;

    /**
     * Creates a new InstanceGroupManagersResource_DeleteInstancesMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @param[in] _content_ The data object to deleteInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_DeleteInstancesMethod* NewDeleteInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group_manager,
        const InstanceGroupManagersDeleteInstancesRequest& _content_) const;

    /**
     * Creates a new InstanceGroupManagersResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group_manager) const;

    /**
     * Creates a new InstanceGroupManagersResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where you want to create the managed
     * instance group.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const InstanceGroupManager& _content_) const;

    /**
     * Creates a new InstanceGroupManagersResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    InstanceGroupManagersResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a new InstanceGroupManagersResource_ListManagedInstancesMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_ListManagedInstancesMethod* NewListManagedInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group_manager) const;

    /**
     * Creates a new InstanceGroupManagersResource_RecreateInstancesMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @param[in] _content_ The data object to recreateInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_RecreateInstancesMethod* NewRecreateInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group_manager,
        const InstanceGroupManagersRecreateInstancesRequest& _content_) const;

    /**
     * Creates a new InstanceGroupManagersResource_ResizeMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @param[in] size The number of running instances that the managed instance
     * group should maintain at any given time. The group automatically adds or
     * removes instances to maintain the number of instances specified by this
     * parameter.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_ResizeMethod* NewResizeMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group_manager,
        const int32& size) const;

    /**
     * Creates a new InstanceGroupManagersResource_SetInstanceTemplateMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @param[in] _content_ The data object to setInstanceTemplate.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_SetInstanceTemplateMethod* NewSetInstanceTemplateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group_manager,
        const InstanceGroupManagersSetInstanceTemplateRequest& _content_) const;

    /**
     * Creates a new InstanceGroupManagersResource_SetTargetPoolsMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the managed instance group is
     * located.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @param[in] _content_ The data object to setTargetPools.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupManagersResource_SetTargetPoolsMethod* NewSetTargetPoolsMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group_manager,
        const InstanceGroupManagersSetTargetPoolsRequest& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(InstanceGroupManagersResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class InstanceGroupsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit InstanceGroupsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~InstanceGroupsResource() {}


    /**
     * Creates a new InstanceGroupsResource_AddInstancesMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the instance group is located.
     * @param[in] instance_group The name of the instance group where you are
     * adding instances.
     * @param[in] _content_ The data object to addInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupsResource_AddInstancesMethod* NewAddInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group,
        const InstanceGroupsAddInstancesRequest& _content_) const;

    /**
     * Creates a new InstanceGroupsResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupsResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    InstanceGroupsResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new InstanceGroupsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the instance group is located.
     * @param[in] instance_group The name of the instance group to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group) const;

    /**
     * Creates a new InstanceGroupsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the instance group is located.
     * @param[in] instance_group The name of the instance group.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group) const;

    /**
     * Creates a new InstanceGroupsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where you want to create the
     * instance group.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupsResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const InstanceGroup& _content_) const;

    /**
     * Creates a new InstanceGroupsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the instance group is located.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone The name of the zone where the instance group is located.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    InstanceGroupsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a new InstanceGroupsResource_ListInstancesMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the instance group is located.
     * @param[in] instance_group The name of the instance group from which you
     * want to generate a list of included instances.
     * @param[in] _content_ The data object to listInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupsResource_ListInstancesMethod* NewListInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group,
        const InstanceGroupsListInstancesRequest& _content_) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone The name of the zone where the instance group is located.
     *
     * @param[in] instance_group The name of the instance group from which you
     * want to generate a list of included instances.
     *
     * @param[in] _content_ The data object to listInstances.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    InstanceGroupsResource_ListInstancesMethodPager* NewListInstancesMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group,
        const InstanceGroupsListInstancesRequest& _content_) const;

    /**
     * Creates a new InstanceGroupsResource_RemoveInstancesMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the instance group is located.
     * @param[in] instance_group The name of the instance group where the
     * specified instances will be removed.
     * @param[in] _content_ The data object to removeInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupsResource_RemoveInstancesMethod* NewRemoveInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group,
        const InstanceGroupsRemoveInstancesRequest& _content_) const;

    /**
     * Creates a new InstanceGroupsResource_SetNamedPortsMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone where the instance group is located.
     * @param[in] instance_group The name of the instance group where the named
     * ports are updated.
     * @param[in] _content_ The data object to setNamedPorts.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceGroupsResource_SetNamedPortsMethod* NewSetNamedPortsMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance_group,
        const InstanceGroupsSetNamedPortsRequest& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(InstanceGroupsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class InstanceTemplatesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit InstanceTemplatesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~InstanceTemplatesResource() {}


    /**
     * Creates a new InstanceTemplatesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] instance_template The name of the instance template to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceTemplatesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& instance_template) const;

    /**
     * Creates a new InstanceTemplatesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] instance_template The name of the instance template.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceTemplatesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& instance_template) const;

    /**
     * Creates a new InstanceTemplatesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceTemplatesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const InstanceTemplate& _content_) const;

    /**
     * Creates a new InstanceTemplatesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstanceTemplatesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    InstanceTemplatesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(InstanceTemplatesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class InstancesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit InstancesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~InstancesResource() {}


    /**
     * Creates a new InstancesResource_AddAccessConfigMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance The instance name for this request.
     * @param[in] network_interface The name of the network interface to add to
     * this instance.
     * @param[in] _content_ The data object to addAccessConfig.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_AddAccessConfigMethod* NewAddAccessConfigMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const StringPiece& network_interface,
        const AccessConfig& _content_) const;

    /**
     * Creates a new InstancesResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    InstancesResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new InstancesResource_AttachDiskMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance The instance name for this request.
     * @param[in] _content_ The data object to attachDisk.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_AttachDiskMethod* NewAttachDiskMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const AttachedDisk& _content_) const;

    /**
     * Creates a new InstancesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance) const;

    /**
     * Creates a new InstancesResource_DeleteAccessConfigMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance The instance name for this request.
     * @param[in] access_config The name of the access config to delete.
     * @param[in] network_interface The name of the network interface.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_DeleteAccessConfigMethod* NewDeleteAccessConfigMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const StringPiece& access_config,
        const StringPiece& network_interface) const;

    /**
     * Creates a new InstancesResource_DetachDiskMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Instance name.
     * @param[in] device_name Disk device name to detach.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_DetachDiskMethod* NewDetachDiskMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const StringPiece& device_name) const;

    /**
     * Creates a new InstancesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance) const;

    /**
     * Creates a new InstancesResource_GetSerialPortOutputMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_GetSerialPortOutputMethod* NewGetSerialPortOutputMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance) const;

    /**
     * Creates a new InstancesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const Instance& _content_) const;

    /**
     * Creates a new InstancesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone The name of the zone for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    InstancesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a new InstancesResource_ResetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_ResetMethod* NewResetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance) const;

    /**
     * Creates a new InstancesResource_SetDiskAutoDeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance The instance name.
     * @param[in] auto_delete Whether to auto-delete the disk when the instance
     * is deleted.
     * @param[in] device_name The device name of the disk to modify.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_SetDiskAutoDeleteMethod* NewSetDiskAutoDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const bool& auto_delete,
        const StringPiece& device_name) const;

    /**
     * Creates a new InstancesResource_SetMachineTypeMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance scoping this request.
     * @param[in] _content_ The data object to setMachineType.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_SetMachineTypeMethod* NewSetMachineTypeMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const InstancesSetMachineTypeRequest& _content_) const;

    /**
     * Creates a new InstancesResource_SetMetadataMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance scoping this request.
     * @param[in] _content_ The data object to setMetadata.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_SetMetadataMethod* NewSetMetadataMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const Metadata& _content_) const;

    /**
     * Creates a new InstancesResource_SetSchedulingMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Instance name.
     * @param[in] _content_ The data object to setScheduling.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_SetSchedulingMethod* NewSetSchedulingMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const Scheduling& _content_) const;

    /**
     * Creates a new InstancesResource_SetServiceAccountMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance resource to start.
     * @param[in] _content_ The data object to setServiceAccount.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_SetServiceAccountMethod* NewSetServiceAccountMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const InstancesSetServiceAccountRequest& _content_) const;

    /**
     * Creates a new InstancesResource_SetTagsMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance scoping this request.
     * @param[in] _content_ The data object to setTags.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_SetTagsMethod* NewSetTagsMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const Tags& _content_) const;

    /**
     * Creates a new InstancesResource_StartMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance resource to start.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_StartMethod* NewStartMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance) const;

    /**
     * Creates a new InstancesResource_StartWithEncryptionKeyMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance resource to start.
     * @param[in] _content_ The data object to startWithEncryptionKey.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_StartWithEncryptionKeyMethod* NewStartWithEncryptionKeyMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance,
        const InstancesStartWithEncryptionKeyRequest& _content_) const;

    /**
     * Creates a new InstancesResource_StopMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] instance Name of the instance resource to stop.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    InstancesResource_StopMethod* NewStopMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& instance) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(InstancesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class LicensesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit LicensesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~LicensesResource() {}


    /**
     * Creates a new LicensesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] license Name of the License resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    LicensesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& license) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(LicensesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class MachineTypesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit MachineTypesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~MachineTypesResource() {}


    /**
     * Creates a new MachineTypesResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    MachineTypesResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    MachineTypesResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new MachineTypesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @param[in] machine_type Name of the machine type to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    MachineTypesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& machine_type) const;

    /**
     * Creates a new MachineTypesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone The name of the zone for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    MachineTypesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone The name of the zone for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    MachineTypesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(MachineTypesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class NetworksResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit NetworksResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~NetworksResource() {}


    /**
     * Creates a new NetworksResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] network Name of the network to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    NetworksResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& network) const;

    /**
     * Creates a new NetworksResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] network Name of the network to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    NetworksResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& network) const;

    /**
     * Creates a new NetworksResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    NetworksResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const Network& _content_) const;

    /**
     * Creates a new NetworksResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    NetworksResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    NetworksResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new NetworksResource_SwitchToCustomModeMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] network Name of the network to be updated.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    NetworksResource_SwitchToCustomModeMethod* NewSwitchToCustomModeMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& network) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(NetworksResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ProjectsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ProjectsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~ProjectsResource() {}


    /**
     * Creates a new ProjectsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProjectsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new ProjectsResource_MoveDiskMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to moveDisk.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProjectsResource_MoveDiskMethod* NewMoveDiskMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const DiskMoveRequest& _content_) const;

    /**
     * Creates a new ProjectsResource_MoveInstanceMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to moveInstance.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProjectsResource_MoveInstanceMethod* NewMoveInstanceMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const InstanceMoveRequest& _content_) const;

    /**
     * Creates a new ProjectsResource_SetCommonInstanceMetadataMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to setCommonInstanceMetadata.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProjectsResource_SetCommonInstanceMetadataMethod* NewSetCommonInstanceMetadataMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const Metadata& _content_) const;

    /**
     * Creates a new ProjectsResource_SetUsageExportBucketMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to setUsageExportBucket.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProjectsResource_SetUsageExportBucketMethod* NewSetUsageExportBucketMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const UsageExportLocation& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(ProjectsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RegionAutoscalersResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RegionAutoscalersResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~RegionAutoscalersResource() {}


    /**
     * Creates a new RegionAutoscalersResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] autoscaler Name of the autoscaler to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionAutoscalersResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& autoscaler) const;

    /**
     * Creates a new RegionAutoscalersResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] autoscaler Name of the autoscaler to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionAutoscalersResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& autoscaler) const;

    /**
     * Creates a new RegionAutoscalersResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionAutoscalersResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const Autoscaler& _content_) const;

    /**
     * Creates a new RegionAutoscalersResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionAutoscalersResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region scoping this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RegionAutoscalersResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a new RegionAutoscalersResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] autoscaler Name of the autoscaler to update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionAutoscalersResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& autoscaler,
        const Autoscaler& _content_) const;

    /**
     * Creates a new RegionAutoscalersResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionAutoscalersResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const Autoscaler& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(RegionAutoscalersResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RegionBackendServicesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RegionBackendServicesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~RegionBackendServicesResource() {}


    /**
     * Creates a new RegionBackendServicesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] backend_service Name of the BackendService resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionBackendServicesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& backend_service) const;

    /**
     * Creates a new RegionBackendServicesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] backend_service Name of the BackendService resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionBackendServicesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& backend_service) const;

    /**
     * Creates a new RegionBackendServicesResource_GetHealthMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project
     * @param[in] region Name of the region scoping this request.
     * @param[in] backend_service Name of the BackendService resource to which
     * the queried instance belongs.
     * @param[in] _content_ The data object to getHealth.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionBackendServicesResource_GetHealthMethod* NewGetHealthMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& backend_service,
        const ResourceGroupReference& _content_) const;

    /**
     * Creates a new RegionBackendServicesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionBackendServicesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const BackendService& _content_) const;

    /**
     * Creates a new RegionBackendServicesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionBackendServicesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region scoping this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RegionBackendServicesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a new RegionBackendServicesResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] backend_service Name of the BackendService resource to update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionBackendServicesResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& backend_service,
        const BackendService& _content_) const;

    /**
     * Creates a new RegionBackendServicesResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] backend_service Name of the BackendService resource to update.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionBackendServicesResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& backend_service,
        const BackendService& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(RegionBackendServicesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RegionInstanceGroupManagersResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RegionInstanceGroupManagersResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~RegionInstanceGroupManagersResource() {}


    /**
     * Creates a new RegionInstanceGroupManagersResource_AbandonInstancesMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group_manager Name of the managed instance group.
     * @param[in] _content_ The data object to abandonInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_AbandonInstancesMethod* NewAbandonInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group_manager,
        const RegionInstanceGroupManagersAbandonInstancesRequest& _content_) const;

    /**
     * Creates a new RegionInstanceGroupManagersResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group_manager Name of the managed instance group to
     * delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group_manager) const;

    /**
     * Creates a new RegionInstanceGroupManagersResource_DeleteInstancesMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group_manager Name of the managed instance group.
     * @param[in] _content_ The data object to deleteInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_DeleteInstancesMethod* NewDeleteInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group_manager,
        const RegionInstanceGroupManagersDeleteInstancesRequest& _content_) const;

    /**
     * Creates a new RegionInstanceGroupManagersResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group_manager Name of the managed instance group to
     * return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group_manager) const;

    /**
     * Creates a new RegionInstanceGroupManagersResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const InstanceGroupManager& _content_) const;

    /**
     * Creates a new RegionInstanceGroupManagersResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region scoping this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RegionInstanceGroupManagersResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a new
     * RegionInstanceGroupManagersResource_ListManagedInstancesMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_ListManagedInstancesMethod* NewListManagedInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group_manager) const;

    /**
     * Creates a new RegionInstanceGroupManagersResource_RecreateInstancesMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group_manager Name of the managed instance group.
     * @param[in] _content_ The data object to recreateInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_RecreateInstancesMethod* NewRecreateInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group_manager,
        const RegionInstanceGroupManagersRecreateRequest& _content_) const;

    /**
     * Creates a new RegionInstanceGroupManagersResource_ResizeMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group_manager Name of the managed instance group.
     * @param[in] size Number of instances that should exist in this instance
     * group manager.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_ResizeMethod* NewResizeMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group_manager,
        const int32& size) const;

    /**
     * Creates a new
     * RegionInstanceGroupManagersResource_SetInstanceTemplateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group_manager The name of the managed instance group.
     * @param[in] _content_ The data object to setInstanceTemplate.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_SetInstanceTemplateMethod* NewSetInstanceTemplateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group_manager,
        const RegionInstanceGroupManagersSetTemplateRequest& _content_) const;

    /**
     * Creates a new RegionInstanceGroupManagersResource_SetTargetPoolsMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group_manager Name of the managed instance group.
     * @param[in] _content_ The data object to setTargetPools.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupManagersResource_SetTargetPoolsMethod* NewSetTargetPoolsMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group_manager,
        const RegionInstanceGroupManagersSetTargetPoolsRequest& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupManagersResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RegionInstanceGroupsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RegionInstanceGroupsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~RegionInstanceGroupsResource() {}


    /**
     * Creates a new RegionInstanceGroupsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group Name of the instance group resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group) const;

    /**
     * Creates a new RegionInstanceGroupsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region scoping this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RegionInstanceGroupsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a new RegionInstanceGroupsResource_ListInstancesMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group Name of the regional instance group for which
     * we want to list the instances.
     * @param[in] _content_ The data object to listInstances.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupsResource_ListInstancesMethod* NewListInstancesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group,
        const RegionInstanceGroupsListInstancesRequest& _content_) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region scoping this request.
     *
     * @param[in] instance_group Name of the regional instance group for which
     * we want to list the instances.
     *
     * @param[in] _content_ The data object to listInstances.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RegionInstanceGroupsResource_ListInstancesMethodPager* NewListInstancesMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group,
        const RegionInstanceGroupsListInstancesRequest& _content_) const;

    /**
     * Creates a new RegionInstanceGroupsResource_SetNamedPortsMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] instance_group The name of the regional instance group where
     * the named ports are updated.
     * @param[in] _content_ The data object to setNamedPorts.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionInstanceGroupsResource_SetNamedPortsMethod* NewSetNamedPortsMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& instance_group,
        const RegionInstanceGroupsSetNamedPortsRequest& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(RegionInstanceGroupsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RegionOperationsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RegionOperationsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~RegionOperationsResource() {}


    /**
     * Creates a new RegionOperationsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] operation Name of the Operations resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionOperationsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& operation) const;

    /**
     * Creates a new RegionOperationsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] operation Name of the Operations resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionOperationsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& operation) const;

    /**
     * Creates a new RegionOperationsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionOperationsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RegionOperationsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(RegionOperationsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RegionsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RegionsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~RegionsResource() {}


    /**
     * Creates a new RegionsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a new RegionsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RegionsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RegionsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(RegionsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RoutersResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RoutersResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~RoutersResource() {}


    /**
     * Creates a new RoutersResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutersResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RoutersResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new RoutersResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] router Name of the Router resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutersResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& router) const;

    /**
     * Creates a new RoutersResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] router Name of the Router resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutersResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& router) const;

    /**
     * Creates a new RoutersResource_GetRouterStatusMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] router Name of the Router resource to query.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutersResource_GetRouterStatusMethod* NewGetRouterStatusMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& router) const;

    /**
     * Creates a new RoutersResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutersResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const Router& _content_) const;

    /**
     * Creates a new RoutersResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutersResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RoutersResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a new RoutersResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] router Name of the Router resource to update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutersResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& router,
        const Router& _content_) const;

    /**
     * Creates a new RoutersResource_PreviewMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] router Name of the Router resource to query.
     * @param[in] _content_ The data object to preview.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutersResource_PreviewMethod* NewPreviewMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& router,
        const Router& _content_) const;

    /**
     * Creates a new RoutersResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] router Name of the Router resource to update.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutersResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& router,
        const Router& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(RoutersResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RoutesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RoutesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~RoutesResource() {}


    /**
     * Creates a new RoutesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] route Name of the Route resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& route) const;

    /**
     * Creates a new RoutesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] route Name of the Route resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& route) const;

    /**
     * Creates a new RoutesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const Route& _content_) const;

    /**
     * Creates a new RoutesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RoutesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RoutesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(RoutesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class SnapshotsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit SnapshotsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~SnapshotsResource() {}


    /**
     * Creates a new SnapshotsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] snapshot Name of the Snapshot resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SnapshotsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& snapshot) const;

    /**
     * Creates a new SnapshotsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] snapshot Name of the Snapshot resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SnapshotsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& snapshot) const;

    /**
     * Creates a new SnapshotsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SnapshotsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    SnapshotsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(SnapshotsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class SslCertificatesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit SslCertificatesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~SslCertificatesResource() {}


    /**
     * Creates a new SslCertificatesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] ssl_certificate Name of the SslCertificate resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SslCertificatesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& ssl_certificate) const;

    /**
     * Creates a new SslCertificatesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] ssl_certificate Name of the SslCertificate resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SslCertificatesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& ssl_certificate) const;

    /**
     * Creates a new SslCertificatesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SslCertificatesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const SslCertificate& _content_) const;

    /**
     * Creates a new SslCertificatesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SslCertificatesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    SslCertificatesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(SslCertificatesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class SubnetworksResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit SubnetworksResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~SubnetworksResource() {}


    /**
     * Creates a new SubnetworksResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SubnetworksResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    SubnetworksResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new SubnetworksResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] subnetwork Name of the Subnetwork resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SubnetworksResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& subnetwork) const;

    /**
     * Creates a new SubnetworksResource_ExpandIpCidrRangeMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] subnetwork Name of the Subnetwork resource to update.
     * @param[in] _content_ The data object to expandIpCidrRange.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SubnetworksResource_ExpandIpCidrRangeMethod* NewExpandIpCidrRangeMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& subnetwork,
        const SubnetworksExpandIpCidrRangeRequest& _content_) const;

    /**
     * Creates a new SubnetworksResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] subnetwork Name of the Subnetwork resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SubnetworksResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& subnetwork) const;

    /**
     * Creates a new SubnetworksResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SubnetworksResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const Subnetwork& _content_) const;

    /**
     * Creates a new SubnetworksResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SubnetworksResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region scoping this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    SubnetworksResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(SubnetworksResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TargetHttpProxiesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TargetHttpProxiesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~TargetHttpProxiesResource() {}


    /**
     * Creates a new TargetHttpProxiesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_http_proxy Name of the TargetHttpProxy resource to
     * delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpProxiesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_http_proxy) const;

    /**
     * Creates a new TargetHttpProxiesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_http_proxy Name of the TargetHttpProxy resource to
     * return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpProxiesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_http_proxy) const;

    /**
     * Creates a new TargetHttpProxiesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpProxiesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const TargetHttpProxy& _content_) const;

    /**
     * Creates a new TargetHttpProxiesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpProxiesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TargetHttpProxiesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new TargetHttpProxiesResource_SetUrlMapMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_http_proxy Name of the TargetHttpProxy to set a URL map
     * for.
     * @param[in] _content_ The data object to setUrlMap.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpProxiesResource_SetUrlMapMethod* NewSetUrlMapMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_http_proxy,
        const UrlMapReference& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(TargetHttpProxiesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TargetHttpsProxiesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TargetHttpsProxiesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~TargetHttpsProxiesResource() {}


    /**
     * Creates a new TargetHttpsProxiesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_https_proxy Name of the TargetHttpsProxy resource to
     * delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpsProxiesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_https_proxy) const;

    /**
     * Creates a new TargetHttpsProxiesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_https_proxy Name of the TargetHttpsProxy resource to
     * return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpsProxiesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_https_proxy) const;

    /**
     * Creates a new TargetHttpsProxiesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpsProxiesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const TargetHttpsProxy& _content_) const;

    /**
     * Creates a new TargetHttpsProxiesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpsProxiesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TargetHttpsProxiesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new TargetHttpsProxiesResource_SetSslCertificatesMethod
     * instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_https_proxy Name of the TargetHttpsProxy resource to
     * set an SslCertificates resource for.
     * @param[in] _content_ The data object to setSslCertificates.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpsProxiesResource_SetSslCertificatesMethod* NewSetSslCertificatesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_https_proxy,
        const TargetHttpsProxiesSetSslCertificatesRequest& _content_) const;

    /**
     * Creates a new TargetHttpsProxiesResource_SetUrlMapMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_https_proxy Name of the TargetHttpsProxy resource whose
     * URL map is to be set.
     * @param[in] _content_ The data object to setUrlMap.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetHttpsProxiesResource_SetUrlMapMethod* NewSetUrlMapMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_https_proxy,
        const UrlMapReference& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(TargetHttpsProxiesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TargetInstancesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TargetInstancesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~TargetInstancesResource() {}


    /**
     * Creates a new TargetInstancesResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetInstancesResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TargetInstancesResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new TargetInstancesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone scoping this request.
     * @param[in] target_instance Name of the TargetInstance resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetInstancesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& target_instance) const;

    /**
     * Creates a new TargetInstancesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone scoping this request.
     * @param[in] target_instance Name of the TargetInstance resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetInstancesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& target_instance) const;

    /**
     * Creates a new TargetInstancesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone scoping this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetInstancesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const TargetInstance& _content_) const;

    /**
     * Creates a new TargetInstancesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetInstancesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone Name of the zone scoping this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TargetInstancesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(TargetInstancesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TargetPoolsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TargetPoolsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~TargetPoolsResource() {}


    /**
     * Creates a new TargetPoolsResource_AddHealthCheckMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] target_pool Name of the target pool to add a health check to.
     * @param[in] _content_ The data object to addHealthCheck.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_AddHealthCheckMethod* NewAddHealthCheckMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_pool,
        const TargetPoolsAddHealthCheckRequest& _content_) const;

    /**
     * Creates a new TargetPoolsResource_AddInstanceMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] target_pool Name of the TargetPool resource to add instances
     * to.
     * @param[in] _content_ The data object to addInstance.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_AddInstanceMethod* NewAddInstanceMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_pool,
        const TargetPoolsAddInstanceRequest& _content_) const;

    /**
     * Creates a new TargetPoolsResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TargetPoolsResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new TargetPoolsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] target_pool Name of the TargetPool resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_pool) const;

    /**
     * Creates a new TargetPoolsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] target_pool Name of the TargetPool resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_pool) const;

    /**
     * Creates a new TargetPoolsResource_GetHealthMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] target_pool Name of the TargetPool resource to which the
     * queried instance belongs.
     * @param[in] _content_ The data object to getHealth.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_GetHealthMethod* NewGetHealthMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_pool,
        const InstanceReference& _content_) const;

    /**
     * Creates a new TargetPoolsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const TargetPool& _content_) const;

    /**
     * Creates a new TargetPoolsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region scoping this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TargetPoolsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a new TargetPoolsResource_RemoveHealthCheckMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] target_pool Name of the target pool to remove health checks
     * from.
     * @param[in] _content_ The data object to removeHealthCheck.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_RemoveHealthCheckMethod* NewRemoveHealthCheckMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_pool,
        const TargetPoolsRemoveHealthCheckRequest& _content_) const;

    /**
     * Creates a new TargetPoolsResource_RemoveInstanceMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] target_pool Name of the TargetPool resource to remove
     * instances from.
     * @param[in] _content_ The data object to removeInstance.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_RemoveInstanceMethod* NewRemoveInstanceMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_pool,
        const TargetPoolsRemoveInstanceRequest& _content_) const;

    /**
     * Creates a new TargetPoolsResource_SetBackupMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region scoping this request.
     * @param[in] target_pool Name of the TargetPool resource to set a backup
     * pool for.
     * @param[in] _content_ The data object to setBackup.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetPoolsResource_SetBackupMethod* NewSetBackupMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_pool,
        const TargetReference& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(TargetPoolsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TargetSslProxiesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TargetSslProxiesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~TargetSslProxiesResource() {}


    /**
     * Creates a new TargetSslProxiesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_ssl_proxy Name of the TargetSslProxy resource to
     * delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetSslProxiesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_ssl_proxy) const;

    /**
     * Creates a new TargetSslProxiesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_ssl_proxy Name of the TargetSslProxy resource to
     * return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetSslProxiesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_ssl_proxy) const;

    /**
     * Creates a new TargetSslProxiesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetSslProxiesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const TargetSslProxy& _content_) const;

    /**
     * Creates a new TargetSslProxiesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetSslProxiesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TargetSslProxiesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new TargetSslProxiesResource_SetBackendServiceMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_ssl_proxy Name of the TargetSslProxy resource whose
     * BackendService resource is to be set.
     * @param[in] _content_ The data object to setBackendService.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetSslProxiesResource_SetBackendServiceMethod* NewSetBackendServiceMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_ssl_proxy,
        const TargetSslProxiesSetBackendServiceRequest& _content_) const;

    /**
     * Creates a new TargetSslProxiesResource_SetProxyHeaderMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_ssl_proxy Name of the TargetSslProxy resource whose
     * ProxyHeader is to be set.
     * @param[in] _content_ The data object to setProxyHeader.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetSslProxiesResource_SetProxyHeaderMethod* NewSetProxyHeaderMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_ssl_proxy,
        const TargetSslProxiesSetProxyHeaderRequest& _content_) const;

    /**
     * Creates a new TargetSslProxiesResource_SetSslCertificatesMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] target_ssl_proxy Name of the TargetSslProxy resource whose
     * SslCertificate resource is to be set.
     * @param[in] _content_ The data object to setSslCertificates.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetSslProxiesResource_SetSslCertificatesMethod* NewSetSslCertificatesMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& target_ssl_proxy,
        const TargetSslProxiesSetSslCertificatesRequest& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(TargetSslProxiesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TargetVpnGatewaysResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TargetVpnGatewaysResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~TargetVpnGatewaysResource() {}


    /**
     * Creates a new TargetVpnGatewaysResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetVpnGatewaysResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TargetVpnGatewaysResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new TargetVpnGatewaysResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] target_vpn_gateway Name of the target VPN gateway to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetVpnGatewaysResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_vpn_gateway) const;

    /**
     * Creates a new TargetVpnGatewaysResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] target_vpn_gateway Name of the target VPN gateway to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetVpnGatewaysResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& target_vpn_gateway) const;

    /**
     * Creates a new TargetVpnGatewaysResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetVpnGatewaysResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const TargetVpnGateway& _content_) const;

    /**
     * Creates a new TargetVpnGatewaysResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TargetVpnGatewaysResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TargetVpnGatewaysResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(TargetVpnGatewaysResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class UrlMapsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit UrlMapsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~UrlMapsResource() {}


    /**
     * Creates a new UrlMapsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] url_map Name of the UrlMap resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UrlMapsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& url_map) const;

    /**
     * Creates a new UrlMapsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] url_map Name of the UrlMap resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UrlMapsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& url_map) const;

    /**
     * Creates a new UrlMapsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UrlMapsResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const UrlMap& _content_) const;

    /**
     * Creates a new UrlMapsResource_InvalidateCacheMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] url_map Name of the UrlMap scoping this request.
     * @param[in] _content_ The data object to invalidateCache.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UrlMapsResource_InvalidateCacheMethod* NewInvalidateCacheMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& url_map,
        const CacheInvalidationRule& _content_) const;

    /**
     * Creates a new UrlMapsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UrlMapsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    UrlMapsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new UrlMapsResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] url_map Name of the UrlMap resource to update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UrlMapsResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& url_map,
        const UrlMap& _content_) const;

    /**
     * Creates a new UrlMapsResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] url_map Name of the UrlMap resource to update.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UrlMapsResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& url_map,
        const UrlMap& _content_) const;

    /**
     * Creates a new UrlMapsResource_ValidateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] url_map Name of the UrlMap resource to be validated as.
     * @param[in] _content_ The data object to validate.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UrlMapsResource_ValidateMethod* NewValidateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& url_map,
        const UrlMapsValidateRequest& _content_) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(UrlMapsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class VpnTunnelsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit VpnTunnelsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~VpnTunnelsResource() {}


    /**
     * Creates a new VpnTunnelsResource_AggregatedListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    VpnTunnelsResource_AggregatedListMethod* NewAggregatedListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    VpnTunnelsResource_AggregatedListMethodPager* NewAggregatedListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a new VpnTunnelsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] vpn_tunnel Name of the VpnTunnel resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    VpnTunnelsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& vpn_tunnel) const;

    /**
     * Creates a new VpnTunnelsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] vpn_tunnel Name of the VpnTunnel resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    VpnTunnelsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const StringPiece& vpn_tunnel) const;

    /**
     * Creates a new VpnTunnelsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    VpnTunnelsResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region,
        const VpnTunnel& _content_) const;

    /**
     * Creates a new VpnTunnelsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] region Name of the region for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    VpnTunnelsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] region Name of the region for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    VpnTunnelsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& region) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(VpnTunnelsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ZoneOperationsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ZoneOperationsResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~ZoneOperationsResource() {}


    /**
     * Creates a new ZoneOperationsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone for this request.
     * @param[in] operation Name of the Operations resource to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ZoneOperationsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& operation) const;

    /**
     * Creates a new ZoneOperationsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone for this request.
     * @param[in] operation Name of the Operations resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ZoneOperationsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone,
        const StringPiece& operation) const;

    /**
     * Creates a new ZoneOperationsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone for request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ZoneOperationsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     * @param[in] zone Name of the zone for request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    ZoneOperationsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(ZoneOperationsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ZonesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ZonesResource(ComputeService* service);

    /**
     * Standard destructor.
     */
    ~ZonesResource() {}


    /**
     * Creates a new ZonesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @param[in] zone Name of the zone resource to return.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ZonesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project,
        const StringPiece& zone) const;

    /**
     * Creates a new ZonesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ZonesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project Project ID for this request.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    ZonesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& project) const;

   private:
    ComputeService* service_;

    DISALLOW_COPY_AND_ASSIGN(ZonesResource);
  };



  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit ComputeService(client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~ComputeService();

  /**
   * Gets the  resource method factory.
   *
   * @return AddressesResource for creating methods.
   */
  const AddressesResource& get_addresses() const {
    return addresses_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return AutoscalersResource for creating methods.
   */
  const AutoscalersResource& get_autoscalers() const {
    return autoscalers_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return BackendServicesResource for creating methods.
   */
  const BackendServicesResource& get_backend_services() const {
    return backend_services_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return DiskTypesResource for creating methods.
   */
  const DiskTypesResource& get_disk_types() const {
    return disk_types_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return DisksResource for creating methods.
   */
  const DisksResource& get_disks() const {
    return disks_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return FirewallsResource for creating methods.
   */
  const FirewallsResource& get_firewalls() const {
    return firewalls_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ForwardingRulesResource for creating methods.
   */
  const ForwardingRulesResource& get_forwarding_rules() const {
    return forwarding_rules_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return GlobalAddressesResource for creating methods.
   */
  const GlobalAddressesResource& get_global_addresses() const {
    return global_addresses_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return GlobalForwardingRulesResource for creating methods.
   */
  const GlobalForwardingRulesResource& get_global_forwarding_rules() const {
    return global_forwarding_rules_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return GlobalOperationsResource for creating methods.
   */
  const GlobalOperationsResource& get_global_operations() const {
    return global_operations_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return HealthChecksResource for creating methods.
   */
  const HealthChecksResource& get_health_checks() const {
    return health_checks_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return HttpHealthChecksResource for creating methods.
   */
  const HttpHealthChecksResource& get_http_health_checks() const {
    return http_health_checks_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return HttpsHealthChecksResource for creating methods.
   */
  const HttpsHealthChecksResource& get_https_health_checks() const {
    return https_health_checks_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ImagesResource for creating methods.
   */
  const ImagesResource& get_images() const {
    return images_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return InstanceGroupManagersResource for creating methods.
   */
  const InstanceGroupManagersResource& get_instance_group_managers() const {
    return instance_group_managers_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return InstanceGroupsResource for creating methods.
   */
  const InstanceGroupsResource& get_instance_groups() const {
    return instance_groups_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return InstanceTemplatesResource for creating methods.
   */
  const InstanceTemplatesResource& get_instance_templates() const {
    return instance_templates_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return InstancesResource for creating methods.
   */
  const InstancesResource& get_instances() const {
    return instances_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return LicensesResource for creating methods.
   */
  const LicensesResource& get_licenses() const {
    return licenses_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return MachineTypesResource for creating methods.
   */
  const MachineTypesResource& get_machine_types() const {
    return machine_types_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return NetworksResource for creating methods.
   */
  const NetworksResource& get_networks() const {
    return networks_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ProjectsResource for creating methods.
   */
  const ProjectsResource& get_projects() const {
    return projects_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RegionAutoscalersResource for creating methods.
   */
  const RegionAutoscalersResource& get_region_autoscalers() const {
    return region_autoscalers_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RegionBackendServicesResource for creating methods.
   */
  const RegionBackendServicesResource& get_region_backend_services() const {
    return region_backend_services_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RegionInstanceGroupManagersResource for creating methods.
   */
  const RegionInstanceGroupManagersResource& get_region_instance_group_managers() const {
    return region_instance_group_managers_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RegionInstanceGroupsResource for creating methods.
   */
  const RegionInstanceGroupsResource& get_region_instance_groups() const {
    return region_instance_groups_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RegionOperationsResource for creating methods.
   */
  const RegionOperationsResource& get_region_operations() const {
    return region_operations_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RegionsResource for creating methods.
   */
  const RegionsResource& get_regions() const {
    return regions_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RoutersResource for creating methods.
   */
  const RoutersResource& get_routers() const {
    return routers_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RoutesResource for creating methods.
   */
  const RoutesResource& get_routes() const {
    return routes_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return SnapshotsResource for creating methods.
   */
  const SnapshotsResource& get_snapshots() const {
    return snapshots_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return SslCertificatesResource for creating methods.
   */
  const SslCertificatesResource& get_ssl_certificates() const {
    return ssl_certificates_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return SubnetworksResource for creating methods.
   */
  const SubnetworksResource& get_subnetworks() const {
    return subnetworks_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TargetHttpProxiesResource for creating methods.
   */
  const TargetHttpProxiesResource& get_target_http_proxies() const {
    return target_http_proxies_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TargetHttpsProxiesResource for creating methods.
   */
  const TargetHttpsProxiesResource& get_target_https_proxies() const {
    return target_https_proxies_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TargetInstancesResource for creating methods.
   */
  const TargetInstancesResource& get_target_instances() const {
    return target_instances_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TargetPoolsResource for creating methods.
   */
  const TargetPoolsResource& get_target_pools() const {
    return target_pools_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TargetSslProxiesResource for creating methods.
   */
  const TargetSslProxiesResource& get_target_ssl_proxies() const {
    return target_ssl_proxies_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TargetVpnGatewaysResource for creating methods.
   */
  const TargetVpnGatewaysResource& get_target_vpn_gateways() const {
    return target_vpn_gateways_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return UrlMapsResource for creating methods.
   */
  const UrlMapsResource& get_url_maps() const {
    return url_maps_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return VpnTunnelsResource for creating methods.
   */
  const VpnTunnelsResource& get_vpn_tunnels() const {
    return vpn_tunnels_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ZoneOperationsResource for creating methods.
   */
  const ZoneOperationsResource& get_zone_operations() const {
    return zone_operations_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ZonesResource for creating methods.
   */
  const ZonesResource& get_zones() const {
    return zones_;
  }

  /**
   * Declares the OAuth2.0 scopes used within Compute Engine API
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the ComputeService.
   */
  class SCOPES {
   public:
    /**
     * View and manage your data across Google Cloud Platform services.
     */
    static const char CLOUD_PLATFORM[];

    /**
     * View and manage your Google Compute Engine resources.
     */
    static const char COMPUTE[];

    /**
     * View your Google Compute Engine resources.
     */
    static const char COMPUTE_READONLY[];

    /**
     * Manage your data and permissions in Google Cloud Storage.
     */
    static const char DEVSTORAGE_FULL_CONTROL[];

    /**
     * View your data in Google Cloud Storage.
     */
    static const char DEVSTORAGE_READ_ONLY[];

    /**
     * Manage your data in Google Cloud Storage.
     */
    static const char DEVSTORAGE_READ_WRITE[];

   private:
    SCOPES();  // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  AddressesResource addresses_;
  AutoscalersResource autoscalers_;
  BackendServicesResource backend_services_;
  DiskTypesResource disk_types_;
  DisksResource disks_;
  FirewallsResource firewalls_;
  ForwardingRulesResource forwarding_rules_;
  GlobalAddressesResource global_addresses_;
  GlobalForwardingRulesResource global_forwarding_rules_;
  GlobalOperationsResource global_operations_;
  HealthChecksResource health_checks_;
  HttpHealthChecksResource http_health_checks_;
  HttpsHealthChecksResource https_health_checks_;
  ImagesResource images_;
  InstanceGroupManagersResource instance_group_managers_;
  InstanceGroupsResource instance_groups_;
  InstanceTemplatesResource instance_templates_;
  InstancesResource instances_;
  LicensesResource licenses_;
  MachineTypesResource machine_types_;
  NetworksResource networks_;
  ProjectsResource projects_;
  RegionAutoscalersResource region_autoscalers_;
  RegionBackendServicesResource region_backend_services_;
  RegionInstanceGroupManagersResource region_instance_group_managers_;
  RegionInstanceGroupsResource region_instance_groups_;
  RegionOperationsResource region_operations_;
  RegionsResource regions_;
  RoutersResource routers_;
  RoutesResource routes_;
  SnapshotsResource snapshots_;
  SslCertificatesResource ssl_certificates_;
  SubnetworksResource subnetworks_;
  TargetHttpProxiesResource target_http_proxies_;
  TargetHttpsProxiesResource target_https_proxies_;
  TargetInstancesResource target_instances_;
  TargetPoolsResource target_pools_;
  TargetSslProxiesResource target_ssl_proxies_;
  TargetVpnGatewaysResource target_vpn_gateways_;
  UrlMapsResource url_maps_;
  VpnTunnelsResource vpn_tunnels_;
  ZoneOperationsResource zone_operations_;
  ZonesResource zones_;

  DISALLOW_COPY_AND_ASSIGN(ComputeService);
};


/**
 * @defgroup DataObject Compute Engine API Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass Compute Engine API Service
 *
 * The service classes contain information about accessing and using the
 * Compute Engine API cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod Compute Engine API Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * ComputeService to access the Compute Engine API.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_COMPUTE_SERVICE_H_
