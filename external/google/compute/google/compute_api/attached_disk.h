// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_ATTACHED_DISK_H_
#define  GOOGLE_COMPUTE_API_ATTACHED_DISK_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/compute_api/attached_disk_initialize_params.h"
#include "google/compute_api/customer_encryption_key.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * An instance-attached disk resource.
 *
 * @ingroup DataObject
 */
class AttachedDisk : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static AttachedDisk* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit AttachedDisk(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit AttachedDisk(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~AttachedDisk();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::AttachedDisk</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::AttachedDisk");
  }

  /**
   * Determine if the '<code>autoDelete</code>' attribute was set.
   *
   * @return true if the '<code>autoDelete</code>' attribute was set.
   */
  bool has_auto_delete() const {
    return Storage().isMember("autoDelete");
  }

  /**
   * Clears the '<code>autoDelete</code>' attribute.
   */
  void clear_auto_delete() {
    MutableStorage()->removeMember("autoDelete");
  }


  /**
   * Get the value of the '<code>autoDelete</code>' attribute.
   */
  bool get_auto_delete() const {
    const Json::Value& storage = Storage("autoDelete");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>autoDelete</code>' attribute.
   *
   * Specifies whether the disk will be auto-deleted when the instance is
   * deleted (but not when the disk is detached from the instance).
   *
   * @param[in] value The new value.
   */
  void set_auto_delete(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("autoDelete"));
  }

  /**
   * Determine if the '<code>boot</code>' attribute was set.
   *
   * @return true if the '<code>boot</code>' attribute was set.
   */
  bool has_boot() const {
    return Storage().isMember("boot");
  }

  /**
   * Clears the '<code>boot</code>' attribute.
   */
  void clear_boot() {
    MutableStorage()->removeMember("boot");
  }


  /**
   * Get the value of the '<code>boot</code>' attribute.
   */
  bool get_boot() const {
    const Json::Value& storage = Storage("boot");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>boot</code>' attribute.
   *
   * Indicates that this is a boot disk. The virtual machine will use the first
   * partition of the disk for its root filesystem.
   *
   * @param[in] value The new value.
   */
  void set_boot(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("boot"));
  }

  /**
   * Determine if the '<code>deviceName</code>' attribute was set.
   *
   * @return true if the '<code>deviceName</code>' attribute was set.
   */
  bool has_device_name() const {
    return Storage().isMember("deviceName");
  }

  /**
   * Clears the '<code>deviceName</code>' attribute.
   */
  void clear_device_name() {
    MutableStorage()->removeMember("deviceName");
  }


  /**
   * Get the value of the '<code>deviceName</code>' attribute.
   */
  const StringPiece get_device_name() const {
    const Json::Value& v = Storage("deviceName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>deviceName</code>' attribute.
   *
   * Specifies a unique device name of your choice that is reflected into the
   * /dev/disk/by-id/google-* tree of a Linux operating system running within
   * the instance. This name can be used to reference the device for mounting,
   * resizing, and so on, from within the instance.
   *
   * If not specified, the server chooses a default device name to apply to this
   * disk, in the form persistent-disks-x, where x is a number assigned by
   * Google Compute Engine. This field is only applicable for persistent disks.
   *
   * @param[in] value The new value.
   */
  void set_device_name(const StringPiece& value) {
    *MutableStorage("deviceName") = value.data();
  }

  /**
   * Determine if the '<code>diskEncryptionKey</code>' attribute was set.
   *
   * @return true if the '<code>diskEncryptionKey</code>' attribute was set.
   */
  bool has_disk_encryption_key() const {
    return Storage().isMember("diskEncryptionKey");
  }

  /**
   * Clears the '<code>diskEncryptionKey</code>' attribute.
   */
  void clear_disk_encryption_key() {
    MutableStorage()->removeMember("diskEncryptionKey");
  }


  /**
   * Get a reference to the value of the '<code>diskEncryptionKey</code>'
   * attribute.
   */
  const CustomerEncryptionKey get_disk_encryption_key() const;

  /**
   * Gets a reference to a mutable value of the '<code>diskEncryptionKey</code>'
   * property.
   *
   * Encrypts or decrypts a disk using a customer-supplied encryption key.
   *
   * If you are creating a new disk, this field encrypts the new disk using an
   * encryption key that you provide. If you are attaching an existing disk that
   * is already encrypted, this field decrypts the disk using the customer-
   * supplied encryption key.
   *
   * If you encrypt a disk using a customer-supplied key, you must provide the
   * same key again when you attempt to use this resource at a later time. For
   * example, you must provide the key when you create a snapshot or an image
   * from the disk or when you attach the disk to a virtual machine instance.
   *
   * If you do not provide an encryption key, then the disk will be encrypted
   * using an automatically generated key and you do not need to provide a key
   * to use the disk later.
   *
   * Instance templates do not store customer-supplied encryption keys, so you
   * cannot use your own keys to encrypt disks in a managed instance group.
   *
   * @return The result can be modified to change the attribute value.
   */
  CustomerEncryptionKey mutable_diskEncryptionKey();

  /**
   * Determine if the '<code>index</code>' attribute was set.
   *
   * @return true if the '<code>index</code>' attribute was set.
   */
  bool has_index() const {
    return Storage().isMember("index");
  }

  /**
   * Clears the '<code>index</code>' attribute.
   */
  void clear_index() {
    MutableStorage()->removeMember("index");
  }


  /**
   * Get the value of the '<code>index</code>' attribute.
   */
  int32 get_index() const {
    const Json::Value& storage = Storage("index");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>index</code>' attribute.
   *
   * Assigns a zero-based index to this disk, where 0 is reserved for the boot
   * disk. For example, if you have many disks attached to an instance, each
   * disk would have a unique index number. If not specified, the server will
   * choose an appropriate value.
   *
   * @param[in] value The new value.
   */
  void set_index(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("index"));
  }

  /**
   * Determine if the '<code>initializeParams</code>' attribute was set.
   *
   * @return true if the '<code>initializeParams</code>' attribute was set.
   */
  bool has_initialize_params() const {
    return Storage().isMember("initializeParams");
  }

  /**
   * Clears the '<code>initializeParams</code>' attribute.
   */
  void clear_initialize_params() {
    MutableStorage()->removeMember("initializeParams");
  }


  /**
   * Get a reference to the value of the '<code>initializeParams</code>'
   * attribute.
   */
  const AttachedDiskInitializeParams get_initialize_params() const;

  /**
   * Gets a reference to a mutable value of the '<code>initializeParams</code>'
   * property.
   *
   * [Input Only] Specifies the parameters for a new disk that will be created
   * alongside the new instance. Use initialization parameters to create boot
   * disks or local SSDs attached to the new instance.
   *
   * This property is mutually exclusive with the source property; you can only
   * define one or the other, but not both.
   *
   * @return The result can be modified to change the attribute value.
   */
  AttachedDiskInitializeParams mutable_initializeParams();

  /**
   * Determine if the '<code>interface</code>' attribute was set.
   *
   * @return true if the '<code>interface</code>' attribute was set.
   */
  bool has_interface() const {
    return Storage().isMember("interface");
  }

  /**
   * Clears the '<code>interface</code>' attribute.
   */
  void clear_interface() {
    MutableStorage()->removeMember("interface");
  }


  /**
   * Get the value of the '<code>interface</code>' attribute.
   */
  const StringPiece get_interface() const {
    const Json::Value& v = Storage("interface");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>interface</code>' attribute.
   *
   * Specifies the disk interface to use for attaching this disk, which is
   * either SCSI or NVME. The default is SCSI. Persistent disks must always use
   * SCSI and the request will fail if you attempt to attach a persistent disk
   * in any other format than SCSI. Local SSDs can use either NVME or SCSI. For
   * performance characteristics of SCSI over NVMe, see Local SSD performance.
   *
   * @param[in] value The new value.
   */
  void set_interface(const StringPiece& value) {
    *MutableStorage("interface") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of the resource. Always compute#attachedDisk for
   * attached disks.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>licenses</code>' attribute was set.
   *
   * @return true if the '<code>licenses</code>' attribute was set.
   */
  bool has_licenses() const {
    return Storage().isMember("licenses");
  }

  /**
   * Clears the '<code>licenses</code>' attribute.
   */
  void clear_licenses() {
    MutableStorage()->removeMember("licenses");
  }


  /**
   * Get a reference to the value of the '<code>licenses</code>' attribute.
   */
  const client::JsonCppArray<string > get_licenses() const {
     const Json::Value& storage = Storage("licenses");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>licenses</code>'
   * property.
   *
   * [Output Only] Any valid publicly visible licenses.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_licenses() {
    Json::Value* storage = MutableStorage("licenses");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>mode</code>' attribute was set.
   *
   * @return true if the '<code>mode</code>' attribute was set.
   */
  bool has_mode() const {
    return Storage().isMember("mode");
  }

  /**
   * Clears the '<code>mode</code>' attribute.
   */
  void clear_mode() {
    MutableStorage()->removeMember("mode");
  }


  /**
   * Get the value of the '<code>mode</code>' attribute.
   */
  const StringPiece get_mode() const {
    const Json::Value& v = Storage("mode");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mode</code>' attribute.
   *
   * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If
   * not specified, the default is to attach the disk in READ_WRITE mode.
   *
   * @param[in] value The new value.
   */
  void set_mode(const StringPiece& value) {
    *MutableStorage("mode") = value.data();
  }

  /**
   * Determine if the '<code>source</code>' attribute was set.
   *
   * @return true if the '<code>source</code>' attribute was set.
   */
  bool has_source() const {
    return Storage().isMember("source");
  }

  /**
   * Clears the '<code>source</code>' attribute.
   */
  void clear_source() {
    MutableStorage()->removeMember("source");
  }


  /**
   * Get the value of the '<code>source</code>' attribute.
   */
  const StringPiece get_source() const {
    const Json::Value& v = Storage("source");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>source</code>' attribute.
   *
   * Specifies a valid partial or full URL to an existing Persistent Disk
   * resource. When creating a new instance, one of initializeParams.sourceImage
   * or disks.source is required.
   *
   * If desired, you can also attach existing non-root persistent disks using
   * this property. This field is only applicable for persistent disks.
   *
   * Note that for InstanceTemplate, specify the disk name, not the URL for the
   * disk.
   *
   * @param[in] value The new value.
   */
  void set_source(const StringPiece& value) {
    *MutableStorage("source") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * Specifies the type of the disk, either SCRATCH or PERSISTENT. If not
   * specified, the default is PERSISTENT.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

 private:
  void operator=(const AttachedDisk&);
};  // AttachedDisk
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_ATTACHED_DISK_H_
