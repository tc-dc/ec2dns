// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2017-01-11 18:31:16 UTC
//   on: 2017-01-18, 05:15:31 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Compute Engine API (compute/v1)
// Generated from:
//   Version: v1
//   Revision: 133
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_COMPUTE_API_TARGET_POOL_H_
#define  GOOGLE_COMPUTE_API_TARGET_POOL_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_compute_api {
using namespace googleapis;

/**
 * A TargetPool resource. This resource defines a pool of instances, associated
 * HttpHealthCheck resources, and the fallback target pool.
 *
 * @ingroup DataObject
 */
class TargetPool : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static TargetPool* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TargetPool(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TargetPool(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~TargetPool();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_compute_api::TargetPool</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_compute_api::TargetPool");
  }

  /**
   * Determine if the '<code>backupPool</code>' attribute was set.
   *
   * @return true if the '<code>backupPool</code>' attribute was set.
   */
  bool has_backup_pool() const {
    return Storage().isMember("backupPool");
  }

  /**
   * Clears the '<code>backupPool</code>' attribute.
   */
  void clear_backup_pool() {
    MutableStorage()->removeMember("backupPool");
  }


  /**
   * Get the value of the '<code>backupPool</code>' attribute.
   */
  const StringPiece get_backup_pool() const {
    const Json::Value& v = Storage("backupPool");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>backupPool</code>' attribute.
   *
   * This field is applicable only when the containing target pool is serving a
   * forwarding rule as the primary pool, and its failoverRatio field is
   * properly set to a value between [0, 1].
   *
   * backupPool and failoverRatio together define the fallback behavior of the
   * primary target pool: if the ratio of the healthy instances in the primary
   * pool is at or below failoverRatio, traffic arriving at the load-balanced IP
   * will be directed to the backup pool.
   *
   * In case where failoverRatio and backupPool are not set, or all the
   * instances in the backup pool are unhealthy, the traffic will be directed
   * back to the primary pool in the "force" mode, where traffic will be spread
   * to the healthy instances with the best effort, or to all instances when no
   * instance is healthy.
   *
   * @param[in] value The new value.
   */
  void set_backup_pool(const StringPiece& value) {
    *MutableStorage("backupPool") = value.data();
  }

  /**
   * Determine if the '<code>creationTimestamp</code>' attribute was set.
   *
   * @return true if the '<code>creationTimestamp</code>' attribute was set.
   */
  bool has_creation_timestamp() const {
    return Storage().isMember("creationTimestamp");
  }

  /**
   * Clears the '<code>creationTimestamp</code>' attribute.
   */
  void clear_creation_timestamp() {
    MutableStorage()->removeMember("creationTimestamp");
  }


  /**
   * Get the value of the '<code>creationTimestamp</code>' attribute.
   */
  const StringPiece get_creation_timestamp() const {
    const Json::Value& v = Storage("creationTimestamp");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creationTimestamp</code>' attribute.
   *
   * [Output Only] Creation timestamp in RFC3339 text format.
   *
   * @param[in] value The new value.
   */
  void set_creation_timestamp(const StringPiece& value) {
    *MutableStorage("creationTimestamp") = value.data();
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * An optional description of this resource. Provide this property when you
   * create the resource.
   *
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>failoverRatio</code>' attribute was set.
   *
   * @return true if the '<code>failoverRatio</code>' attribute was set.
   */
  bool has_failover_ratio() const {
    return Storage().isMember("failoverRatio");
  }

  /**
   * Clears the '<code>failoverRatio</code>' attribute.
   */
  void clear_failover_ratio() {
    MutableStorage()->removeMember("failoverRatio");
  }


  /**
   * Get the value of the '<code>failoverRatio</code>' attribute.
   */
  float get_failover_ratio() const {
    const Json::Value& storage = Storage("failoverRatio");
    return client::JsonValueToCppValueHelper<float >(storage);
  }

  /**
   * Change the '<code>failoverRatio</code>' attribute.
   *
   * This field is applicable only when the containing target pool is serving a
   * forwarding rule as the primary pool (i.e., not as a backup pool to some
   * other target pool). The value of the field must be in [0, 1].
   *
   * If set, backupPool must also be set. They together define the fallback
   * behavior of the primary target pool: if the ratio of the healthy instances
   * in the primary pool is at or below this number, traffic arriving at the
   * load-balanced IP will be directed to the backup pool.
   *
   * In case where failoverRatio is not set or all the instances in the backup
   * pool are unhealthy, the traffic will be directed back to the primary pool
   * in the "force" mode, where traffic will be spread to the healthy instances
   * with the best effort, or to all instances when no instance is healthy.
   *
   * @param[in] value The new value.
   */
  void set_failover_ratio(float value) {
    client::SetJsonValueFromCppValueHelper<float >(
      value, MutableStorage("failoverRatio"));
  }

  /**
   * Determine if the '<code>healthChecks</code>' attribute was set.
   *
   * @return true if the '<code>healthChecks</code>' attribute was set.
   */
  bool has_health_checks() const {
    return Storage().isMember("healthChecks");
  }

  /**
   * Clears the '<code>healthChecks</code>' attribute.
   */
  void clear_health_checks() {
    MutableStorage()->removeMember("healthChecks");
  }


  /**
   * Get a reference to the value of the '<code>healthChecks</code>' attribute.
   */
  const client::JsonCppArray<string > get_health_checks() const {
     const Json::Value& storage = Storage("healthChecks");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>healthChecks</code>'
   * property.
   *
   * A list of URLs to the HttpHealthCheck resource. A member instance in this
   * pool is considered healthy if and only if all specified health checks pass.
   * An empty list means all member instances will be considered healthy at all
   * times.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_healthChecks() {
    Json::Value* storage = MutableStorage("healthChecks");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  uint64 get_id() const {
    const Json::Value& storage = Storage("id");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output Only] The unique identifier for the resource. This identifier is
   * defined by the server.
   *
   * @param[in] value The new value.
   */
  void set_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("id"));
  }

  /**
   * Determine if the '<code>instances</code>' attribute was set.
   *
   * @return true if the '<code>instances</code>' attribute was set.
   */
  bool has_instances() const {
    return Storage().isMember("instances");
  }

  /**
   * Clears the '<code>instances</code>' attribute.
   */
  void clear_instances() {
    MutableStorage()->removeMember("instances");
  }


  /**
   * Get a reference to the value of the '<code>instances</code>' attribute.
   */
  const client::JsonCppArray<string > get_instances() const {
     const Json::Value& storage = Storage("instances");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>instances</code>'
   * property.
   *
   * A list of resource URLs to the virtual machine instances serving this pool.
   * They must live in zones contained in the same region as this pool.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_instances() {
    Json::Value* storage = MutableStorage("instances");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output Only] Type of the resource. Always compute#targetPool for target
   * pools.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Name of the resource. Provided by the client when the resource is created.
   * The name must be 1-63 characters long, and comply with RFC1035.
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must
   * be a lowercase letter, and all following characters must be a dash,
   * lowercase letter, or digit, except the last character, which cannot be a
   * dash.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>region</code>' attribute was set.
   *
   * @return true if the '<code>region</code>' attribute was set.
   */
  bool has_region() const {
    return Storage().isMember("region");
  }

  /**
   * Clears the '<code>region</code>' attribute.
   */
  void clear_region() {
    MutableStorage()->removeMember("region");
  }


  /**
   * Get the value of the '<code>region</code>' attribute.
   */
  const StringPiece get_region() const {
    const Json::Value& v = Storage("region");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>region</code>' attribute.
   *
   * [Output Only] URL of the region where the target pool resides.
   *
   * @param[in] value The new value.
   */
  void set_region(const StringPiece& value) {
    *MutableStorage("region") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output Only] Server-defined URL for the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>sessionAffinity</code>' attribute was set.
   *
   * @return true if the '<code>sessionAffinity</code>' attribute was set.
   */
  bool has_session_affinity() const {
    return Storage().isMember("sessionAffinity");
  }

  /**
   * Clears the '<code>sessionAffinity</code>' attribute.
   */
  void clear_session_affinity() {
    MutableStorage()->removeMember("sessionAffinity");
  }


  /**
   * Get the value of the '<code>sessionAffinity</code>' attribute.
   */
  const StringPiece get_session_affinity() const {
    const Json::Value& v = Storage("sessionAffinity");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sessionAffinity</code>' attribute.
   *
   * Sesssion affinity option, must be one of the following values:
   * <dl>
   * <dt>NONE
   * <dd>Connections from the same client IP may go to any instance in the pool.
   * <dt>CLIENT_IP
   * <dd>Connections from the same client IP will go to the same instance in the
   * pool while that instance remains healthy.
   * <dt>CLIENT_IP_PROTO
   * <dd>Connections from the same client IP with the same IP protocol will go
   * to the same instance in the pool while that instance remains healthy.
   * </dl>
   *
   *
   * @param[in] value The new value.
   */
  void set_session_affinity(const StringPiece& value) {
    *MutableStorage("sessionAffinity") = value.data();
  }

 private:
  void operator=(const TargetPool&);
};  // TargetPool
}  // namespace google_compute_api
#endif  // GOOGLE_COMPUTE_API_TARGET_POOL_H_
